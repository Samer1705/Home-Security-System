
Home_Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00004284  00004318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800106  00800106  000043be  2**0
                  ALLOC
  3 .stab         00005ed4  00000000  00000000  000043c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003478  00000000  00000000  0000a294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d70c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d84c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f605  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000104f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000112a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011400  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0001168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011e5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_1>
       8:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_2>
       c:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__vector_13>
      38:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <__vector_14>
      3c:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 32       	cpi	r26, 0x29	; 41
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 87 20 	call	0x410e	; 0x410e <main>
      8a:	0c 94 40 21 	jmp	0x4280	; 0x4280 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ee       	ldi	r26, 0xE9	; 233
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c4 20 	jmp	0x4188	; 0x4188 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ee       	ldi	r24, 0xE9	; 233
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d4 20 	jmp	0x41a8	; 0x41a8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f0 20 	jmp	0x41e0	; 0x41e0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_write>:
#include "atmega32_eeprom.h"

#include <avr/io.h>

void EEPROM_write(uint16 uiAddress, uint8 ucData)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_write+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6b 83       	std	Y+3, r22	; 0x03
	while(EECR & (1<<EEWE)); 				/* Wait for completion of previous write */
     b58:	ec e3       	ldi	r30, 0x3C	; 60
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	82 70       	andi	r24, 0x02	; 2
     b64:	90 70       	andi	r25, 0x00	; 0
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	b9 f7       	brne	.-18     	; 0xb58 <EEPROM_write+0x12>

	/* Set up address and data registers */
	EEAR = uiAddress;
     b6a:	ee e3       	ldi	r30, 0x3E	; 62
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	80 83       	st	Z, r24
	EEDR = ucData;
     b76:	ed e3       	ldi	r30, 0x3D	; 61
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	80 83       	st	Z, r24

	EECR |= (1<<EEMWE);						/* Write logical one to EEMWE */
     b7e:	ac e3       	ldi	r26, 0x3C	; 60
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	ec e3       	ldi	r30, 0x3C	; 60
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	84 60       	ori	r24, 0x04	; 4
     b8a:	8c 93       	st	X, r24
	EECR |= (1<<EEWE);						/* Start eeprom write by setting EEWE */
     b8c:	ac e3       	ldi	r26, 0x3C	; 60
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ec e3       	ldi	r30, 0x3C	; 60
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	82 60       	ori	r24, 0x02	; 2
     b98:	8c 93       	st	X, r24
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <EEPROM_read>:

uint8 EEPROM_read(uint16 uiAddress)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <EEPROM_read+0x6>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	89 83       	std	Y+1, r24	; 0x01
	while(EECR & (1<<EEWE));				/* Wait for completion of previous write */
     bb4:	ec e3       	ldi	r30, 0x3C	; 60
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	82 70       	andi	r24, 0x02	; 2
     bc0:	90 70       	andi	r25, 0x00	; 0
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	b9 f7       	brne	.-18     	; 0xbb4 <EEPROM_read+0xe>
	EEAR = uiAddress;						/* Set up address register */
     bc6:	ee e3       	ldi	r30, 0x3E	; 62
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	80 83       	st	Z, r24
	EECR |= (1<<EERE);						/* Start eeprom read by writing EERE */
     bd2:	ac e3       	ldi	r26, 0x3C	; 60
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ec e3       	ldi	r30, 0x3C	; 60
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
	return EEDR;							/* Return data from data register */
     be0:	ed e3       	ldi	r30, 0x3D	; 61
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
}
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <GPIO_setupPinDirection>:
/*
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <GPIO_setupPinDirection+0x6>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <GPIO_setupPinDirection+0x8>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	6a 83       	std	Y+2, r22	; 0x02
     c02:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	88 30       	cpi	r24, 0x08	; 8
     c08:	08 f0       	brcs	.+2      	; 0xc0c <GPIO_setupPinDirection+0x1c>
     c0a:	d5 c0       	rjmp	.+426    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	84 30       	cpi	r24, 0x04	; 4
     c10:	08 f0       	brcs	.+2      	; 0xc14 <GPIO_setupPinDirection+0x24>
     c12:	d1 c0       	rjmp	.+418    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	3d 83       	std	Y+5, r19	; 0x05
     c1c:	2c 83       	std	Y+4, r18	; 0x04
     c1e:	8c 81       	ldd	r24, Y+4	; 0x04
     c20:	9d 81       	ldd	r25, Y+5	; 0x05
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	91 05       	cpc	r25, r1
     c26:	09 f4       	brne	.+2      	; 0xc2a <GPIO_setupPinDirection+0x3a>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <GPIO_setupPinDirection+0xc0>
     c2a:	2c 81       	ldd	r18, Y+4	; 0x04
     c2c:	3d 81       	ldd	r19, Y+5	; 0x05
     c2e:	22 30       	cpi	r18, 0x02	; 2
     c30:	31 05       	cpc	r19, r1
     c32:	2c f4       	brge	.+10     	; 0xc3e <GPIO_setupPinDirection+0x4e>
     c34:	8c 81       	ldd	r24, Y+4	; 0x04
     c36:	9d 81       	ldd	r25, Y+5	; 0x05
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	71 f0       	breq	.+28     	; 0xc58 <GPIO_setupPinDirection+0x68>
     c3c:	bc c0       	rjmp	.+376    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
     c3e:	2c 81       	ldd	r18, Y+4	; 0x04
     c40:	3d 81       	ldd	r19, Y+5	; 0x05
     c42:	22 30       	cpi	r18, 0x02	; 2
     c44:	31 05       	cpc	r19, r1
     c46:	09 f4       	brne	.+2      	; 0xc4a <GPIO_setupPinDirection+0x5a>
     c48:	5f c0       	rjmp	.+190    	; 0xd08 <GPIO_setupPinDirection+0x118>
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	9d 81       	ldd	r25, Y+5	; 0x05
     c4e:	83 30       	cpi	r24, 0x03	; 3
     c50:	91 05       	cpc	r25, r1
     c52:	09 f4       	brne	.+2      	; 0xc56 <GPIO_setupPinDirection+0x66>
     c54:	85 c0       	rjmp	.+266    	; 0xd60 <GPIO_setupPinDirection+0x170>
     c56:	af c0       	rjmp	.+350    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRA,pin_num);
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	a1 f4       	brne	.+40     	; 0xc86 <GPIO_setupPinDirection+0x96>
     c5e:	aa e3       	ldi	r26, 0x3A	; 58
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	ea e3       	ldi	r30, 0x3A	; 58
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <GPIO_setupPinDirection+0x8c>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <GPIO_setupPinDirection+0x88>
     c80:	84 2b       	or	r24, r20
     c82:	8c 93       	st	X, r24
     c84:	98 c0       	rjmp	.+304    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRA,pin_num);
     c86:	aa e3       	ldi	r26, 0x3A	; 58
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e3       	ldi	r30, 0x3A	; 58
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <GPIO_setupPinDirection+0xb4>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <GPIO_setupPinDirection+0xb0>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	83 c0       	rjmp	.+262    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRB,pin_num);
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	a1 f4       	brne	.+40     	; 0xcde <GPIO_setupPinDirection+0xee>
     cb6:	a7 e3       	ldi	r26, 0x37	; 55
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e3       	ldi	r30, 0x37	; 55
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <GPIO_setupPinDirection+0xe4>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <GPIO_setupPinDirection+0xe0>
     cd8:	84 2b       	or	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	6c c0       	rjmp	.+216    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRB,pin_num);
     cde:	a7 e3       	ldi	r26, 0x37	; 55
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e3       	ldi	r30, 0x37	; 55
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	48 2f       	mov	r20, r24
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 2e       	mov	r0, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <GPIO_setupPinDirection+0x10c>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <GPIO_setupPinDirection+0x108>
     d00:	80 95       	com	r24
     d02:	84 23       	and	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	57 c0       	rjmp	.+174    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRC,pin_num);
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	a1 f4       	brne	.+40     	; 0xd36 <GPIO_setupPinDirection+0x146>
     d0e:	a4 e3       	ldi	r26, 0x34	; 52
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e4 e3       	ldi	r30, 0x34	; 52
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_setupPinDirection+0x13c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_setupPinDirection+0x138>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	40 c0       	rjmp	.+128    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRC,pin_num);
     d36:	a4 e3       	ldi	r26, 0x34	; 52
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e4 e3       	ldi	r30, 0x34	; 52
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <GPIO_setupPinDirection+0x164>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <GPIO_setupPinDirection+0x160>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	2b c0       	rjmp	.+86     	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRD,pin_num);
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	a1 f4       	brne	.+40     	; 0xd8e <GPIO_setupPinDirection+0x19e>
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setupPinDirection+0x194>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setupPinDirection+0x190>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRD,pin_num);
     d8e:	a1 e3       	ldi	r26, 0x31	; 49
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e1 e3       	ldi	r30, 0x31	; 49
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <GPIO_setupPinDirection+0x1bc>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <GPIO_setupPinDirection+0x1b8>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
			break;
		}
	}
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <GPIO_writePin+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <GPIO_writePin+0x8>
     dce:	0f 92       	push	r0
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	6a 83       	std	Y+2, r22	; 0x02
     dd8:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	88 30       	cpi	r24, 0x08	; 8
     dde:	08 f0       	brcs	.+2      	; 0xde2 <GPIO_writePin+0x1c>
     de0:	e4 c0       	rjmp	.+456    	; 0xfaa <GPIO_writePin+0x1e4>
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	08 f0       	brcs	.+2      	; 0xdea <GPIO_writePin+0x24>
     de8:	e0 c0       	rjmp	.+448    	; 0xfaa <GPIO_writePin+0x1e4>
	{
		/* Set up the pin value as required */
		switch (port_num)
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	3d 83       	std	Y+5, r19	; 0x05
     df2:	2c 83       	std	Y+4, r18	; 0x04
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	9d 81       	ldd	r25, Y+5	; 0x05
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <GPIO_writePin+0x3a>
     dfe:	47 c0       	rjmp	.+142    	; 0xe8e <GPIO_writePin+0xc8>
     e00:	2c 81       	ldd	r18, Y+4	; 0x04
     e02:	3d 81       	ldd	r19, Y+5	; 0x05
     e04:	22 30       	cpi	r18, 0x02	; 2
     e06:	31 05       	cpc	r19, r1
     e08:	2c f4       	brge	.+10     	; 0xe14 <GPIO_writePin+0x4e>
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	9d 81       	ldd	r25, Y+5	; 0x05
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	71 f0       	breq	.+28     	; 0xe2e <GPIO_writePin+0x68>
     e12:	cb c0       	rjmp	.+406    	; 0xfaa <GPIO_writePin+0x1e4>
     e14:	2c 81       	ldd	r18, Y+4	; 0x04
     e16:	3d 81       	ldd	r19, Y+5	; 0x05
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <GPIO_writePin+0x5a>
     e1e:	67 c0       	rjmp	.+206    	; 0xeee <GPIO_writePin+0x128>
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	83 30       	cpi	r24, 0x03	; 3
     e26:	91 05       	cpc	r25, r1
     e28:	09 f4       	brne	.+2      	; 0xe2c <GPIO_writePin+0x66>
     e2a:	91 c0       	rjmp	.+290    	; 0xf4e <GPIO_writePin+0x188>
     e2c:	be c0       	rjmp	.+380    	; 0xfaa <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTA, pin_num);
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 23       	and	r24, r24
     e32:	a9 f4       	brne	.+42     	; 0xe5e <GPIO_writePin+0x98>
     e34:	ab e3       	ldi	r26, 0x3B	; 59
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	eb e3       	ldi	r30, 0x3B	; 59
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <GPIO_writePin+0x8c>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <GPIO_writePin+0x88>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	a6 c0       	rjmp	.+332    	; 0xfaa <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTA, pin_num);
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	09 f0       	breq	.+2      	; 0xe66 <GPIO_writePin+0xa0>
     e64:	a2 c0       	rjmp	.+324    	; 0xfaa <GPIO_writePin+0x1e4>
     e66:	ab e3       	ldi	r26, 0x3B	; 59
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb e3       	ldi	r30, 0x3B	; 59
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <GPIO_writePin+0xbe>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <GPIO_writePin+0xba>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	8e c0       	rjmp	.+284    	; 0xfaa <GPIO_writePin+0x1e4>
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTB, pin_num);
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	88 23       	and	r24, r24
     e92:	a9 f4       	brne	.+42     	; 0xebe <GPIO_writePin+0xf8>
     e94:	a8 e3       	ldi	r26, 0x38	; 56
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e8 e3       	ldi	r30, 0x38	; 56
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <GPIO_writePin+0xec>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <GPIO_writePin+0xe8>
     eb6:	80 95       	com	r24
     eb8:	84 23       	and	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	76 c0       	rjmp	.+236    	; 0xfaa <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTB, pin_num);
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <GPIO_writePin+0x100>
     ec4:	72 c0       	rjmp	.+228    	; 0xfaa <GPIO_writePin+0x1e4>
     ec6:	a8 e3       	ldi	r26, 0x38	; 56
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e8 e3       	ldi	r30, 0x38	; 56
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <GPIO_writePin+0x11e>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <GPIO_writePin+0x11a>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	5e c0       	rjmp	.+188    	; 0xfaa <GPIO_writePin+0x1e4>
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTC, pin_num);
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 23       	and	r24, r24
     ef2:	a9 f4       	brne	.+42     	; 0xf1e <GPIO_writePin+0x158>
     ef4:	a5 e3       	ldi	r26, 0x35	; 53
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e5 e3       	ldi	r30, 0x35	; 53
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_writePin+0x14c>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_writePin+0x148>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	46 c0       	rjmp	.+140    	; 0xfaa <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTC, pin_num);
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <GPIO_writePin+0x160>
     f24:	42 c0       	rjmp	.+132    	; 0xfaa <GPIO_writePin+0x1e4>
     f26:	a5 e3       	ldi	r26, 0x35	; 53
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e5 e3       	ldi	r30, 0x35	; 53
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <GPIO_writePin+0x17e>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <GPIO_writePin+0x17a>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	2e c0       	rjmp	.+92     	; 0xfaa <GPIO_writePin+0x1e4>
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTD, pin_num);
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	88 23       	and	r24, r24
     f52:	a9 f4       	brne	.+42     	; 0xf7e <GPIO_writePin+0x1b8>
     f54:	a2 e3       	ldi	r26, 0x32	; 50
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e2 e3       	ldi	r30, 0x32	; 50
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_writePin+0x1ac>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_writePin+0x1a8>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	16 c0       	rjmp	.+44     	; 0xfaa <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTD, pin_num);
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	99 f4       	brne	.+38     	; 0xfaa <GPIO_writePin+0x1e4>
     f84:	a2 e3       	ldi	r26, 0x32	; 50
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e2 e3       	ldi	r30, 0x32	; 50
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <GPIO_writePin+0x1dc>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <GPIO_writePin+0x1d8>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
			break;
		}
	}
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <GPIO_readPin>:
/*
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	29 97       	sbiw	r28, 0x09	; 9
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	88 30       	cpi	r24, 0x08	; 8
     fd6:	08 f0       	brcs	.+2      	; 0xfda <GPIO_readPin+0x20>
     fd8:	8d c0       	rjmp	.+282    	; 0x10f4 <GPIO_readPin+0x13a>
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <GPIO_readPin+0x28>
     fe0:	89 c0       	rjmp	.+274    	; 0x10f4 <GPIO_readPin+0x13a>
	{
		/* Return the value of the desired pin as required */
		switch (port_num)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	39 87       	std	Y+9, r19	; 0x09
     fea:	28 87       	std	Y+8, r18	; 0x08
     fec:	48 85       	ldd	r20, Y+8	; 0x08
     fee:	59 85       	ldd	r21, Y+9	; 0x09
     ff0:	41 30       	cpi	r20, 0x01	; 1
     ff2:	51 05       	cpc	r21, r1
     ff4:	89 f1       	breq	.+98     	; 0x1058 <GPIO_readPin+0x9e>
     ff6:	88 85       	ldd	r24, Y+8	; 0x08
     ff8:	99 85       	ldd	r25, Y+9	; 0x09
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	91 05       	cpc	r25, r1
     ffe:	34 f4       	brge	.+12     	; 0x100c <GPIO_readPin+0x52>
    1000:	28 85       	ldd	r18, Y+8	; 0x08
    1002:	39 85       	ldd	r19, Y+9	; 0x09
    1004:	21 15       	cp	r18, r1
    1006:	31 05       	cpc	r19, r1
    1008:	69 f0       	breq	.+26     	; 0x1024 <GPIO_readPin+0x6a>
    100a:	74 c0       	rjmp	.+232    	; 0x10f4 <GPIO_readPin+0x13a>
    100c:	48 85       	ldd	r20, Y+8	; 0x08
    100e:	59 85       	ldd	r21, Y+9	; 0x09
    1010:	42 30       	cpi	r20, 0x02	; 2
    1012:	51 05       	cpc	r21, r1
    1014:	d9 f1       	breq	.+118    	; 0x108c <GPIO_readPin+0xd2>
    1016:	88 85       	ldd	r24, Y+8	; 0x08
    1018:	99 85       	ldd	r25, Y+9	; 0x09
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <GPIO_readPin+0x68>
    1020:	4f c0       	rjmp	.+158    	; 0x10c0 <GPIO_readPin+0x106>
    1022:	68 c0       	rjmp	.+208    	; 0x10f4 <GPIO_readPin+0x13a>
		{
		case PORTA_ID:
			return (BIT_IS_SET(PINA, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1024:	e9 e3       	ldi	r30, 0x39	; 57
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_readPin+0x82>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_readPin+0x7e>
    1040:	ca 01       	movw	r24, r20
    1042:	81 70       	andi	r24, 0x01	; 1
    1044:	90 70       	andi	r25, 0x00	; 0
    1046:	88 23       	and	r24, r24
    1048:	19 f0       	breq	.+6      	; 0x1050 <GPIO_readPin+0x96>
    104a:	51 e0       	ldi	r21, 0x01	; 1
    104c:	5e 83       	std	Y+6, r21	; 0x06
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <GPIO_readPin+0x98>
    1050:	1e 82       	std	Y+6, r1	; 0x06
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	8f 83       	std	Y+7, r24	; 0x07
    1056:	4f c0       	rjmp	.+158    	; 0x10f6 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1058:	e6 e3       	ldi	r30, 0x36	; 54
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_readPin+0xb6>
    106c:	55 95       	asr	r21
    106e:	47 95       	ror	r20
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_readPin+0xb2>
    1074:	ca 01       	movw	r24, r20
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	88 23       	and	r24, r24
    107c:	19 f0       	breq	.+6      	; 0x1084 <GPIO_readPin+0xca>
    107e:	51 e0       	ldi	r21, 0x01	; 1
    1080:	5d 83       	std	Y+5, r21	; 0x05
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <GPIO_readPin+0xcc>
    1084:	1d 82       	std	Y+5, r1	; 0x05
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	8f 83       	std	Y+7, r24	; 0x07
    108a:	35 c0       	rjmp	.+106    	; 0x10f6 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    108c:	e3 e3       	ldi	r30, 0x33	; 51
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <GPIO_readPin+0xea>
    10a0:	55 95       	asr	r21
    10a2:	47 95       	ror	r20
    10a4:	8a 95       	dec	r24
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <GPIO_readPin+0xe6>
    10a8:	ca 01       	movw	r24, r20
    10aa:	81 70       	andi	r24, 0x01	; 1
    10ac:	90 70       	andi	r25, 0x00	; 0
    10ae:	88 23       	and	r24, r24
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <GPIO_readPin+0xfe>
    10b2:	51 e0       	ldi	r21, 0x01	; 1
    10b4:	5c 83       	std	Y+4, r21	; 0x04
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <GPIO_readPin+0x100>
    10b8:	1c 82       	std	Y+4, r1	; 0x04
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	1b c0       	rjmp	.+54     	; 0x10f6 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    10c0:	e0 e3       	ldi	r30, 0x30	; 48
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_readPin+0x11e>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_readPin+0x11a>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	90 70       	andi	r25, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	19 f0       	breq	.+6      	; 0x10ec <GPIO_readPin+0x132>
    10e6:	51 e0       	ldi	r21, 0x01	; 1
    10e8:	5b 83       	std	Y+3, r21	; 0x03
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <GPIO_readPin+0x134>
    10ec:	1b 82       	std	Y+3, r1	; 0x03
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	8f 83       	std	Y+7, r24	; 0x07
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <GPIO_readPin+0x13c>
			break;
		}
	}
	return LOGIC_LOW;
    10f4:	1f 82       	std	Y+7, r1	; 0x07
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    10f8:	29 96       	adiw	r28, 0x09	; 9
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <GPIO_setupPortDirection+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <GPIO_setupPortDirection+0x8>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	90 f5       	brcc	.+100    	; 0x1184 <GPIO_setupPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port_num)
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <GPIO_setupPortDirection+0x5e>
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	3c 81       	ldd	r19, Y+4	; 0x04
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <GPIO_setupPortDirection+0x3e>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <GPIO_setupPortDirection+0x54>
    1146:	1e c0       	rjmp	.+60     	; 0x1184 <GPIO_setupPortDirection+0x7a>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <GPIO_setupPortDirection+0x68>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <GPIO_setupPortDirection+0x72>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    115e:	ea e3       	ldi	r30, 0x3A	; 58
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	80 83       	st	Z, r24
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1172:	e4 e3       	ldi	r30, 0x34	; 52
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
			break;
		}
	}
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <GPIO_writePort+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <GPIO_writePort+0x8>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	90 f5       	brcc	.+100    	; 0x120c <GPIO_writePort+0x7a>
	{
		/* Setup the port value as required */
		switch(port_num)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3c 83       	std	Y+4, r19	; 0x04
    11b0:	2b 83       	std	Y+3, r18	; 0x03
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	d1 f0       	breq	.+52     	; 0x11f0 <GPIO_writePort+0x5e>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <GPIO_writePort+0x3e>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <GPIO_writePort+0x54>
    11ce:	1e c0       	rjmp	.+60     	; 0x120c <GPIO_writePort+0x7a>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	81 f0       	breq	.+32     	; 0x11fa <GPIO_writePort+0x68>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	81 f0       	breq	.+32     	; 0x1204 <GPIO_writePort+0x72>
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
    11ee:	0e c0       	rjmp	.+28     	; 0x120c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 83       	st	Z, r24
    1202:	04 c0       	rjmp	.+8      	; 0x120c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1204:	e2 e3       	ldi	r30, 0x32	; 50
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
			break;
		}
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <GPIO_readPort>:
/*
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <GPIO_readPort+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_readPort+0x8>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
	if(port_num < NUM_OF_PORTS)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	84 30       	cpi	r24, 0x04	; 4
    122c:	98 f5       	brcc	.+102    	; 0x1294 <GPIO_readPort+0x7a>
	{
		/* Return the value of the desired port as required */
		switch(port_num)
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3c 83       	std	Y+4, r19	; 0x04
    1236:	2b 83       	std	Y+3, r18	; 0x03
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	d1 f0       	breq	.+52     	; 0x1276 <GPIO_readPort+0x5c>
    1242:	2b 81       	ldd	r18, Y+3	; 0x03
    1244:	3c 81       	ldd	r19, Y+4	; 0x04
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	2c f4       	brge	.+10     	; 0x1256 <GPIO_readPort+0x3c>
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	61 f0       	breq	.+24     	; 0x126c <GPIO_readPort+0x52>
    1254:	1f c0       	rjmp	.+62     	; 0x1294 <GPIO_readPort+0x7a>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	81 f0       	breq	.+32     	; 0x1280 <GPIO_readPort+0x66>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	91 05       	cpc	r25, r1
    1268:	81 f0       	breq	.+32     	; 0x128a <GPIO_readPort+0x70>
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    126c:	e9 e3       	ldi	r30, 0x39	; 57
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	90 81       	ld	r25, Z
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	10 c0       	rjmp	.+32     	; 0x1296 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    1276:	e6 e3       	ldi	r30, 0x36	; 54
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	20 81       	ld	r18, Z
    127c:	2a 83       	std	Y+2, r18	; 0x02
    127e:	0b c0       	rjmp	.+22     	; 0x1296 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    1280:	e3 e3       	ldi	r30, 0x33	; 51
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	30 81       	ld	r19, Z
    1286:	3a 83       	std	Y+2, r19	; 0x02
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    128a:	e0 e3       	ldi	r30, 0x30	; 48
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    1294:	1a 82       	std	Y+2, r1	; 0x02
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <__vector_1>:

/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(INT0_vect)
{
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt0 != NULL_PTR)
    12d0:	80 91 06 01 	lds	r24, 0x0106
    12d4:	90 91 07 01 	lds	r25, 0x0107
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	29 f0       	breq	.+10     	; 0x12e6 <__vector_1+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    12dc:	e0 91 06 01 	lds	r30, 0x0106
    12e0:	f0 91 07 01 	lds	r31, 0x0107
    12e4:	09 95       	icall
		}
}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	ff 91       	pop	r31
    12ec:	ef 91       	pop	r30
    12ee:	bf 91       	pop	r27
    12f0:	af 91       	pop	r26
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	7f 91       	pop	r23
    12f8:	6f 91       	pop	r22
    12fa:	5f 91       	pop	r21
    12fc:	4f 91       	pop	r20
    12fe:	3f 91       	pop	r19
    1300:	2f 91       	pop	r18
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <__vector_2>:

ISR(INT1_vect)
{
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	2f 93       	push	r18
    1318:	3f 93       	push	r19
    131a:	4f 93       	push	r20
    131c:	5f 93       	push	r21
    131e:	6f 93       	push	r22
    1320:	7f 93       	push	r23
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25
    1326:	af 93       	push	r26
    1328:	bf 93       	push	r27
    132a:	ef 93       	push	r30
    132c:	ff 93       	push	r31
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt1 != NULL_PTR)
    1336:	80 91 08 01 	lds	r24, 0x0108
    133a:	90 91 09 01 	lds	r25, 0x0109
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	29 f0       	breq	.+10     	; 0x134c <__vector_2+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1342:	e0 91 08 01 	lds	r30, 0x0108
    1346:	f0 91 09 01 	lds	r31, 0x0109
    134a:	09 95       	icall
		}
}
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_3>:

ISR(INT2_vect)
{
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt2 != NULL_PTR)
    139c:	80 91 0a 01 	lds	r24, 0x010A
    13a0:	90 91 0b 01 	lds	r25, 0x010B
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	29 f0       	breq	.+10     	; 0x13b2 <__vector_3+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    13a8:	e0 91 0a 01 	lds	r30, 0x010A
    13ac:	f0 91 0b 01 	lds	r31, 0x010B
    13b0:	09 95       	icall
		}
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	ff 91       	pop	r31
    13b8:	ef 91       	pop	r30
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <INTERRUPT_enable>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void INTERRUPT_enable()
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);					/* Enable Global Interrupts */
    13e0:	af e5       	ldi	r26, 0x5F	; 95
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ef e5       	ldi	r30, 0x5F	; 95
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 68       	ori	r24, 0x80	; 128
    13ec:	8c 93       	st	X, r24
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <INTERRUPT_INT0_init>:
void INTERRUPT_INT0_init(void(*a_ptr)(void), InterruptSense sense)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <INTERRUPT_INT0_init+0x6>
    13fa:	0f 92       	push	r0
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	62 e0       	ldi	r22, 0x02	; 2
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GICR |= (1<<INT0);
    1410:	ab e5       	ldi	r26, 0x5B	; 91
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e5       	ldi	r30, 0x5B	; 91
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 64       	ori	r24, 0x40	; 64
    141c:	8c 93       	st	X, r24
	MCUCR &= 0xFC;
    141e:	a5 e5       	ldi	r26, 0x55	; 85
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e5       	ldi	r30, 0x55	; 85
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8c 7f       	andi	r24, 0xFC	; 252
    142a:	8c 93       	st	X, r24
	MCUCR |= (sense<<ISC00);
    142c:	a5 e5       	ldi	r26, 0x55	; 85
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e5 e5       	ldi	r30, 0x55	; 85
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	90 81       	ld	r25, Z
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	89 2b       	or	r24, r25
    143a:	8c 93       	st	X, r24
	g_callBackPtrInt0 = a_ptr;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	90 93 07 01 	sts	0x0107, r25
    1444:	80 93 06 01 	sts	0x0106, r24
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <INTERRUPT_INT1_init>:
void INTERRUPT_INT1_init(void(*a_ptr)(void), InterruptSense sense)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <INTERRUPT_INT1_init+0x6>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	63 e0       	ldi	r22, 0x03	; 3
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GICR |= (1<<INT1);
    1470:	ab e5       	ldi	r26, 0x5B	; 91
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e5       	ldi	r30, 0x5B	; 91
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	8c 93       	st	X, r24
	MCUCR &= 0xF3;
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	83 7f       	andi	r24, 0xF3	; 243
    148a:	8c 93       	st	X, r24
	MCUCR |= (sense<<ISC10);
    148c:	a5 e5       	ldi	r26, 0x55	; 85
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e5       	ldi	r30, 0x55	; 85
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	82 2b       	or	r24, r18
    14a8:	8c 93       	st	X, r24
	g_callBackPtrInt1 = a_ptr;
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	90 93 09 01 	sts	0x0109, r25
    14b2:	80 93 08 01 	sts	0x0108, r24
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <INTERRUPT_INT2_init>:
void INTERRUPT_INT2_init(void(*a_ptr)(void), InterruptSense sense)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <INTERRUPT_INT2_init+0x6>
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT);
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	62 e0       	ldi	r22, 0x02	; 2
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GICR |= (1<<INT2);
    14de:	ab e5       	ldi	r26, 0x5B	; 91
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	eb e5       	ldi	r30, 0x5B	; 91
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 62       	ori	r24, 0x20	; 32
    14ea:	8c 93       	st	X, r24
	sense &= ~(1<<1);
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	8d 7f       	andi	r24, 0xFD	; 253
    14f0:	8b 83       	std	Y+3, r24	; 0x03
	MCUCSR =(MCUCSR & ~(1<<ISC2))|(sense<<ISC2);
    14f2:	a4 e5       	ldi	r26, 0x54	; 84
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e4 e5       	ldi	r30, 0x54	; 84
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	2f 7b       	andi	r18, 0xBF	; 191
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	00 24       	eor	r0, r0
    1508:	96 95       	lsr	r25
    150a:	87 95       	ror	r24
    150c:	07 94       	ror	r0
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	07 94       	ror	r0
    1514:	98 2f       	mov	r25, r24
    1516:	80 2d       	mov	r24, r0
    1518:	82 2b       	or	r24, r18
    151a:	8c 93       	st	X, r24
	g_callBackPtrInt2 = a_ptr;
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	90 93 0b 01 	sts	0x010B, r25
    1524:	80 93 0a 01 	sts	0x010A, r24
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <INTERRUPT_disable>:
void INTERRUPT_disable()
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
	SREG &= ~(1<<7);					/* Disable Global Interrupts */
    153c:	af e5       	ldi	r26, 0x5F	; 95
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ef e5       	ldi	r30, 0x5F	; 95
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8f 77       	andi	r24, 0x7F	; 127
    1548:	8c 93       	st	X, r24
}
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <__vector_11>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOVF0 != NULL_PTR)
    157a:	80 91 0c 01 	lds	r24, 0x010C
    157e:	90 91 0d 01 	lds	r25, 0x010D
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	29 f0       	breq	.+10     	; 0x1590 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOVF0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1586:	e0 91 0c 01 	lds	r30, 0x010C
    158a:	f0 91 0d 01 	lds	r31, 0x010D
    158e:	09 95       	icall
	}
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <TIMER0_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER0_init(TIMER0_CLK clk)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = 0;
    15c2:	e3 e5       	ldi	r30, 0x53	; 83
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	10 82       	st	Z, r1
	TCCR0 |= (1<<FOC0);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 68       	ori	r24, 0x80	; 128
    15d4:	8c 93       	st	X, r24
	g_clock = clk;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	80 93 0e 01 	sts	0x010E, r24
	TCNT0 = 0;
    15dc:	e2 e5       	ldi	r30, 0x52	; 82
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	10 82       	st	Z, r1
}
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <TIMER0_on>:

void TIMER0_on()
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;
    15f2:	a3 e5       	ldi	r26, 0x53	; 83
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e3 e5       	ldi	r30, 0x53	; 83
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 7f       	andi	r24, 0xF8	; 248
    15fe:	8c 93       	st	X, r24
	TCCR0 |= (g_clock<<CS00);
    1600:	a3 e5       	ldi	r26, 0x53	; 83
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e3 e5       	ldi	r30, 0x53	; 83
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	90 81       	ld	r25, Z
    160a:	80 91 0e 01 	lds	r24, 0x010E
    160e:	89 2b       	or	r24, r25
    1610:	8c 93       	st	X, r24
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <TIMER0_off>:

void TIMER0_off()
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;
    1620:	a3 e5       	ldi	r26, 0x53	; 83
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e3 e5       	ldi	r30, 0x53	; 83
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 7f       	andi	r24, 0xF8	; 248
    162c:	8c 93       	st	X, r24
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <TIMER0_read>:

uint8 TIMER0_read()
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    163c:	e2 e5       	ldi	r30, 0x52	; 82
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <TIMER0_write>:

void TIMER0_write(uint8 time)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = time;
    1654:	e2 e5       	ldi	r30, 0x52	; 82
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	80 83       	st	Z, r24
}
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <TIMER0_interruptEnable>:

void TIMER0_interruptEnable()
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);
    166c:	a9 e5       	ldi	r26, 0x59	; 89
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e9 e5       	ldi	r30, 0x59	; 89
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	81 60       	ori	r24, 0x01	; 1
    1678:	8c 93       	st	X, r24
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <TIMER0_setCallback>:

void TIMER0_setCallback(void(*a_ptr)(void))
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <TIMER0_setCallback+0x6>
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrOVF0 = a_ptr;
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	90 93 0d 01 	sts	0x010D, r25
    1696:	80 93 0c 01 	sts	0x010C, r24
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <TIMER0_interruptDisable>:

void TIMER0_interruptDisable()
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE0);
    16ac:	a9 e5       	ldi	r26, 0x59	; 89
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e9 e5       	ldi	r30, 0x59	; 89
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8e 7f       	andi	r24, 0xFE	; 254
    16b8:	8c 93       	st	X, r24
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <__vector_5>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(TIMER2_OVF_vect)
{
    16c0:	1f 92       	push	r1
    16c2:	0f 92       	push	r0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOVF2 != NULL_PTR)
    16ea:	80 91 0f 01 	lds	r24, 0x010F
    16ee:	90 91 10 01 	lds	r25, 0x0110
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	29 f0       	breq	.+10     	; 0x1700 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOVF2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    16f6:	e0 91 0f 01 	lds	r30, 0x010F
    16fa:	f0 91 10 01 	lds	r31, 0x0110
    16fe:	09 95       	icall
	}
}
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	bf 91       	pop	r27
    170a:	af 91       	pop	r26
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	7f 91       	pop	r23
    1712:	6f 91       	pop	r22
    1714:	5f 91       	pop	r21
    1716:	4f 91       	pop	r20
    1718:	3f 91       	pop	r19
    171a:	2f 91       	pop	r18
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <TIMER2_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER2_init(TIMER2_CLK clk)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	0f 92       	push	r0
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 = 0;
    1732:	e5 e4       	ldi	r30, 0x45	; 69
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	10 82       	st	Z, r1
	TCCR2 |= (1<<FOC2);
    1738:	a5 e4       	ldi	r26, 0x45	; 69
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e5 e4       	ldi	r30, 0x45	; 69
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	8c 93       	st	X, r24
	g_clock = clk;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	80 93 11 01 	sts	0x0111, r24
	TCNT2 = 0;
    174c:	e4 e4       	ldi	r30, 0x44	; 68
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	10 82       	st	Z, r1
}
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <TIMER2_on>:

void TIMER2_on()
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0xF8;
    1762:	a5 e4       	ldi	r26, 0x45	; 69
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e5 e4       	ldi	r30, 0x45	; 69
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 7f       	andi	r24, 0xF8	; 248
    176e:	8c 93       	st	X, r24
	TCCR2 |= (g_clock<<CS20);
    1770:	a5 e4       	ldi	r26, 0x45	; 69
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e4       	ldi	r30, 0x45	; 69
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	90 81       	ld	r25, Z
    177a:	80 91 11 01 	lds	r24, 0x0111
    177e:	89 2b       	or	r24, r25
    1780:	8c 93       	st	X, r24
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <TIMER2_off>:

void TIMER2_off()
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0xF8;
    1790:	a5 e4       	ldi	r26, 0x45	; 69
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e5 e4       	ldi	r30, 0x45	; 69
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	88 7f       	andi	r24, 0xF8	; 248
    179c:	8c 93       	st	X, r24
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <TIMER2_read>:

uint8 TIMER2_read()
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    17ac:	e4 e4       	ldi	r30, 0x44	; 68
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
}
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <TIMER2_write>:

void TIMER2_write(uint8 time)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	0f 92       	push	r0
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = time;
    17c4:	e4 e4       	ldi	r30, 0x44	; 68
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	80 83       	st	Z, r24
}
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <TIMER2_interruptEnable>:

void TIMER2_interruptEnable()
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE2);
    17dc:	a9 e5       	ldi	r26, 0x59	; 89
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e9 e5       	ldi	r30, 0x59	; 89
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 64       	ori	r24, 0x40	; 64
    17e8:	8c 93       	st	X, r24
}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <TIMER2_setCallback>:

void TIMER2_setCallback(void(*a_ptr)(void))
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <TIMER2_setCallback+0x6>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrOVF2 = a_ptr;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	90 93 10 01 	sts	0x0110, r25
    1806:	80 93 0f 01 	sts	0x010F, r24
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <TIMER2_interruptDisable>:

void TIMER2_interruptDisable()
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE2);
    181c:	a9 e5       	ldi	r26, 0x59	; 89
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e9 e5       	ldi	r30, 0x59	; 89
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8f 7b       	andi	r24, 0xBF	; 191
    1828:	8c 93       	st	X, r24
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <__vector_14>:

/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_UDRE_vect)
{
    1830:	1f 92       	push	r1
    1832:	0f 92       	push	r0
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	0f 92       	push	r0
    1838:	11 24       	eor	r1, r1
    183a:	2f 93       	push	r18
    183c:	3f 93       	push	r19
    183e:	4f 93       	push	r20
    1840:	5f 93       	push	r21
    1842:	6f 93       	push	r22
    1844:	7f 93       	push	r23
    1846:	8f 93       	push	r24
    1848:	9f 93       	push	r25
    184a:	af 93       	push	r26
    184c:	bf 93       	push	r27
    184e:	ef 93       	push	r30
    1850:	ff 93       	push	r31
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrUDR != NULL_PTR)
    185a:	80 91 12 01 	lds	r24, 0x0112
    185e:	90 91 13 01 	lds	r25, 0x0113
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	29 f0       	breq	.+10     	; 0x1870 <__vector_14+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrUDR)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1866:	e0 91 12 01 	lds	r30, 0x0112
    186a:	f0 91 13 01 	lds	r31, 0x0113
    186e:	09 95       	icall
		}
}
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	ff 91       	pop	r31
    1876:	ef 91       	pop	r30
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	7f 91       	pop	r23
    1882:	6f 91       	pop	r22
    1884:	5f 91       	pop	r21
    1886:	4f 91       	pop	r20
    1888:	3f 91       	pop	r19
    188a:	2f 91       	pop	r18
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <__vector_15>:

ISR(USART_TXC_vect)
{
    1896:	1f 92       	push	r1
    1898:	0f 92       	push	r0
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	0f 92       	push	r0
    189e:	11 24       	eor	r1, r1
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	ef 93       	push	r30
    18b6:	ff 93       	push	r31
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTX != NULL_PTR)
    18c0:	80 91 14 01 	lds	r24, 0x0114
    18c4:	90 91 15 01 	lds	r25, 0x0115
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	29 f0       	breq	.+10     	; 0x18d6 <__vector_15+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrTX)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    18cc:	e0 91 14 01 	lds	r30, 0x0114
    18d0:	f0 91 15 01 	lds	r31, 0x0115
    18d4:	09 95       	icall
		}
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	ff 91       	pop	r31
    18dc:	ef 91       	pop	r30
    18de:	bf 91       	pop	r27
    18e0:	af 91       	pop	r26
    18e2:	9f 91       	pop	r25
    18e4:	8f 91       	pop	r24
    18e6:	7f 91       	pop	r23
    18e8:	6f 91       	pop	r22
    18ea:	5f 91       	pop	r21
    18ec:	4f 91       	pop	r20
    18ee:	3f 91       	pop	r19
    18f0:	2f 91       	pop	r18
    18f2:	0f 90       	pop	r0
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	0f 90       	pop	r0
    18f8:	1f 90       	pop	r1
    18fa:	18 95       	reti

000018fc <__vector_13>:

ISR(USART_RXC_vect)
{
    18fc:	1f 92       	push	r1
    18fe:	0f 92       	push	r0
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	0f 92       	push	r0
    1904:	11 24       	eor	r1, r1
    1906:	2f 93       	push	r18
    1908:	3f 93       	push	r19
    190a:	4f 93       	push	r20
    190c:	5f 93       	push	r21
    190e:	6f 93       	push	r22
    1910:	7f 93       	push	r23
    1912:	8f 93       	push	r24
    1914:	9f 93       	push	r25
    1916:	af 93       	push	r26
    1918:	bf 93       	push	r27
    191a:	ef 93       	push	r30
    191c:	ff 93       	push	r31
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrRX != NULL_PTR)
    1926:	80 91 16 01 	lds	r24, 0x0116
    192a:	90 91 17 01 	lds	r25, 0x0117
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	29 f0       	breq	.+10     	; 0x193c <__vector_13+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrRX)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1932:	e0 91 16 01 	lds	r30, 0x0116
    1936:	f0 91 17 01 	lds	r31, 0x0117
    193a:	09 95       	icall
		}
}
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	bf 91       	pop	r27
    1946:	af 91       	pop	r26
    1948:	9f 91       	pop	r25
    194a:	8f 91       	pop	r24
    194c:	7f 91       	pop	r23
    194e:	6f 91       	pop	r22
    1950:	5f 91       	pop	r21
    1952:	4f 91       	pop	r20
    1954:	3f 91       	pop	r19
    1956:	2f 91       	pop	r18
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_Ptr)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <UART_init+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <UART_init+0x8>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	9c 83       	std	Y+4, r25	; 0x04
    1970:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1972:	1a 82       	std	Y+2, r1	; 0x02
    1974:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1976:	eb e2       	ldi	r30, 0x2B	; 43
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used as we are not using 9-bit mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    197e:	ea e2       	ldi	r30, 0x2A	; 42
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	88 e1       	ldi	r24, 0x18	; 24
    1984:	80 83       	st	Z, r24
	 * UPM1:0  = configure parity as desired
	 * USBS    = configure stop bits as desired
	 * UCSZ1:0 = configure bit data as desired
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    1986:	e0 e4       	ldi	r30, 0x40	; 64
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 e8       	ldi	r24, 0x80	; 128
    198c:	80 83       	st	Z, r24
	UCSRC = (UCSRC&0xCF)|((config_Ptr->parity)<<UPM0);
    198e:	a0 e4       	ldi	r26, 0x40	; 64
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e0 e4       	ldi	r30, 0x40	; 64
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	28 2f       	mov	r18, r24
    199a:	2f 7c       	andi	r18, 0xCF	; 207
    199c:	eb 81       	ldd	r30, Y+3	; 0x03
    199e:	fc 81       	ldd	r31, Y+4	; 0x04
    19a0:	81 81       	ldd	r24, Z+1	; 0x01
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	82 95       	swap	r24
    19a8:	92 95       	swap	r25
    19aa:	90 7f       	andi	r25, 0xF0	; 240
    19ac:	98 27       	eor	r25, r24
    19ae:	80 7f       	andi	r24, 0xF0	; 240
    19b0:	98 27       	eor	r25, r24
    19b2:	82 2b       	or	r24, r18
    19b4:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF7)|((config_Ptr->stop_bit)<<USBS);
    19b6:	a0 e4       	ldi	r26, 0x40	; 64
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e0 e4       	ldi	r30, 0x40	; 64
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	28 2f       	mov	r18, r24
    19c2:	27 7f       	andi	r18, 0xF7	; 247
    19c4:	eb 81       	ldd	r30, Y+3	; 0x03
    19c6:	fc 81       	ldd	r31, Y+4	; 0x04
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	82 2b       	or	r24, r18
    19dc:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF9)|((config_Ptr->bit_data)<<UCSZ0);
    19de:	a0 e4       	ldi	r26, 0x40	; 64
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e0 e4       	ldi	r30, 0x40	; 64
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	28 2f       	mov	r18, r24
    19ea:	29 7f       	andi	r18, 0xF9	; 249
    19ec:	eb 81       	ldd	r30, Y+3	; 0x03
    19ee:	fc 81       	ldd	r31, Y+4	; 0x04
    19f0:	80 81       	ld	r24, Z
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	82 2b       	or	r24, r18
    19fc:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config_Ptr->baud_rate * 8UL))) - 1);
    19fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1a00:	fc 81       	ldd	r31, Y+4	; 0x04
    1a02:	83 81       	ldd	r24, Z+3	; 0x03
    1a04:	94 81       	ldd	r25, Z+4	; 0x04
    1a06:	a5 81       	ldd	r26, Z+5	; 0x05
    1a08:	b6 81       	ldd	r27, Z+6	; 0x06
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	bb 1f       	adc	r27, r27
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	aa 1f       	adc	r26, r26
    1a18:	bb 1f       	adc	r27, r27
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	aa 1f       	adc	r26, r26
    1a20:	bb 1f       	adc	r27, r27
    1a22:	9c 01       	movw	r18, r24
    1a24:	ad 01       	movw	r20, r26
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	92 e1       	ldi	r25, 0x12	; 18
    1a2a:	aa e7       	ldi	r26, 0x7A	; 122
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 a2 20 	call	0x4144	; 0x4144 <__udivmodsi4>
    1a36:	da 01       	movw	r26, r20
    1a38:	c9 01       	movw	r24, r18
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1a40:	e0 e4       	ldi	r30, 0x40	; 64
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	89 2f       	mov	r24, r25
    1a4a:	99 27       	eor	r25, r25
    1a4c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1a4e:	e9 e2       	ldi	r30, 0x29	; 41
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	80 83       	st	Z, r24
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	0f 92       	push	r0
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1a70:	eb e2       	ldi	r30, 0x2B	; 43
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	88 2f       	mov	r24, r24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	80 72       	andi	r24, 0x20	; 32
    1a7c:	90 70       	andi	r25, 0x00	; 0
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	b9 f3       	breq	.-18     	; 0x1a70 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1a82:	ec e2       	ldi	r30, 0x2C	; 44
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)); // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1a9a:	eb e2       	ldi	r30, 0x2B	; 43
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	88 23       	and	r24, r24
    1aa2:	dc f7       	brge	.-10     	; 0x1a9a <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1aa4:	ec e2       	ldi	r30, 0x2C	; 44
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
}
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <UART_sendString+0x6>
    1ab6:	0f 92       	push	r0
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	9b 83       	std	Y+3, r25	; 0x03
    1abe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ac0:	19 82       	std	Y+1, r1	; 0x01
    1ac2:	0e c0       	rjmp	.+28     	; 0x1ae0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	fc 01       	movw	r30, r24
    1ad0:	e2 0f       	add	r30, r18
    1ad2:	f3 1f       	adc	r31, r19
    1ad4:	80 81       	ld	r24, Z
    1ad6:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <UART_sendByte>
		i++;
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	8f 5f       	subi	r24, 0xFF	; 255
    1ade:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	fc 01       	movw	r30, r24
    1aec:	e2 0f       	add	r30, r18
    1aee:	f3 1f       	adc	r31, r19
    1af0:	80 81       	ld	r24, Z
    1af2:	88 23       	and	r24, r24
    1af4:	39 f7       	brne	.-50     	; 0x1ac4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <UART_receiveString+0xa>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	9b 83       	std	Y+3, r25	; 0x03
    1b14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b16:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	9b 81       	ldd	r25, Y+3	; 0x03
    1b22:	8c 01       	movw	r16, r24
    1b24:	02 0f       	add	r16, r18
    1b26:	13 1f       	adc	r17, r19
    1b28:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <UART_receiveByte>
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	80 83       	st	Z, r24
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	8f 5f       	subi	r24, 0xFF	; 255
    1b36:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	9b 81       	ldd	r25, Y+3	; 0x03
    1b42:	8c 01       	movw	r16, r24
    1b44:	02 0f       	add	r16, r18
    1b46:	13 1f       	adc	r17, r19
    1b48:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <UART_receiveByte>
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	e2 0f       	add	r30, r18
    1b5e:	f3 1f       	adc	r31, r19
    1b60:	80 81       	ld	r24, Z
    1b62:	83 32       	cpi	r24, 0x23	; 35
    1b64:	31 f7       	brne	.-52     	; 0x1b32 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b70:	fc 01       	movw	r30, r24
    1b72:	e2 0f       	add	r30, r18
    1b74:	f3 1f       	adc	r31, r19
    1b76:	10 82       	st	Z, r1
}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <UART_sendData>:

void UART_sendData(const uint8 *pData, uint32 uSize)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	2a 97       	sbiw	r28, 0x0a	; 10
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	4f 83       	std	Y+7, r20	; 0x07
    1ba2:	58 87       	std	Y+8, r21	; 0x08
    1ba4:	69 87       	std	Y+9, r22	; 0x09
    1ba6:	7a 87       	std	Y+10, r23	; 0x0a
    uint32 uCounter;
    for(uCounter = 0; uCounter < uSize; uCounter++)
    1ba8:	19 82       	std	Y+1, r1	; 0x01
    1baa:	1a 82       	std	Y+2, r1	; 0x02
    1bac:	1b 82       	std	Y+3, r1	; 0x03
    1bae:	1c 82       	std	Y+4, r1	; 0x04
    1bb0:	15 c0       	rjmp	.+42     	; 0x1bdc <UART_sendData+0x54>
    {
        UART_sendByte(pData[uCounter]);
    1bb2:	29 81       	ldd	r18, Y+1	; 0x01
    1bb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	fc 01       	movw	r30, r24
    1bbc:	e2 0f       	add	r30, r18
    1bbe:	f3 1f       	adc	r31, r19
    1bc0:	80 81       	ld	r24, Z
    1bc2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <UART_sendByte>
}

void UART_sendData(const uint8 *pData, uint32 uSize)
{
    uint32 uCounter;
    for(uCounter = 0; uCounter < uSize; uCounter++)
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	ab 81       	ldd	r26, Y+3	; 0x03
    1bcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	a1 1d       	adc	r26, r1
    1bd2:	b1 1d       	adc	r27, r1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	ab 83       	std	Y+3, r26	; 0x03
    1bda:	bc 83       	std	Y+4, r27	; 0x04
    1bdc:	29 81       	ldd	r18, Y+1	; 0x01
    1bde:	3a 81       	ldd	r19, Y+2	; 0x02
    1be0:	4b 81       	ldd	r20, Y+3	; 0x03
    1be2:	5c 81       	ldd	r21, Y+4	; 0x04
    1be4:	8f 81       	ldd	r24, Y+7	; 0x07
    1be6:	98 85       	ldd	r25, Y+8	; 0x08
    1be8:	a9 85       	ldd	r26, Y+9	; 0x09
    1bea:	ba 85       	ldd	r27, Y+10	; 0x0a
    1bec:	28 17       	cp	r18, r24
    1bee:	39 07       	cpc	r19, r25
    1bf0:	4a 07       	cpc	r20, r26
    1bf2:	5b 07       	cpc	r21, r27
    1bf4:	f0 f2       	brcs	.-68     	; 0x1bb2 <UART_sendData+0x2a>
    {
        UART_sendByte(pData[uCounter]);
    }
}
    1bf6:	2a 96       	adiw	r28, 0x0a	; 10
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <UART_receiveData>:

void UART_receiveData(uint8 *pData, uint32 uSize)
{
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	2a 97       	sbiw	r28, 0x0a	; 10
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	4f 83       	std	Y+7, r20	; 0x07
    1c26:	58 87       	std	Y+8, r21	; 0x08
    1c28:	69 87       	std	Y+9, r22	; 0x09
    1c2a:	7a 87       	std	Y+10, r23	; 0x0a
    uint32 uCounter;
    for(uCounter = 0; uCounter < uSize; uCounter++)
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	1a 82       	std	Y+2, r1	; 0x02
    1c30:	1b 82       	std	Y+3, r1	; 0x03
    1c32:	1c 82       	std	Y+4, r1	; 0x04
    1c34:	16 c0       	rjmp	.+44     	; 0x1c62 <UART_receiveData+0x5a>
    {
        pData[uCounter] = UART_receiveByte();
    1c36:	29 81       	ldd	r18, Y+1	; 0x01
    1c38:	3a 81       	ldd	r19, Y+2	; 0x02
    1c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3e:	8c 01       	movw	r16, r24
    1c40:	02 0f       	add	r16, r18
    1c42:	13 1f       	adc	r17, r19
    1c44:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <UART_receiveByte>
    1c48:	f8 01       	movw	r30, r16
    1c4a:	80 83       	st	Z, r24
}

void UART_receiveData(uint8 *pData, uint32 uSize)
{
    uint32 uCounter;
    for(uCounter = 0; uCounter < uSize; uCounter++)
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	ab 81       	ldd	r26, Y+3	; 0x03
    1c52:	bc 81       	ldd	r27, Y+4	; 0x04
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	a1 1d       	adc	r26, r1
    1c58:	b1 1d       	adc	r27, r1
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	ab 83       	std	Y+3, r26	; 0x03
    1c60:	bc 83       	std	Y+4, r27	; 0x04
    1c62:	29 81       	ldd	r18, Y+1	; 0x01
    1c64:	3a 81       	ldd	r19, Y+2	; 0x02
    1c66:	4b 81       	ldd	r20, Y+3	; 0x03
    1c68:	5c 81       	ldd	r21, Y+4	; 0x04
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	98 85       	ldd	r25, Y+8	; 0x08
    1c6e:	a9 85       	ldd	r26, Y+9	; 0x09
    1c70:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c72:	28 17       	cp	r18, r24
    1c74:	39 07       	cpc	r19, r25
    1c76:	4a 07       	cpc	r20, r26
    1c78:	5b 07       	cpc	r21, r27
    1c7a:	e8 f2       	brcs	.-70     	; 0x1c36 <UART_receiveData+0x2e>
    {
        pData[uCounter] = UART_receiveByte();
    }
}
    1c7c:	2a 96       	adiw	r28, 0x0a	; 10
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	1f 91       	pop	r17
    1c8e:	0f 91       	pop	r16
    1c90:	08 95       	ret

00001c92 <UART_interruptEnable>:

void UART_interruptEnable(IntEn intType)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	UCSRB &= 0x1F;
    1c9e:	aa e2       	ldi	r26, 0x2A	; 42
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ea e2       	ldi	r30, 0x2A	; 42
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 71       	andi	r24, 0x1F	; 31
    1caa:	8c 93       	st	X, r24
	UCSRB |= (intType << UDRIE);
    1cac:	aa e2       	ldi	r26, 0x2A	; 42
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	ea e2       	ldi	r30, 0x2A	; 42
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	82 95       	swap	r24
    1cc4:	92 95       	swap	r25
    1cc6:	90 7f       	andi	r25, 0xF0	; 240
    1cc8:	98 27       	eor	r25, r24
    1cca:	80 7f       	andi	r24, 0xF0	; 240
    1ccc:	98 27       	eor	r25, r24
    1cce:	82 2b       	or	r24, r18
    1cd0:	8c 93       	st	X, r24
}
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <UART_setCallBackUDR>:

void UART_setCallBackUDR(void(*a_ptr)(void))
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <UART_setCallBackUDR+0x6>
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrUDR = a_ptr;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	90 93 13 01 	sts	0x0113, r25
    1cf0:	80 93 12 01 	sts	0x0112, r24
}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <UART_setCallBackTX>:

void UART_setCallBackTX(void(*a_ptr)(void))
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <UART_setCallBackTX+0x6>
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTX = a_ptr;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	90 93 15 01 	sts	0x0115, r25
    1d14:	80 93 14 01 	sts	0x0114, r24
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <UART_setCallBackRX>:

void UART_setCallBackRX(void(*a_ptr)(void))
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <UART_setCallBackRX+0x6>
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrRX = a_ptr;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	90 93 17 01 	sts	0x0117, r25
    1d38:	80 93 16 01 	sts	0x0116, r24
}
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <FLAME_init>:

#include "flame_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void FLAME_init()
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(FLAME_PORTID, FLAME_PINID, PIN_INPUT);
    1d4e:	83 e0       	ldi	r24, 0x03	; 3
    1d50:	62 e0       	ldi	r22, 0x02	; 2
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <FLAME_read>:
uint8 FLAME_read()
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(FLAME_PORTID, FLAME_PINID);
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	62 e0       	ldi	r22, 0x02	; 2
    1d6a:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <MQ9_init>:

#include "mq9_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void MQ9_init()
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MQ9_PORTID, MQ9_PINID, PIN_INPUT);
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	63 e0       	ldi	r22, 0x03	; 3
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <MQ9_read>:
uint8 MQ9_read()
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(MQ9_PORTID, MQ9_PINID);
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	63 e0       	ldi	r22, 0x03	; 3
    1d98:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <PIR_init>:

#include "pir_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void PIR_init()
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORTID, PIR_PINID, PIN_INPUT);
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	63 e0       	ldi	r22, 0x03	; 3
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <PIR_read>:
uint8 PIR_read()
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORTID, PIR_PINID);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	63 e0       	ldi	r22, 0x03	; 3
    1dc6:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <WATER_init>:

#include "water_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void WATER_init()
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(WATER_PORTID, WATER_PINID, PIN_INPUT);
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	62 e0       	ldi	r22, 0x02	; 2
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <WATER_read>:
uint8 WATER_read()
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(WATER_PORTID, WATER_PINID);
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	62 e0       	ldi	r22, 0x02	; 2
    1df4:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <BUZZER_init>:
#include "buzzer.h"

#include "../../mcal/atmega32_gpio.h"

void BUZZER_init(Buzzer* buzzer)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <BUZZER_init+0x6>
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	9a 83       	std	Y+2, r25	; 0x02
    1e0a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(buzzer->portID, buzzer->pinID, PIN_OUTPUT);
    1e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e10:	80 81       	ld	r24, Z
    1e12:	e9 81       	ldd	r30, Y+1	; 0x01
    1e14:	fa 81       	ldd	r31, Y+2	; 0x02
    1e16:	91 81       	ldd	r25, Z+1	; 0x01
    1e18:	69 2f       	mov	r22, r25
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <BUZZER_on>:
void BUZZER_on(Buzzer* buzzer)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <BUZZER_on+0x6>
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(buzzer->portID, buzzer->pinID, LOGIC_HIGH);
    1e38:	e9 81       	ldd	r30, Y+1	; 0x01
    1e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3c:	80 81       	ld	r24, Z
    1e3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e40:	fa 81       	ldd	r31, Y+2	; 0x02
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	69 2f       	mov	r22, r25
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <BUZZER_off>:
void BUZZER_off(Buzzer* buzzer)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <BUZZER_off+0x6>
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(buzzer->portID, buzzer->pinID, LOGIC_LOW);
    1e64:	e9 81       	ldd	r30, Y+1	; 0x01
    1e66:	fa 81       	ldd	r31, Y+2	; 0x02
    1e68:	80 81       	ld	r24, Z
    1e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	69 2f       	mov	r22, r25
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <DCMOTOR_init>:
#include "dc_motor.h"

#include "../../mcal/atmega32_gpio.h"

void DCMOTOR_init(DCMotor* motor)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <DCMOTOR_init+0x6>
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(motor->portID, motor->pinID, PIN_OUTPUT);
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	80 81       	ld	r24, Z
    1e96:	e9 81       	ldd	r30, Y+1	; 0x01
    1e98:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	69 2f       	mov	r22, r25
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <DCMOTOR_on>:
void DCMOTOR_on(DCMotor* motor)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <DCMOTOR_on+0x6>
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(motor->portID, motor->pinID, LOGIC_HIGH);
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	80 81       	ld	r24, Z
    1ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	69 2f       	mov	r22, r25
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <DCMOTOR_off>:
void DCMOTOR_off(DCMotor* motor)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <DCMOTOR_off+0x6>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(motor->portID, motor->pinID, LOGIC_LOW);
    1ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eea:	fa 81       	ldd	r31, Y+2	; 0x02
    1eec:	80 81       	ld	r24, Z
    1eee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	69 2f       	mov	r22, r25
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <KEYPAD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KEYPAD_init(void)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	61 e0       	ldi	r22, 0x01	; 1
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    1f22:	82 e0       	ldi	r24, 0x02	; 2
    1f24:	62 e0       	ldi	r22, 0x02	; 2
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	63 e0       	ldi	r22, 0x03	; 3
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	64 e0       	ldi	r22, 0x04	; 4
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	65 e0       	ldi	r22, 0x05	; 5
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	66 e0       	ldi	r22, 0x06	; 6
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
}
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <KEYPAD_getPressedKey>:

uint8 KEYPAD_getPressedKey(void)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	61 97       	sbiw	r28, 0x11	; 17
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f6e:	1f 86       	std	Y+15, r1	; 0x0f
    1f70:	a0 c0       	rjmp	.+320    	; 0x20b2 <KEYPAD_getPressedKey+0x158>
	{
		/* Set/Clear the row output pin */
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
		for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1f7c:	18 8a       	std	Y+16, r1	; 0x10
    1f7e:	1c c0       	rjmp	.+56     	; 0x1fb8 <KEYPAD_getPressedKey+0x5e>
		{
			/* Check if the switch is pressed in this column */
			if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1f80:	88 89       	ldd	r24, Y+16	; 0x10
    1f82:	98 2f       	mov	r25, r24
    1f84:	9c 5f       	subi	r25, 0xFC	; 252
    1f86:	82 e0       	ldi	r24, 0x02	; 2
    1f88:	69 2f       	mov	r22, r25
    1f8a:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
    1f8e:	81 30       	cpi	r24, 0x01	; 1
    1f90:	81 f4       	brne	.+32     	; 0x1fb2 <KEYPAD_getPressedKey+0x58>
			{
#if (KEYPAD_NUM_COLS == 3)
#ifdef STANDARD_KEYPAD
				return ((row*KEYPAD_NUM_COLS)+col+1);
#else
				return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	c9 01       	movw	r24, r18
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	82 0f       	add	r24, r18
    1fa0:	93 1f       	adc	r25, r19
    1fa2:	98 2f       	mov	r25, r24
    1fa4:	88 89       	ldd	r24, Y+16	; 0x10
    1fa6:	89 0f       	add	r24, r25
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	0e 94 69 10 	call	0x20d2	; 0x20d2 <KEYPAD_4x3_adjustKeyNumber>
    1fae:	89 8b       	std	Y+17, r24	; 0x11
    1fb0:	86 c0       	rjmp	.+268    	; 0x20be <KEYPAD_getPressedKey+0x164>
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
	{
		/* Set/Clear the row output pin */
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
		for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1fb2:	88 89       	ldd	r24, Y+16	; 0x10
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	88 8b       	std	Y+16, r24	; 0x10
    1fb8:	88 89       	ldd	r24, Y+16	; 0x10
    1fba:	83 30       	cpi	r24, 0x03	; 3
    1fbc:	08 f3       	brcs	.-62     	; 0x1f80 <KEYPAD_getPressedKey+0x26>
#endif
			}
		}
		//		_delay_ms(5000);
		//		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	a0 e2       	ldi	r26, 0x20	; 32
    1fce:	b1 e4       	ldi	r27, 0x41	; 65
    1fd0:	8b 87       	std	Y+11, r24	; 0x0b
    1fd2:	9c 87       	std	Y+12, r25	; 0x0c
    1fd4:	ad 87       	std	Y+13, r26	; 0x0d
    1fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	4a ef       	ldi	r20, 0xFA	; 250
    1fe6:	54 e4       	ldi	r21, 0x44	; 68
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	8f 83       	std	Y+7, r24	; 0x07
    1ff2:	98 87       	std	Y+8, r25	; 0x08
    1ff4:	a9 87       	std	Y+9, r26	; 0x09
    1ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffa:	78 85       	ldd	r23, Y+8	; 0x08
    1ffc:	89 85       	ldd	r24, Y+9	; 0x09
    1ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200c:	88 23       	and	r24, r24
    200e:	2c f4       	brge	.+10     	; 0x201a <KEYPAD_getPressedKey+0xc0>
		__ticks = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <KEYPAD_getPressedKey+0x13e>
	else if (__tmp > 65535)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	57 e4       	ldi	r21, 0x47	; 71
    202a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	4c f5       	brge	.+82     	; 0x2084 <KEYPAD_getPressedKey+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2032:	6b 85       	ldd	r22, Y+11	; 0x0b
    2034:	7c 85       	ldd	r23, Y+12	; 0x0c
    2036:	8d 85       	ldd	r24, Y+13	; 0x0d
    2038:	9e 85       	ldd	r25, Y+14	; 0x0e
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	0f c0       	rjmp	.+30     	; 0x207a <KEYPAD_getPressedKey+0x120>
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <KEYPAD_getPressedKey+0x10e>
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <KEYPAD_getPressedKey+0x102>
    2082:	14 c0       	rjmp	.+40     	; 0x20ac <KEYPAD_getPressedKey+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <KEYPAD_getPressedKey+0x14a>
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
}

uint8 KEYPAD_getPressedKey(void)
{
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    20ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	8f 87       	std	Y+15, r24	; 0x0f
    20b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b4:	84 30       	cpi	r24, 0x04	; 4
    20b6:	08 f4       	brcc	.+2      	; 0x20ba <KEYPAD_getPressedKey+0x160>
    20b8:	5c cf       	rjmp	.-328    	; 0x1f72 <KEYPAD_getPressedKey+0x18>
		//		_delay_ms(5000);
		//		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
	}
	return KEYPAD_NO_PRESS;
    20ba:	80 e2       	ldi	r24, 0x20	; 32
    20bc:	89 8b       	std	Y+17, r24	; 0x11
    20be:	89 89       	ldd	r24, Y+17	; 0x11
}
    20c0:	61 96       	adiw	r28, 0x11	; 17
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <KEYPAD_4x3_adjustKeyNumber+0x6>
    20d8:	00 d0       	rcall	.+0      	; 0x20da <KEYPAD_4x3_adjustKeyNumber+0x8>
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20e0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	3c 83       	std	Y+4, r19	; 0x04
    20ea:	2b 83       	std	Y+3, r18	; 0x03
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	8a 30       	cpi	r24, 0x0A	; 10
    20f2:	91 05       	cpc	r25, r1
    20f4:	81 f0       	breq	.+32     	; 0x2116 <KEYPAD_4x3_adjustKeyNumber+0x44>
    20f6:	2b 81       	ldd	r18, Y+3	; 0x03
    20f8:	3c 81       	ldd	r19, Y+4	; 0x04
    20fa:	2a 30       	cpi	r18, 0x0A	; 10
    20fc:	31 05       	cpc	r19, r1
    20fe:	9c f0       	brlt	.+38     	; 0x2126 <KEYPAD_4x3_adjustKeyNumber+0x54>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	8b 30       	cpi	r24, 0x0B	; 11
    2106:	91 05       	cpc	r25, r1
    2108:	49 f0       	breq	.+18     	; 0x211c <KEYPAD_4x3_adjustKeyNumber+0x4a>
    210a:	2b 81       	ldd	r18, Y+3	; 0x03
    210c:	3c 81       	ldd	r19, Y+4	; 0x04
    210e:	2c 30       	cpi	r18, 0x0C	; 12
    2110:	31 05       	cpc	r19, r1
    2112:	31 f0       	breq	.+12     	; 0x2120 <KEYPAD_4x3_adjustKeyNumber+0x4e>
    2114:	08 c0       	rjmp	.+16     	; 0x2126 <KEYPAD_4x3_adjustKeyNumber+0x54>
	{
	case 10: keypad_button = '*'; // ASCII Code of *
    2116:	8a e2       	ldi	r24, 0x2A	; 42
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	07 c0       	rjmp	.+14     	; 0x212a <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	case 11: keypad_button = 0;
    211c:	19 82       	std	Y+1, r1	; 0x01
    211e:	05 c0       	rjmp	.+10     	; 0x212a <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	case 12: keypad_button = '#'; // ASCII Code of #
    2120:	83 e2       	ldi	r24, 0x23	; 35
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	02 c0       	rjmp	.+4      	; 0x212a <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	default: keypad_button = button_number;
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    212a:	89 81       	ldd	r24, Y+1	; 0x01
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	2e 97       	sbiw	r28, 0x0e	; 14
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 ea       	ldi	r26, 0xA0	; 160
    2168:	b1 e4       	ldi	r27, 0x41	; 65
    216a:	8b 87       	std	Y+11, r24	; 0x0b
    216c:	9c 87       	std	Y+12, r25	; 0x0c
    216e:	ad 87       	std	Y+13, r26	; 0x0d
    2170:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2172:	6b 85       	ldd	r22, Y+11	; 0x0b
    2174:	7c 85       	ldd	r23, Y+12	; 0x0c
    2176:	8d 85       	ldd	r24, Y+13	; 0x0d
    2178:	9e 85       	ldd	r25, Y+14	; 0x0e
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a ef       	ldi	r20, 0xFA	; 250
    2180:	54 e4       	ldi	r21, 0x44	; 68
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8f 83       	std	Y+7, r24	; 0x07
    218c:	98 87       	std	Y+8, r25	; 0x08
    218e:	a9 87       	std	Y+9, r26	; 0x09
    2190:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2192:	6f 81       	ldd	r22, Y+7	; 0x07
    2194:	78 85       	ldd	r23, Y+8	; 0x08
    2196:	89 85       	ldd	r24, Y+9	; 0x09
    2198:	9a 85       	ldd	r25, Y+10	; 0x0a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	2c f4       	brge	.+10     	; 0x21b4 <LCD_init+0x7a>
		__ticks = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9e 83       	std	Y+6, r25	; 0x06
    21b0:	8d 83       	std	Y+5, r24	; 0x05
    21b2:	3f c0       	rjmp	.+126    	; 0x2232 <LCD_init+0xf8>
	else if (__tmp > 65535)
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	3f ef       	ldi	r19, 0xFF	; 255
    21c0:	4f e7       	ldi	r20, 0x7F	; 127
    21c2:	57 e4       	ldi	r21, 0x47	; 71
    21c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c8:	18 16       	cp	r1, r24
    21ca:	4c f5       	brge	.+82     	; 0x221e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e2       	ldi	r20, 0x20	; 32
    21da:	51 e4       	ldi	r21, 0x41	; 65
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	bc 01       	movw	r22, r24
    21e6:	cd 01       	movw	r24, r26
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9e 83       	std	Y+6, r25	; 0x06
    21f2:	8d 83       	std	Y+5, r24	; 0x05
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <LCD_init+0xda>
    21f6:	88 ec       	ldi	r24, 0xC8	; 200
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	f1 f7       	brne	.-4      	; 0x2202 <LCD_init+0xc8>
    2206:	9c 83       	std	Y+4, r25	; 0x04
    2208:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	69 f7       	brne	.-38     	; 0x21f6 <LCD_init+0xbc>
    221c:	14 c0       	rjmp	.+40     	; 0x2246 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	8d 81       	ldd	r24, Y+5	; 0x05
    2234:	9e 81       	ldd	r25, Y+6	; 0x06
    2236:	9a 83       	std	Y+2, r25	; 0x02
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_init+0x104>
    2242:	9a 83       	std	Y+2, r25	; 0x02
    2244:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	62 e0       	ldi	r22, 0x02	; 2
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	63 e0       	ldi	r22, 0x03	; 3
    2254:	41 e0       	ldi	r20, 0x01	; 1
    2256:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	64 e0       	ldi	r22, 0x04	; 4
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	65 e0       	ldi	r22, 0x05	; 5
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    226e:	83 e3       	ldi	r24, 0x33	; 51
    2270:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2274:	82 e3       	ldi	r24, 0x32	; 50
    2276:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    227a:	88 e2       	ldi	r24, 0x28	; 40
    227c:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2280:	8c e0       	ldi	r24, 0x0C	; 12
    2282:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
}
    228c:	2e 96       	adiw	r28, 0x0e	; 14
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	c3 56       	subi	r28, 0x63	; 99
    22ac:	d0 40       	sbci	r29, 0x00	; 0
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	fe 01       	movw	r30, r28
    22ba:	ed 59       	subi	r30, 0x9D	; 157
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    22ca:	fe 01       	movw	r30, r28
    22cc:	e1 5a       	subi	r30, 0xA1	; 161
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e8       	ldi	r26, 0x80	; 128
    22d6:	bf e3       	ldi	r27, 0x3F	; 63
    22d8:	80 83       	st	Z, r24
    22da:	91 83       	std	Z+1, r25	; 0x01
    22dc:	a2 83       	std	Z+2, r26	; 0x02
    22de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e0:	8e 01       	movw	r16, r28
    22e2:	05 5a       	subi	r16, 0xA5	; 165
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
    22e6:	fe 01       	movw	r30, r28
    22e8:	e1 5a       	subi	r30, 0xA1	; 161
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	60 81       	ld	r22, Z
    22ee:	71 81       	ldd	r23, Z+1	; 0x01
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a ef       	ldi	r20, 0xFA	; 250
    22fa:	54 e4       	ldi	r21, 0x44	; 68
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	f8 01       	movw	r30, r16
    2306:	80 83       	st	Z, r24
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	a2 83       	std	Z+2, r26	; 0x02
    230c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230e:	fe 01       	movw	r30, r28
    2310:	e5 5a       	subi	r30, 0xA5	; 165
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	60 81       	ld	r22, Z
    2316:	71 81       	ldd	r23, Z+1	; 0x01
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	93 81       	ldd	r25, Z+3	; 0x03
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	44 f4       	brge	.+16     	; 0x233c <LCD_sendCommand+0x9e>
		__ticks = 1;
    232c:	fe 01       	movw	r30, r28
    232e:	e7 5a       	subi	r30, 0xA7	; 167
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
    233a:	64 c0       	rjmp	.+200    	; 0x2404 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    233c:	fe 01       	movw	r30, r28
    233e:	e5 5a       	subi	r30, 0xA5	; 165
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	0c f0       	brlt	.+2      	; 0x235c <LCD_sendCommand+0xbe>
    235a:	43 c0       	rjmp	.+134    	; 0x23e2 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	fe 01       	movw	r30, r28
    235e:	e1 5a       	subi	r30, 0xA1	; 161
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	82 81       	ldd	r24, Z+2	; 0x02
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8e 01       	movw	r16, r28
    237c:	07 5a       	subi	r16, 0xA7	; 167
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	f8 01       	movw	r30, r16
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	80 83       	st	Z, r24
    2392:	1f c0       	rjmp	.+62     	; 0x23d2 <LCD_sendCommand+0x134>
    2394:	fe 01       	movw	r30, r28
    2396:	e9 5a       	subi	r30, 0xA9	; 169
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	88 ec       	ldi	r24, 0xC8	; 200
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
    23a2:	fe 01       	movw	r30, r28
    23a4:	e9 5a       	subi	r30, 0xA9	; 169
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 81       	ld	r24, Z
    23aa:	91 81       	ldd	r25, Z+1	; 0x01
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_sendCommand+0x10e>
    23b0:	fe 01       	movw	r30, r28
    23b2:	e9 5a       	subi	r30, 0xA9	; 169
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	de 01       	movw	r26, r28
    23bc:	a7 5a       	subi	r26, 0xA7	; 167
    23be:	bf 4f       	sbci	r27, 0xFF	; 255
    23c0:	fe 01       	movw	r30, r28
    23c2:	e7 5a       	subi	r30, 0xA7	; 167
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	80 81       	ld	r24, Z
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	11 96       	adiw	r26, 0x01	; 1
    23ce:	9c 93       	st	X, r25
    23d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	fe 01       	movw	r30, r28
    23d4:	e7 5a       	subi	r30, 0xA7	; 167
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	d1 f6       	brne	.-76     	; 0x2394 <LCD_sendCommand+0xf6>
    23e0:	27 c0       	rjmp	.+78     	; 0x2430 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e2:	8e 01       	movw	r16, r28
    23e4:	07 5a       	subi	r16, 0xA7	; 167
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e5 5a       	subi	r30, 0xA5	; 165
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	f8 01       	movw	r30, r16
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	de 01       	movw	r26, r28
    2406:	ab 5a       	subi	r26, 0xAB	; 171
    2408:	bf 4f       	sbci	r27, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e7 5a       	subi	r30, 0xA7	; 167
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	91 81       	ldd	r25, Z+1	; 0x01
    2414:	8d 93       	st	X+, r24
    2416:	9c 93       	st	X, r25
    2418:	fe 01       	movw	r30, r28
    241a:	eb 5a       	subi	r30, 0xAB	; 171
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_sendCommand+0x184>
    2426:	fe 01       	movw	r30, r28
    2428:	eb 5a       	subi	r30, 0xAB	; 171
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    243a:	fe 01       	movw	r30, r28
    243c:	ef 5a       	subi	r30, 0xAF	; 175
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a0 e8       	ldi	r26, 0x80	; 128
    2446:	bf e3       	ldi	r27, 0x3F	; 63
    2448:	80 83       	st	Z, r24
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	a2 83       	std	Z+2, r26	; 0x02
    244e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2450:	8e 01       	movw	r16, r28
    2452:	03 5b       	subi	r16, 0xB3	; 179
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	ef 5a       	subi	r30, 0xAF	; 175
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a ef       	ldi	r20, 0xFA	; 250
    246a:	54 e4       	ldi	r21, 0x44	; 68
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	f8 01       	movw	r30, r16
    2476:	80 83       	st	Z, r24
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	a2 83       	std	Z+2, r26	; 0x02
    247c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247e:	fe 01       	movw	r30, r28
    2480:	e3 5b       	subi	r30, 0xB3	; 179
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	44 f4       	brge	.+16     	; 0x24ac <LCD_sendCommand+0x20e>
		__ticks = 1;
    249c:	fe 01       	movw	r30, r28
    249e:	e5 5b       	subi	r30, 0xB5	; 181
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	64 c0       	rjmp	.+200    	; 0x2574 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e3 5b       	subi	r30, 0xB3	; 179
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	0c f0       	brlt	.+2      	; 0x24cc <LCD_sendCommand+0x22e>
    24ca:	43 c0       	rjmp	.+134    	; 0x2552 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	fe 01       	movw	r30, r28
    24ce:	ef 5a       	subi	r30, 0xAF	; 175
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	8e 01       	movw	r16, r28
    24ec:	05 5b       	subi	r16, 0xB5	; 181
    24ee:	1f 4f       	sbci	r17, 0xFF	; 255
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	f8 01       	movw	r30, r16
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	1f c0       	rjmp	.+62     	; 0x2542 <LCD_sendCommand+0x2a4>
    2504:	fe 01       	movw	r30, r28
    2506:	e7 5b       	subi	r30, 0xB7	; 183
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	88 ec       	ldi	r24, 0xC8	; 200
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	fe 01       	movw	r30, r28
    2514:	e7 5b       	subi	r30, 0xB7	; 183
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	91 81       	ldd	r25, Z+1	; 0x01
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <LCD_sendCommand+0x27e>
    2520:	fe 01       	movw	r30, r28
    2522:	e7 5b       	subi	r30, 0xB7	; 183
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252a:	de 01       	movw	r26, r28
    252c:	a5 5b       	subi	r26, 0xB5	; 181
    252e:	bf 4f       	sbci	r27, 0xFF	; 255
    2530:	fe 01       	movw	r30, r28
    2532:	e5 5b       	subi	r30, 0xB5	; 181
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	80 81       	ld	r24, Z
    2538:	91 81       	ldd	r25, Z+1	; 0x01
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	11 96       	adiw	r26, 0x01	; 1
    253e:	9c 93       	st	X, r25
    2540:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	fe 01       	movw	r30, r28
    2544:	e5 5b       	subi	r30, 0xB5	; 181
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	d1 f6       	brne	.-76     	; 0x2504 <LCD_sendCommand+0x266>
    2550:	27 c0       	rjmp	.+78     	; 0x25a0 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	8e 01       	movw	r16, r28
    2554:	05 5b       	subi	r16, 0xB5	; 181
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	e3 5b       	subi	r30, 0xB3	; 179
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	f8 01       	movw	r30, r16
    2570:	91 83       	std	Z+1, r25	; 0x01
    2572:	80 83       	st	Z, r24
    2574:	de 01       	movw	r26, r28
    2576:	a9 5b       	subi	r26, 0xB9	; 185
    2578:	bf 4f       	sbci	r27, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	e5 5b       	subi	r30, 0xB5	; 181
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	8d 93       	st	X+, r24
    2586:	9c 93       	st	X, r25
    2588:	fe 01       	movw	r30, r28
    258a:	e9 5b       	subi	r30, 0xB9	; 185
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_sendCommand+0x2f4>
    2596:	fe 01       	movw	r30, r28
    2598:	e9 5b       	subi	r30, 0xB9	; 185
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    25a0:	fe 01       	movw	r30, r28
    25a2:	ed 59       	subi	r30, 0x9D	; 157
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	80 71       	andi	r24, 0x10	; 16
    25ae:	90 70       	andi	r25, 0x00	; 0
    25b0:	95 95       	asr	r25
    25b2:	87 95       	ror	r24
    25b4:	95 95       	asr	r25
    25b6:	87 95       	ror	r24
    25b8:	95 95       	asr	r25
    25ba:	87 95       	ror	r24
    25bc:	95 95       	asr	r25
    25be:	87 95       	ror	r24
    25c0:	98 2f       	mov	r25, r24
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	62 e0       	ldi	r22, 0x02	; 2
    25c6:	49 2f       	mov	r20, r25
    25c8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    25cc:	fe 01       	movw	r30, r28
    25ce:	ed 59       	subi	r30, 0x9D	; 157
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	80 72       	andi	r24, 0x20	; 32
    25da:	90 70       	andi	r25, 0x00	; 0
    25dc:	95 95       	asr	r25
    25de:	87 95       	ror	r24
    25e0:	95 95       	asr	r25
    25e2:	87 95       	ror	r24
    25e4:	95 95       	asr	r25
    25e6:	87 95       	ror	r24
    25e8:	95 95       	asr	r25
    25ea:	87 95       	ror	r24
    25ec:	95 95       	asr	r25
    25ee:	87 95       	ror	r24
    25f0:	98 2f       	mov	r25, r24
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	63 e0       	ldi	r22, 0x03	; 3
    25f6:	49 2f       	mov	r20, r25
    25f8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    25fc:	fe 01       	movw	r30, r28
    25fe:	ed 59       	subi	r30, 0x9D	; 157
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	80 74       	andi	r24, 0x40	; 64
    260a:	90 70       	andi	r25, 0x00	; 0
    260c:	08 2e       	mov	r0, r24
    260e:	89 2f       	mov	r24, r25
    2610:	00 0c       	add	r0, r0
    2612:	88 1f       	adc	r24, r24
    2614:	99 0b       	sbc	r25, r25
    2616:	00 0c       	add	r0, r0
    2618:	88 1f       	adc	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	98 2f       	mov	r25, r24
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	64 e0       	ldi	r22, 0x04	; 4
    2622:	49 2f       	mov	r20, r25
    2624:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2628:	fe 01       	movw	r30, r28
    262a:	ed 59       	subi	r30, 0x9D	; 157
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 81       	ld	r24, Z
    2630:	98 2f       	mov	r25, r24
    2632:	99 1f       	adc	r25, r25
    2634:	99 27       	eor	r25, r25
    2636:	99 1f       	adc	r25, r25
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	65 e0       	ldi	r22, 0x05	; 5
    263c:	49 2f       	mov	r20, r25
    263e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2642:	fe 01       	movw	r30, r28
    2644:	ed 5b       	subi	r30, 0xBD	; 189
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e8       	ldi	r26, 0x80	; 128
    264e:	bf e3       	ldi	r27, 0x3F	; 63
    2650:	80 83       	st	Z, r24
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	a2 83       	std	Z+2, r26	; 0x02
    2656:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	8e 01       	movw	r16, r28
    265a:	01 5c       	subi	r16, 0xC1	; 193
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
    265e:	fe 01       	movw	r30, r28
    2660:	ed 5b       	subi	r30, 0xBD	; 189
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	60 81       	ld	r22, Z
    2666:	71 81       	ldd	r23, Z+1	; 0x01
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	93 81       	ldd	r25, Z+3	; 0x03
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4a ef       	ldi	r20, 0xFA	; 250
    2672:	54 e4       	ldi	r21, 0x44	; 68
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	f8 01       	movw	r30, r16
    267e:	80 83       	st	Z, r24
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	a2 83       	std	Z+2, r26	; 0x02
    2684:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2686:	fe 01       	movw	r30, r28
    2688:	ff 96       	adiw	r30, 0x3f	; 63
    268a:	60 81       	ld	r22, Z
    268c:	71 81       	ldd	r23, Z+1	; 0x01
    268e:	82 81       	ldd	r24, Z+2	; 0x02
    2690:	93 81       	ldd	r25, Z+3	; 0x03
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	2c f4       	brge	.+10     	; 0x26ac <LCD_sendCommand+0x40e>
		__ticks = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9e af       	std	Y+62, r25	; 0x3e
    26a8:	8d af       	std	Y+61, r24	; 0x3d
    26aa:	46 c0       	rjmp	.+140    	; 0x2738 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    26ac:	fe 01       	movw	r30, r28
    26ae:	ff 96       	adiw	r30, 0x3f	; 63
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	64 f5       	brge	.+88     	; 0x2720 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	fe 01       	movw	r30, r28
    26ca:	ed 5b       	subi	r30, 0xBD	; 189
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e2       	ldi	r20, 0x20	; 32
    26dc:	51 e4       	ldi	r21, 0x41	; 65
    26de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9e af       	std	Y+62, r25	; 0x3e
    26f4:	8d af       	std	Y+61, r24	; 0x3d
    26f6:	0f c0       	rjmp	.+30     	; 0x2716 <LCD_sendCommand+0x478>
    26f8:	88 ec       	ldi	r24, 0xC8	; 200
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9c af       	std	Y+60, r25	; 0x3c
    26fe:	8b af       	std	Y+59, r24	; 0x3b
    2700:	8b ad       	ldd	r24, Y+59	; 0x3b
    2702:	9c ad       	ldd	r25, Y+60	; 0x3c
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <LCD_sendCommand+0x466>
    2708:	9c af       	std	Y+60, r25	; 0x3c
    270a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	8d ad       	ldd	r24, Y+61	; 0x3d
    270e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	9e af       	std	Y+62, r25	; 0x3e
    2714:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	8d ad       	ldd	r24, Y+61	; 0x3d
    2718:	9e ad       	ldd	r25, Y+62	; 0x3e
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	69 f7       	brne	.-38     	; 0x26f8 <LCD_sendCommand+0x45a>
    271e:	16 c0       	rjmp	.+44     	; 0x274c <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2720:	fe 01       	movw	r30, r28
    2722:	ff 96       	adiw	r30, 0x3f	; 63
    2724:	60 81       	ld	r22, Z
    2726:	71 81       	ldd	r23, Z+1	; 0x01
    2728:	82 81       	ldd	r24, Z+2	; 0x02
    272a:	93 81       	ldd	r25, Z+3	; 0x03
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9e af       	std	Y+62, r25	; 0x3e
    2736:	8d af       	std	Y+61, r24	; 0x3d
    2738:	8d ad       	ldd	r24, Y+61	; 0x3d
    273a:	9e ad       	ldd	r25, Y+62	; 0x3e
    273c:	9a af       	std	Y+58, r25	; 0x3a
    273e:	89 af       	std	Y+57, r24	; 0x39
    2740:	89 ad       	ldd	r24, Y+57	; 0x39
    2742:	9a ad       	ldd	r25, Y+58	; 0x3a
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <LCD_sendCommand+0x4a6>
    2748:	9a af       	std	Y+58, r25	; 0x3a
    274a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	61 e0       	ldi	r22, 0x01	; 1
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	a0 e8       	ldi	r26, 0x80	; 128
    275c:	bf e3       	ldi	r27, 0x3F	; 63
    275e:	8d ab       	std	Y+53, r24	; 0x35
    2760:	9e ab       	std	Y+54, r25	; 0x36
    2762:	af ab       	std	Y+55, r26	; 0x37
    2764:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2766:	6d a9       	ldd	r22, Y+53	; 0x35
    2768:	7e a9       	ldd	r23, Y+54	; 0x36
    276a:	8f a9       	ldd	r24, Y+55	; 0x37
    276c:	98 ad       	ldd	r25, Y+56	; 0x38
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a ef       	ldi	r20, 0xFA	; 250
    2774:	54 e4       	ldi	r21, 0x44	; 68
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	89 ab       	std	Y+49, r24	; 0x31
    2780:	9a ab       	std	Y+50, r25	; 0x32
    2782:	ab ab       	std	Y+51, r26	; 0x33
    2784:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2786:	69 a9       	ldd	r22, Y+49	; 0x31
    2788:	7a a9       	ldd	r23, Y+50	; 0x32
    278a:	8b a9       	ldd	r24, Y+51	; 0x33
    278c:	9c a9       	ldd	r25, Y+52	; 0x34
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e8       	ldi	r20, 0x80	; 128
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279a:	88 23       	and	r24, r24
    279c:	2c f4       	brge	.+10     	; 0x27a8 <LCD_sendCommand+0x50a>
		__ticks = 1;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	98 ab       	std	Y+48, r25	; 0x30
    27a4:	8f a7       	std	Y+47, r24	; 0x2f
    27a6:	3f c0       	rjmp	.+126    	; 0x2826 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    27a8:	69 a9       	ldd	r22, Y+49	; 0x31
    27aa:	7a a9       	ldd	r23, Y+50	; 0x32
    27ac:	8b a9       	ldd	r24, Y+51	; 0x33
    27ae:	9c a9       	ldd	r25, Y+52	; 0x34
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	3f ef       	ldi	r19, 0xFF	; 255
    27b4:	4f e7       	ldi	r20, 0x7F	; 127
    27b6:	57 e4       	ldi	r21, 0x47	; 71
    27b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27bc:	18 16       	cp	r1, r24
    27be:	4c f5       	brge	.+82     	; 0x2812 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c0:	6d a9       	ldd	r22, Y+53	; 0x35
    27c2:	7e a9       	ldd	r23, Y+54	; 0x36
    27c4:	8f a9       	ldd	r24, Y+55	; 0x37
    27c6:	98 ad       	ldd	r25, Y+56	; 0x38
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e2       	ldi	r20, 0x20	; 32
    27ce:	51 e4       	ldi	r21, 0x41	; 65
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	bc 01       	movw	r22, r24
    27da:	cd 01       	movw	r24, r26
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	98 ab       	std	Y+48, r25	; 0x30
    27e6:	8f a7       	std	Y+47, r24	; 0x2f
    27e8:	0f c0       	rjmp	.+30     	; 0x2808 <LCD_sendCommand+0x56a>
    27ea:	88 ec       	ldi	r24, 0xC8	; 200
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9e a7       	std	Y+46, r25	; 0x2e
    27f0:	8d a7       	std	Y+45, r24	; 0x2d
    27f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    27f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_sendCommand+0x558>
    27fa:	9e a7       	std	Y+46, r25	; 0x2e
    27fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2800:	98 a9       	ldd	r25, Y+48	; 0x30
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	98 ab       	std	Y+48, r25	; 0x30
    2806:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2808:	8f a5       	ldd	r24, Y+47	; 0x2f
    280a:	98 a9       	ldd	r25, Y+48	; 0x30
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	69 f7       	brne	.-38     	; 0x27ea <LCD_sendCommand+0x54c>
    2810:	14 c0       	rjmp	.+40     	; 0x283a <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	69 a9       	ldd	r22, Y+49	; 0x31
    2814:	7a a9       	ldd	r23, Y+50	; 0x32
    2816:	8b a9       	ldd	r24, Y+51	; 0x33
    2818:	9c a9       	ldd	r25, Y+52	; 0x34
    281a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	98 ab       	std	Y+48, r25	; 0x30
    2824:	8f a7       	std	Y+47, r24	; 0x2f
    2826:	8f a5       	ldd	r24, Y+47	; 0x2f
    2828:	98 a9       	ldd	r25, Y+48	; 0x30
    282a:	9c a7       	std	Y+44, r25	; 0x2c
    282c:	8b a7       	std	Y+43, r24	; 0x2b
    282e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2830:	9c a5       	ldd	r25, Y+44	; 0x2c
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <LCD_sendCommand+0x594>
    2836:	9c a7       	std	Y+44, r25	; 0x2c
    2838:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	41 e0       	ldi	r20, 0x01	; 1
    2840:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	a0 e8       	ldi	r26, 0x80	; 128
    284a:	bf e3       	ldi	r27, 0x3F	; 63
    284c:	8f a3       	std	Y+39, r24	; 0x27
    284e:	98 a7       	std	Y+40, r25	; 0x28
    2850:	a9 a7       	std	Y+41, r26	; 0x29
    2852:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2854:	6f a1       	ldd	r22, Y+39	; 0x27
    2856:	78 a5       	ldd	r23, Y+40	; 0x28
    2858:	89 a5       	ldd	r24, Y+41	; 0x29
    285a:	9a a5       	ldd	r25, Y+42	; 0x2a
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a ef       	ldi	r20, 0xFA	; 250
    2862:	54 e4       	ldi	r21, 0x44	; 68
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	8b a3       	std	Y+35, r24	; 0x23
    286e:	9c a3       	std	Y+36, r25	; 0x24
    2870:	ad a3       	std	Y+37, r26	; 0x25
    2872:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2874:	6b a1       	ldd	r22, Y+35	; 0x23
    2876:	7c a1       	ldd	r23, Y+36	; 0x24
    2878:	8d a1       	ldd	r24, Y+37	; 0x25
    287a:	9e a1       	ldd	r25, Y+38	; 0x26
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e8       	ldi	r20, 0x80	; 128
    2882:	5f e3       	ldi	r21, 0x3F	; 63
    2884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2888:	88 23       	and	r24, r24
    288a:	2c f4       	brge	.+10     	; 0x2896 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9a a3       	std	Y+34, r25	; 0x22
    2892:	89 a3       	std	Y+33, r24	; 0x21
    2894:	3f c0       	rjmp	.+126    	; 0x2914 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2896:	6b a1       	ldd	r22, Y+35	; 0x23
    2898:	7c a1       	ldd	r23, Y+36	; 0x24
    289a:	8d a1       	ldd	r24, Y+37	; 0x25
    289c:	9e a1       	ldd	r25, Y+38	; 0x26
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	3f ef       	ldi	r19, 0xFF	; 255
    28a2:	4f e7       	ldi	r20, 0x7F	; 127
    28a4:	57 e4       	ldi	r21, 0x47	; 71
    28a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28aa:	18 16       	cp	r1, r24
    28ac:	4c f5       	brge	.+82     	; 0x2900 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ae:	6f a1       	ldd	r22, Y+39	; 0x27
    28b0:	78 a5       	ldd	r23, Y+40	; 0x28
    28b2:	89 a5       	ldd	r24, Y+41	; 0x29
    28b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e2       	ldi	r20, 0x20	; 32
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9a a3       	std	Y+34, r25	; 0x22
    28d4:	89 a3       	std	Y+33, r24	; 0x21
    28d6:	0f c0       	rjmp	.+30     	; 0x28f6 <LCD_sendCommand+0x658>
    28d8:	88 ec       	ldi	r24, 0xC8	; 200
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	98 a3       	std	Y+32, r25	; 0x20
    28de:	8f 8f       	std	Y+31, r24	; 0x1f
    28e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28e2:	98 a1       	ldd	r25, Y+32	; 0x20
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <LCD_sendCommand+0x646>
    28e8:	98 a3       	std	Y+32, r25	; 0x20
    28ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ec:	89 a1       	ldd	r24, Y+33	; 0x21
    28ee:	9a a1       	ldd	r25, Y+34	; 0x22
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	9a a3       	std	Y+34, r25	; 0x22
    28f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f6:	89 a1       	ldd	r24, Y+33	; 0x21
    28f8:	9a a1       	ldd	r25, Y+34	; 0x22
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	69 f7       	brne	.-38     	; 0x28d8 <LCD_sendCommand+0x63a>
    28fe:	14 c0       	rjmp	.+40     	; 0x2928 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2900:	6b a1       	ldd	r22, Y+35	; 0x23
    2902:	7c a1       	ldd	r23, Y+36	; 0x24
    2904:	8d a1       	ldd	r24, Y+37	; 0x25
    2906:	9e a1       	ldd	r25, Y+38	; 0x26
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9a a3       	std	Y+34, r25	; 0x22
    2912:	89 a3       	std	Y+33, r24	; 0x21
    2914:	89 a1       	ldd	r24, Y+33	; 0x21
    2916:	9a a1       	ldd	r25, Y+34	; 0x22
    2918:	9e 8f       	std	Y+30, r25	; 0x1e
    291a:	8d 8f       	std	Y+29, r24	; 0x1d
    291c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    291e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <LCD_sendCommand+0x682>
    2924:	9e 8f       	std	Y+30, r25	; 0x1e
    2926:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2928:	fe 01       	movw	r30, r28
    292a:	ed 59       	subi	r30, 0x9D	; 157
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 81       	ld	r24, Z
    2930:	98 2f       	mov	r25, r24
    2932:	91 70       	andi	r25, 0x01	; 1
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	62 e0       	ldi	r22, 0x02	; 2
    2938:	49 2f       	mov	r20, r25
    293a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    293e:	fe 01       	movw	r30, r28
    2940:	ed 59       	subi	r30, 0x9D	; 157
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	82 70       	andi	r24, 0x02	; 2
    294c:	90 70       	andi	r25, 0x00	; 0
    294e:	95 95       	asr	r25
    2950:	87 95       	ror	r24
    2952:	98 2f       	mov	r25, r24
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	63 e0       	ldi	r22, 0x03	; 3
    2958:	49 2f       	mov	r20, r25
    295a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    295e:	fe 01       	movw	r30, r28
    2960:	ed 59       	subi	r30, 0x9D	; 157
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	88 2f       	mov	r24, r24
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	84 70       	andi	r24, 0x04	; 4
    296c:	90 70       	andi	r25, 0x00	; 0
    296e:	95 95       	asr	r25
    2970:	87 95       	ror	r24
    2972:	95 95       	asr	r25
    2974:	87 95       	ror	r24
    2976:	98 2f       	mov	r25, r24
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	64 e0       	ldi	r22, 0x04	; 4
    297c:	49 2f       	mov	r20, r25
    297e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2982:	fe 01       	movw	r30, r28
    2984:	ed 59       	subi	r30, 0x9D	; 157
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	88 2f       	mov	r24, r24
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	88 70       	andi	r24, 0x08	; 8
    2990:	90 70       	andi	r25, 0x00	; 0
    2992:	95 95       	asr	r25
    2994:	87 95       	ror	r24
    2996:	95 95       	asr	r25
    2998:	87 95       	ror	r24
    299a:	95 95       	asr	r25
    299c:	87 95       	ror	r24
    299e:	98 2f       	mov	r25, r24
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	65 e0       	ldi	r22, 0x05	; 5
    29a4:	49 2f       	mov	r20, r25
    29a6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e8       	ldi	r26, 0x80	; 128
    29b0:	bf e3       	ldi	r27, 0x3F	; 63
    29b2:	89 8f       	std	Y+25, r24	; 0x19
    29b4:	9a 8f       	std	Y+26, r25	; 0x1a
    29b6:	ab 8f       	std	Y+27, r26	; 0x1b
    29b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	69 8d       	ldd	r22, Y+25	; 0x19
    29bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a ef       	ldi	r20, 0xFA	; 250
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8d 8b       	std	Y+21, r24	; 0x15
    29d4:	9e 8b       	std	Y+22, r25	; 0x16
    29d6:	af 8b       	std	Y+23, r26	; 0x17
    29d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29da:	6d 89       	ldd	r22, Y+21	; 0x15
    29dc:	7e 89       	ldd	r23, Y+22	; 0x16
    29de:	8f 89       	ldd	r24, Y+23	; 0x17
    29e0:	98 8d       	ldd	r25, Y+24	; 0x18
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <LCD_sendCommand+0x75e>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9c 8b       	std	Y+20, r25	; 0x14
    29f8:	8b 8b       	std	Y+19, r24	; 0x13
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    29fc:	6d 89       	ldd	r22, Y+21	; 0x15
    29fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2a00:	8f 89       	ldd	r24, Y+23	; 0x17
    2a02:	98 8d       	ldd	r25, Y+24	; 0x18
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	69 8d       	ldd	r22, Y+25	; 0x19
    2a16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9c 8b       	std	Y+20, r25	; 0x14
    2a3a:	8b 8b       	std	Y+19, r24	; 0x13
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_sendCommand+0x7be>
    2a3e:	88 ec       	ldi	r24, 0xC8	; 200
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	9a 8b       	std	Y+18, r25	; 0x12
    2a44:	89 8b       	std	Y+17, r24	; 0x11
    2a46:	89 89       	ldd	r24, Y+17	; 0x11
    2a48:	9a 89       	ldd	r25, Y+18	; 0x12
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_sendCommand+0x7ac>
    2a4e:	9a 8b       	std	Y+18, r25	; 0x12
    2a50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	8b 89       	ldd	r24, Y+19	; 0x13
    2a54:	9c 89       	ldd	r25, Y+20	; 0x14
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9c 8b       	std	Y+20, r25	; 0x14
    2a5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <LCD_sendCommand+0x7a0>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	6d 89       	ldd	r22, Y+21	; 0x15
    2a68:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9c 8b       	std	Y+20, r25	; 0x14
    2a78:	8b 8b       	std	Y+19, r24	; 0x13
    2a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7e:	98 8b       	std	Y+16, r25	; 0x10
    2a80:	8f 87       	std	Y+15, r24	; 0x0f
    2a82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a84:	98 89       	ldd	r25, Y+16	; 0x10
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_sendCommand+0x7e8>
    2a8a:	98 8b       	std	Y+16, r25	; 0x10
    2a8c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	61 e0       	ldi	r22, 0x01	; 1
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a0 e8       	ldi	r26, 0x80	; 128
    2a9e:	bf e3       	ldi	r27, 0x3F	; 63
    2aa0:	8b 87       	std	Y+11, r24	; 0x0b
    2aa2:	9c 87       	std	Y+12, r25	; 0x0c
    2aa4:	ad 87       	std	Y+13, r26	; 0x0d
    2aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	4a ef       	ldi	r20, 0xFA	; 250
    2ab6:	54 e4       	ldi	r21, 0x44	; 68
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	8f 83       	std	Y+7, r24	; 0x07
    2ac2:	98 87       	std	Y+8, r25	; 0x08
    2ac4:	a9 87       	std	Y+9, r26	; 0x09
    2ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e8       	ldi	r20, 0x80	; 128
    2ad6:	5f e3       	ldi	r21, 0x3F	; 63
    2ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2adc:	88 23       	and	r24, r24
    2ade:	2c f4       	brge	.+10     	; 0x2aea <LCD_sendCommand+0x84c>
		__ticks = 1;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	3f c0       	rjmp	.+126    	; 0x2b68 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2aea:	6f 81       	ldd	r22, Y+7	; 0x07
    2aec:	78 85       	ldd	r23, Y+8	; 0x08
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	3f ef       	ldi	r19, 0xFF	; 255
    2af6:	4f e7       	ldi	r20, 0x7F	; 127
    2af8:	57 e4       	ldi	r21, 0x47	; 71
    2afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2afe:	18 16       	cp	r1, r24
    2b00:	4c f5       	brge	.+82     	; 0x2b54 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e2       	ldi	r20, 0x20	; 32
    2b10:	51 e4       	ldi	r21, 0x41	; 65
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
    2b2a:	0f c0       	rjmp	.+30     	; 0x2b4a <LCD_sendCommand+0x8ac>
    2b2c:	88 ec       	ldi	r24, 0xC8	; 200
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <LCD_sendCommand+0x89a>
    2b3c:	9c 83       	std	Y+4, r25	; 0x04
    2b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	69 f7       	brne	.-38     	; 0x2b2c <LCD_sendCommand+0x88e>
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <LCD_sendCommand+0x8d6>
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b7c:	cd 59       	subi	r28, 0x9D	; 157
    2b7e:	df 4f       	sbci	r29, 0xFF	; 255
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	08 95       	ret

00002b94 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2b94:	0f 93       	push	r16
    2b96:	1f 93       	push	r17
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
    2ba0:	c3 56       	subi	r28, 0x63	; 99
    2ba2:	d0 40       	sbci	r29, 0x00	; 0
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	fe 01       	movw	r30, r28
    2bb0:	ed 59       	subi	r30, 0x9D	; 157
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e1 5a       	subi	r30, 0xA1	; 161
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e8       	ldi	r26, 0x80	; 128
    2bcc:	bf e3       	ldi	r27, 0x3F	; 63
    2bce:	80 83       	st	Z, r24
    2bd0:	91 83       	std	Z+1, r25	; 0x01
    2bd2:	a2 83       	std	Z+2, r26	; 0x02
    2bd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	8e 01       	movw	r16, r28
    2bd8:	05 5a       	subi	r16, 0xA5	; 165
    2bda:	1f 4f       	sbci	r17, 0xFF	; 255
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e1 5a       	subi	r30, 0xA1	; 161
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a ef       	ldi	r20, 0xFA	; 250
    2bf0:	54 e4       	ldi	r21, 0x44	; 68
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	80 83       	st	Z, r24
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	a2 83       	std	Z+2, r26	; 0x02
    2c02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c04:	fe 01       	movw	r30, r28
    2c06:	e5 5a       	subi	r30, 0xA5	; 165
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	60 81       	ld	r22, Z
    2c0c:	71 81       	ldd	r23, Z+1	; 0x01
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	93 81       	ldd	r25, Z+3	; 0x03
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	44 f4       	brge	.+16     	; 0x2c32 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2c22:	fe 01       	movw	r30, r28
    2c24:	e7 5a       	subi	r30, 0xA7	; 167
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
    2c30:	64 c0       	rjmp	.+200    	; 0x2cfa <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2c32:	fe 01       	movw	r30, r28
    2c34:	e5 5a       	subi	r30, 0xA5	; 165
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	3f ef       	ldi	r19, 0xFF	; 255
    2c44:	4f e7       	ldi	r20, 0x7F	; 127
    2c46:	57 e4       	ldi	r21, 0x47	; 71
    2c48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c4c:	18 16       	cp	r1, r24
    2c4e:	0c f0       	brlt	.+2      	; 0x2c52 <LCD_displayCharacter+0xbe>
    2c50:	43 c0       	rjmp	.+134    	; 0x2cd8 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c52:	fe 01       	movw	r30, r28
    2c54:	e1 5a       	subi	r30, 0xA1	; 161
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	8e 01       	movw	r16, r28
    2c72:	07 5a       	subi	r16, 0xA7	; 167
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	f8 01       	movw	r30, r16
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	80 83       	st	Z, r24
    2c88:	1f c0       	rjmp	.+62     	; 0x2cc8 <LCD_displayCharacter+0x134>
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e9 5a       	subi	r30, 0xA9	; 169
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	88 ec       	ldi	r24, 0xC8	; 200
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	80 83       	st	Z, r24
    2c98:	fe 01       	movw	r30, r28
    2c9a:	e9 5a       	subi	r30, 0xA9	; 169
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_displayCharacter+0x10e>
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e9 5a       	subi	r30, 0xA9	; 169
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	91 83       	std	Z+1, r25	; 0x01
    2cae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	de 01       	movw	r26, r28
    2cb2:	a7 5a       	subi	r26, 0xA7	; 167
    2cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e7 5a       	subi	r30, 0xA7	; 167
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	11 96       	adiw	r26, 0x01	; 1
    2cc4:	9c 93       	st	X, r25
    2cc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e7 5a       	subi	r30, 0xA7	; 167
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	d1 f6       	brne	.-76     	; 0x2c8a <LCD_displayCharacter+0xf6>
    2cd6:	27 c0       	rjmp	.+78     	; 0x2d26 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd8:	8e 01       	movw	r16, r28
    2cda:	07 5a       	subi	r16, 0xA7	; 167
    2cdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	e5 5a       	subi	r30, 0xA5	; 165
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	60 81       	ld	r22, Z
    2ce6:	71 81       	ldd	r23, Z+1	; 0x01
    2ce8:	82 81       	ldd	r24, Z+2	; 0x02
    2cea:	93 81       	ldd	r25, Z+3	; 0x03
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	de 01       	movw	r26, r28
    2cfc:	ab 5a       	subi	r26, 0xAB	; 171
    2cfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2d00:	fe 01       	movw	r30, r28
    2d02:	e7 5a       	subi	r30, 0xA7	; 167
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	8d 93       	st	X+, r24
    2d0c:	9c 93       	st	X, r25
    2d0e:	fe 01       	movw	r30, r28
    2d10:	eb 5a       	subi	r30, 0xAB	; 171
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_displayCharacter+0x184>
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	eb 5a       	subi	r30, 0xAB	; 171
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	61 e0       	ldi	r22, 0x01	; 1
    2d2a:	41 e0       	ldi	r20, 0x01	; 1
    2d2c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2d30:	fe 01       	movw	r30, r28
    2d32:	ef 5a       	subi	r30, 0xAF	; 175
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 e8       	ldi	r26, 0x80	; 128
    2d3c:	bf e3       	ldi	r27, 0x3F	; 63
    2d3e:	80 83       	st	Z, r24
    2d40:	91 83       	std	Z+1, r25	; 0x01
    2d42:	a2 83       	std	Z+2, r26	; 0x02
    2d44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d46:	8e 01       	movw	r16, r28
    2d48:	03 5b       	subi	r16, 0xB3	; 179
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ef 5a       	subi	r30, 0xAF	; 175
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	60 81       	ld	r22, Z
    2d54:	71 81       	ldd	r23, Z+1	; 0x01
    2d56:	82 81       	ldd	r24, Z+2	; 0x02
    2d58:	93 81       	ldd	r25, Z+3	; 0x03
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	4a ef       	ldi	r20, 0xFA	; 250
    2d60:	54 e4       	ldi	r21, 0x44	; 68
    2d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	f8 01       	movw	r30, r16
    2d6c:	80 83       	st	Z, r24
    2d6e:	91 83       	std	Z+1, r25	; 0x01
    2d70:	a2 83       	std	Z+2, r26	; 0x02
    2d72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d74:	fe 01       	movw	r30, r28
    2d76:	e3 5b       	subi	r30, 0xB3	; 179
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	60 81       	ld	r22, Z
    2d7c:	71 81       	ldd	r23, Z+1	; 0x01
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e8       	ldi	r20, 0x80	; 128
    2d88:	5f e3       	ldi	r21, 0x3F	; 63
    2d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8e:	88 23       	and	r24, r24
    2d90:	44 f4       	brge	.+16     	; 0x2da2 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2d92:	fe 01       	movw	r30, r28
    2d94:	e5 5b       	subi	r30, 0xB5	; 181
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
    2da0:	64 c0       	rjmp	.+200    	; 0x2e6a <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2da2:	fe 01       	movw	r30, r28
    2da4:	e3 5b       	subi	r30, 0xB3	; 179
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	60 81       	ld	r22, Z
    2daa:	71 81       	ldd	r23, Z+1	; 0x01
    2dac:	82 81       	ldd	r24, Z+2	; 0x02
    2dae:	93 81       	ldd	r25, Z+3	; 0x03
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	3f ef       	ldi	r19, 0xFF	; 255
    2db4:	4f e7       	ldi	r20, 0x7F	; 127
    2db6:	57 e4       	ldi	r21, 0x47	; 71
    2db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dbc:	18 16       	cp	r1, r24
    2dbe:	0c f0       	brlt	.+2      	; 0x2dc2 <LCD_displayCharacter+0x22e>
    2dc0:	43 c0       	rjmp	.+134    	; 0x2e48 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	ef 5a       	subi	r30, 0xAF	; 175
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8e 01       	movw	r16, r28
    2de2:	05 5b       	subi	r16, 0xB5	; 181
    2de4:	1f 4f       	sbci	r17, 0xFF	; 255
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	f8 01       	movw	r30, r16
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
    2df8:	1f c0       	rjmp	.+62     	; 0x2e38 <LCD_displayCharacter+0x2a4>
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e7 5b       	subi	r30, 0xB7	; 183
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	88 ec       	ldi	r24, 0xC8	; 200
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e7 5b       	subi	r30, 0xB7	; 183
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 81       	ld	r24, Z
    2e10:	91 81       	ldd	r25, Z+1	; 0x01
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <LCD_displayCharacter+0x27e>
    2e16:	fe 01       	movw	r30, r28
    2e18:	e7 5b       	subi	r30, 0xB7	; 183
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e20:	de 01       	movw	r26, r28
    2e22:	a5 5b       	subi	r26, 0xB5	; 181
    2e24:	bf 4f       	sbci	r27, 0xFF	; 255
    2e26:	fe 01       	movw	r30, r28
    2e28:	e5 5b       	subi	r30, 0xB5	; 181
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	80 81       	ld	r24, Z
    2e2e:	91 81       	ldd	r25, Z+1	; 0x01
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	11 96       	adiw	r26, 0x01	; 1
    2e34:	9c 93       	st	X, r25
    2e36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 5b       	subi	r30, 0xB5	; 181
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	d1 f6       	brne	.-76     	; 0x2dfa <LCD_displayCharacter+0x266>
    2e46:	27 c0       	rjmp	.+78     	; 0x2e96 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e48:	8e 01       	movw	r16, r28
    2e4a:	05 5b       	subi	r16, 0xB5	; 181
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e3 5b       	subi	r30, 0xB3	; 179
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	f8 01       	movw	r30, r16
    2e66:	91 83       	std	Z+1, r25	; 0x01
    2e68:	80 83       	st	Z, r24
    2e6a:	de 01       	movw	r26, r28
    2e6c:	a9 5b       	subi	r26, 0xB9	; 185
    2e6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e70:	fe 01       	movw	r30, r28
    2e72:	e5 5b       	subi	r30, 0xB5	; 181
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	8d 93       	st	X+, r24
    2e7c:	9c 93       	st	X, r25
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e9 5b       	subi	r30, 0xB9	; 185
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	f1 f7       	brne	.-4      	; 0x2e88 <LCD_displayCharacter+0x2f4>
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e9 5b       	subi	r30, 0xB9	; 185
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	91 83       	std	Z+1, r25	; 0x01
    2e94:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2e96:	fe 01       	movw	r30, r28
    2e98:	ed 59       	subi	r30, 0x9D	; 157
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	80 81       	ld	r24, Z
    2e9e:	88 2f       	mov	r24, r24
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	80 71       	andi	r24, 0x10	; 16
    2ea4:	90 70       	andi	r25, 0x00	; 0
    2ea6:	95 95       	asr	r25
    2ea8:	87 95       	ror	r24
    2eaa:	95 95       	asr	r25
    2eac:	87 95       	ror	r24
    2eae:	95 95       	asr	r25
    2eb0:	87 95       	ror	r24
    2eb2:	95 95       	asr	r25
    2eb4:	87 95       	ror	r24
    2eb6:	98 2f       	mov	r25, r24
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	62 e0       	ldi	r22, 0x02	; 2
    2ebc:	49 2f       	mov	r20, r25
    2ebe:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ed 59       	subi	r30, 0x9D	; 157
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	88 2f       	mov	r24, r24
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	80 72       	andi	r24, 0x20	; 32
    2ed0:	90 70       	andi	r25, 0x00	; 0
    2ed2:	95 95       	asr	r25
    2ed4:	87 95       	ror	r24
    2ed6:	95 95       	asr	r25
    2ed8:	87 95       	ror	r24
    2eda:	95 95       	asr	r25
    2edc:	87 95       	ror	r24
    2ede:	95 95       	asr	r25
    2ee0:	87 95       	ror	r24
    2ee2:	95 95       	asr	r25
    2ee4:	87 95       	ror	r24
    2ee6:	98 2f       	mov	r25, r24
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	63 e0       	ldi	r22, 0x03	; 3
    2eec:	49 2f       	mov	r20, r25
    2eee:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	ed 59       	subi	r30, 0x9D	; 157
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	80 81       	ld	r24, Z
    2efa:	88 2f       	mov	r24, r24
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	80 74       	andi	r24, 0x40	; 64
    2f00:	90 70       	andi	r25, 0x00	; 0
    2f02:	08 2e       	mov	r0, r24
    2f04:	89 2f       	mov	r24, r25
    2f06:	00 0c       	add	r0, r0
    2f08:	88 1f       	adc	r24, r24
    2f0a:	99 0b       	sbc	r25, r25
    2f0c:	00 0c       	add	r0, r0
    2f0e:	88 1f       	adc	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	98 2f       	mov	r25, r24
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	64 e0       	ldi	r22, 0x04	; 4
    2f18:	49 2f       	mov	r20, r25
    2f1a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 59       	subi	r30, 0x9D	; 157
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	98 2f       	mov	r25, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	99 27       	eor	r25, r25
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	65 e0       	ldi	r22, 0x05	; 5
    2f32:	49 2f       	mov	r20, r25
    2f34:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2f38:	fe 01       	movw	r30, r28
    2f3a:	ed 5b       	subi	r30, 0xBD	; 189
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	a0 e8       	ldi	r26, 0x80	; 128
    2f44:	bf e3       	ldi	r27, 0x3F	; 63
    2f46:	80 83       	st	Z, r24
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	a2 83       	std	Z+2, r26	; 0x02
    2f4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4e:	8e 01       	movw	r16, r28
    2f50:	01 5c       	subi	r16, 0xC1	; 193
    2f52:	1f 4f       	sbci	r17, 0xFF	; 255
    2f54:	fe 01       	movw	r30, r28
    2f56:	ed 5b       	subi	r30, 0xBD	; 189
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	4a ef       	ldi	r20, 0xFA	; 250
    2f68:	54 e4       	ldi	r21, 0x44	; 68
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	f8 01       	movw	r30, r16
    2f74:	80 83       	st	Z, r24
    2f76:	91 83       	std	Z+1, r25	; 0x01
    2f78:	a2 83       	std	Z+2, r26	; 0x02
    2f7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ff 96       	adiw	r30, 0x3f	; 63
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e8       	ldi	r20, 0x80	; 128
    2f8e:	5f e3       	ldi	r21, 0x3F	; 63
    2f90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f94:	88 23       	and	r24, r24
    2f96:	2c f4       	brge	.+10     	; 0x2fa2 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	9e af       	std	Y+62, r25	; 0x3e
    2f9e:	8d af       	std	Y+61, r24	; 0x3d
    2fa0:	46 c0       	rjmp	.+140    	; 0x302e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ff 96       	adiw	r30, 0x3f	; 63
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	93 81       	ldd	r25, Z+3	; 0x03
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	3f ef       	ldi	r19, 0xFF	; 255
    2fb2:	4f e7       	ldi	r20, 0x7F	; 127
    2fb4:	57 e4       	ldi	r21, 0x47	; 71
    2fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fba:	18 16       	cp	r1, r24
    2fbc:	64 f5       	brge	.+88     	; 0x3016 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	ed 5b       	subi	r30, 0xBD	; 189
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	60 81       	ld	r22, Z
    2fc6:	71 81       	ldd	r23, Z+1	; 0x01
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e2       	ldi	r20, 0x20	; 32
    2fd2:	51 e4       	ldi	r21, 0x41	; 65
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	bc 01       	movw	r22, r24
    2fde:	cd 01       	movw	r24, r26
    2fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	9e af       	std	Y+62, r25	; 0x3e
    2fea:	8d af       	std	Y+61, r24	; 0x3d
    2fec:	0f c0       	rjmp	.+30     	; 0x300c <LCD_displayCharacter+0x478>
    2fee:	88 ec       	ldi	r24, 0xC8	; 200
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	9c af       	std	Y+60, r25	; 0x3c
    2ff4:	8b af       	std	Y+59, r24	; 0x3b
    2ff6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ff8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <LCD_displayCharacter+0x466>
    2ffe:	9c af       	std	Y+60, r25	; 0x3c
    3000:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3002:	8d ad       	ldd	r24, Y+61	; 0x3d
    3004:	9e ad       	ldd	r25, Y+62	; 0x3e
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	9e af       	std	Y+62, r25	; 0x3e
    300a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300c:	8d ad       	ldd	r24, Y+61	; 0x3d
    300e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	69 f7       	brne	.-38     	; 0x2fee <LCD_displayCharacter+0x45a>
    3014:	16 c0       	rjmp	.+44     	; 0x3042 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3016:	fe 01       	movw	r30, r28
    3018:	ff 96       	adiw	r30, 0x3f	; 63
    301a:	60 81       	ld	r22, Z
    301c:	71 81       	ldd	r23, Z+1	; 0x01
    301e:	82 81       	ldd	r24, Z+2	; 0x02
    3020:	93 81       	ldd	r25, Z+3	; 0x03
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9e af       	std	Y+62, r25	; 0x3e
    302c:	8d af       	std	Y+61, r24	; 0x3d
    302e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3030:	9e ad       	ldd	r25, Y+62	; 0x3e
    3032:	9a af       	std	Y+58, r25	; 0x3a
    3034:	89 af       	std	Y+57, r24	; 0x39
    3036:	89 ad       	ldd	r24, Y+57	; 0x39
    3038:	9a ad       	ldd	r25, Y+58	; 0x3a
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <LCD_displayCharacter+0x4a6>
    303e:	9a af       	std	Y+58, r25	; 0x3a
    3040:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	a0 e8       	ldi	r26, 0x80	; 128
    3052:	bf e3       	ldi	r27, 0x3F	; 63
    3054:	8d ab       	std	Y+53, r24	; 0x35
    3056:	9e ab       	std	Y+54, r25	; 0x36
    3058:	af ab       	std	Y+55, r26	; 0x37
    305a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305c:	6d a9       	ldd	r22, Y+53	; 0x35
    305e:	7e a9       	ldd	r23, Y+54	; 0x36
    3060:	8f a9       	ldd	r24, Y+55	; 0x37
    3062:	98 ad       	ldd	r25, Y+56	; 0x38
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	4a ef       	ldi	r20, 0xFA	; 250
    306a:	54 e4       	ldi	r21, 0x44	; 68
    306c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	89 ab       	std	Y+49, r24	; 0x31
    3076:	9a ab       	std	Y+50, r25	; 0x32
    3078:	ab ab       	std	Y+51, r26	; 0x33
    307a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    307c:	69 a9       	ldd	r22, Y+49	; 0x31
    307e:	7a a9       	ldd	r23, Y+50	; 0x32
    3080:	8b a9       	ldd	r24, Y+51	; 0x33
    3082:	9c a9       	ldd	r25, Y+52	; 0x34
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	40 e8       	ldi	r20, 0x80	; 128
    308a:	5f e3       	ldi	r21, 0x3F	; 63
    308c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3090:	88 23       	and	r24, r24
    3092:	2c f4       	brge	.+10     	; 0x309e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	98 ab       	std	Y+48, r25	; 0x30
    309a:	8f a7       	std	Y+47, r24	; 0x2f
    309c:	3f c0       	rjmp	.+126    	; 0x311c <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    309e:	69 a9       	ldd	r22, Y+49	; 0x31
    30a0:	7a a9       	ldd	r23, Y+50	; 0x32
    30a2:	8b a9       	ldd	r24, Y+51	; 0x33
    30a4:	9c a9       	ldd	r25, Y+52	; 0x34
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	3f ef       	ldi	r19, 0xFF	; 255
    30aa:	4f e7       	ldi	r20, 0x7F	; 127
    30ac:	57 e4       	ldi	r21, 0x47	; 71
    30ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30b2:	18 16       	cp	r1, r24
    30b4:	4c f5       	brge	.+82     	; 0x3108 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b6:	6d a9       	ldd	r22, Y+53	; 0x35
    30b8:	7e a9       	ldd	r23, Y+54	; 0x36
    30ba:	8f a9       	ldd	r24, Y+55	; 0x37
    30bc:	98 ad       	ldd	r25, Y+56	; 0x38
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e2       	ldi	r20, 0x20	; 32
    30c4:	51 e4       	ldi	r21, 0x41	; 65
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	98 ab       	std	Y+48, r25	; 0x30
    30dc:	8f a7       	std	Y+47, r24	; 0x2f
    30de:	0f c0       	rjmp	.+30     	; 0x30fe <LCD_displayCharacter+0x56a>
    30e0:	88 ec       	ldi	r24, 0xC8	; 200
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	9e a7       	std	Y+46, r25	; 0x2e
    30e6:	8d a7       	std	Y+45, r24	; 0x2d
    30e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    30ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ec:	01 97       	sbiw	r24, 0x01	; 1
    30ee:	f1 f7       	brne	.-4      	; 0x30ec <LCD_displayCharacter+0x558>
    30f0:	9e a7       	std	Y+46, r25	; 0x2e
    30f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f6:	98 a9       	ldd	r25, Y+48	; 0x30
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	98 ab       	std	Y+48, r25	; 0x30
    30fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3100:	98 a9       	ldd	r25, Y+48	; 0x30
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	69 f7       	brne	.-38     	; 0x30e0 <LCD_displayCharacter+0x54c>
    3106:	14 c0       	rjmp	.+40     	; 0x3130 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3108:	69 a9       	ldd	r22, Y+49	; 0x31
    310a:	7a a9       	ldd	r23, Y+50	; 0x32
    310c:	8b a9       	ldd	r24, Y+51	; 0x33
    310e:	9c a9       	ldd	r25, Y+52	; 0x34
    3110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	98 ab       	std	Y+48, r25	; 0x30
    311a:	8f a7       	std	Y+47, r24	; 0x2f
    311c:	8f a5       	ldd	r24, Y+47	; 0x2f
    311e:	98 a9       	ldd	r25, Y+48	; 0x30
    3120:	9c a7       	std	Y+44, r25	; 0x2c
    3122:	8b a7       	std	Y+43, r24	; 0x2b
    3124:	8b a5       	ldd	r24, Y+43	; 0x2b
    3126:	9c a5       	ldd	r25, Y+44	; 0x2c
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <LCD_displayCharacter+0x594>
    312c:	9c a7       	std	Y+44, r25	; 0x2c
    312e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	61 e0       	ldi	r22, 0x01	; 1
    3134:	41 e0       	ldi	r20, 0x01	; 1
    3136:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a0 e8       	ldi	r26, 0x80	; 128
    3140:	bf e3       	ldi	r27, 0x3F	; 63
    3142:	8f a3       	std	Y+39, r24	; 0x27
    3144:	98 a7       	std	Y+40, r25	; 0x28
    3146:	a9 a7       	std	Y+41, r26	; 0x29
    3148:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314a:	6f a1       	ldd	r22, Y+39	; 0x27
    314c:	78 a5       	ldd	r23, Y+40	; 0x28
    314e:	89 a5       	ldd	r24, Y+41	; 0x29
    3150:	9a a5       	ldd	r25, Y+42	; 0x2a
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a ef       	ldi	r20, 0xFA	; 250
    3158:	54 e4       	ldi	r21, 0x44	; 68
    315a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	8b a3       	std	Y+35, r24	; 0x23
    3164:	9c a3       	std	Y+36, r25	; 0x24
    3166:	ad a3       	std	Y+37, r26	; 0x25
    3168:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    316a:	6b a1       	ldd	r22, Y+35	; 0x23
    316c:	7c a1       	ldd	r23, Y+36	; 0x24
    316e:	8d a1       	ldd	r24, Y+37	; 0x25
    3170:	9e a1       	ldd	r25, Y+38	; 0x26
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e8       	ldi	r20, 0x80	; 128
    3178:	5f e3       	ldi	r21, 0x3F	; 63
    317a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    317e:	88 23       	and	r24, r24
    3180:	2c f4       	brge	.+10     	; 0x318c <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	9a a3       	std	Y+34, r25	; 0x22
    3188:	89 a3       	std	Y+33, r24	; 0x21
    318a:	3f c0       	rjmp	.+126    	; 0x320a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    318c:	6b a1       	ldd	r22, Y+35	; 0x23
    318e:	7c a1       	ldd	r23, Y+36	; 0x24
    3190:	8d a1       	ldd	r24, Y+37	; 0x25
    3192:	9e a1       	ldd	r25, Y+38	; 0x26
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	3f ef       	ldi	r19, 0xFF	; 255
    3198:	4f e7       	ldi	r20, 0x7F	; 127
    319a:	57 e4       	ldi	r21, 0x47	; 71
    319c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a0:	18 16       	cp	r1, r24
    31a2:	4c f5       	brge	.+82     	; 0x31f6 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a4:	6f a1       	ldd	r22, Y+39	; 0x27
    31a6:	78 a5       	ldd	r23, Y+40	; 0x28
    31a8:	89 a5       	ldd	r24, Y+41	; 0x29
    31aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e2       	ldi	r20, 0x20	; 32
    31b2:	51 e4       	ldi	r21, 0x41	; 65
    31b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	bc 01       	movw	r22, r24
    31be:	cd 01       	movw	r24, r26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9a a3       	std	Y+34, r25	; 0x22
    31ca:	89 a3       	std	Y+33, r24	; 0x21
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <LCD_displayCharacter+0x658>
    31ce:	88 ec       	ldi	r24, 0xC8	; 200
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	98 a3       	std	Y+32, r25	; 0x20
    31d4:	8f 8f       	std	Y+31, r24	; 0x1f
    31d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31d8:	98 a1       	ldd	r25, Y+32	; 0x20
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <LCD_displayCharacter+0x646>
    31de:	98 a3       	std	Y+32, r25	; 0x20
    31e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e2:	89 a1       	ldd	r24, Y+33	; 0x21
    31e4:	9a a1       	ldd	r25, Y+34	; 0x22
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	9a a3       	std	Y+34, r25	; 0x22
    31ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ec:	89 a1       	ldd	r24, Y+33	; 0x21
    31ee:	9a a1       	ldd	r25, Y+34	; 0x22
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	69 f7       	brne	.-38     	; 0x31ce <LCD_displayCharacter+0x63a>
    31f4:	14 c0       	rjmp	.+40     	; 0x321e <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f6:	6b a1       	ldd	r22, Y+35	; 0x23
    31f8:	7c a1       	ldd	r23, Y+36	; 0x24
    31fa:	8d a1       	ldd	r24, Y+37	; 0x25
    31fc:	9e a1       	ldd	r25, Y+38	; 0x26
    31fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	9a a3       	std	Y+34, r25	; 0x22
    3208:	89 a3       	std	Y+33, r24	; 0x21
    320a:	89 a1       	ldd	r24, Y+33	; 0x21
    320c:	9a a1       	ldd	r25, Y+34	; 0x22
    320e:	9e 8f       	std	Y+30, r25	; 0x1e
    3210:	8d 8f       	std	Y+29, r24	; 0x1d
    3212:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3214:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <LCD_displayCharacter+0x682>
    321a:	9e 8f       	std	Y+30, r25	; 0x1e
    321c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    321e:	fe 01       	movw	r30, r28
    3220:	ed 59       	subi	r30, 0x9D	; 157
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 81       	ld	r24, Z
    3226:	98 2f       	mov	r25, r24
    3228:	91 70       	andi	r25, 0x01	; 1
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	62 e0       	ldi	r22, 0x02	; 2
    322e:	49 2f       	mov	r20, r25
    3230:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3234:	fe 01       	movw	r30, r28
    3236:	ed 59       	subi	r30, 0x9D	; 157
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	88 2f       	mov	r24, r24
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	82 70       	andi	r24, 0x02	; 2
    3242:	90 70       	andi	r25, 0x00	; 0
    3244:	95 95       	asr	r25
    3246:	87 95       	ror	r24
    3248:	98 2f       	mov	r25, r24
    324a:	80 e0       	ldi	r24, 0x00	; 0
    324c:	63 e0       	ldi	r22, 0x03	; 3
    324e:	49 2f       	mov	r20, r25
    3250:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3254:	fe 01       	movw	r30, r28
    3256:	ed 59       	subi	r30, 0x9D	; 157
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	88 2f       	mov	r24, r24
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	84 70       	andi	r24, 0x04	; 4
    3262:	90 70       	andi	r25, 0x00	; 0
    3264:	95 95       	asr	r25
    3266:	87 95       	ror	r24
    3268:	95 95       	asr	r25
    326a:	87 95       	ror	r24
    326c:	98 2f       	mov	r25, r24
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	64 e0       	ldi	r22, 0x04	; 4
    3272:	49 2f       	mov	r20, r25
    3274:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3278:	fe 01       	movw	r30, r28
    327a:	ed 59       	subi	r30, 0x9D	; 157
    327c:	ff 4f       	sbci	r31, 0xFF	; 255
    327e:	80 81       	ld	r24, Z
    3280:	88 2f       	mov	r24, r24
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	88 70       	andi	r24, 0x08	; 8
    3286:	90 70       	andi	r25, 0x00	; 0
    3288:	95 95       	asr	r25
    328a:	87 95       	ror	r24
    328c:	95 95       	asr	r25
    328e:	87 95       	ror	r24
    3290:	95 95       	asr	r25
    3292:	87 95       	ror	r24
    3294:	98 2f       	mov	r25, r24
    3296:	80 e0       	ldi	r24, 0x00	; 0
    3298:	65 e0       	ldi	r22, 0x05	; 5
    329a:	49 2f       	mov	r20, r25
    329c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	a0 e8       	ldi	r26, 0x80	; 128
    32a6:	bf e3       	ldi	r27, 0x3F	; 63
    32a8:	89 8f       	std	Y+25, r24	; 0x19
    32aa:	9a 8f       	std	Y+26, r25	; 0x1a
    32ac:	ab 8f       	std	Y+27, r26	; 0x1b
    32ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b0:	69 8d       	ldd	r22, Y+25	; 0x19
    32b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	4a ef       	ldi	r20, 0xFA	; 250
    32be:	54 e4       	ldi	r21, 0x44	; 68
    32c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	8d 8b       	std	Y+21, r24	; 0x15
    32ca:	9e 8b       	std	Y+22, r25	; 0x16
    32cc:	af 8b       	std	Y+23, r26	; 0x17
    32ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32d0:	6d 89       	ldd	r22, Y+21	; 0x15
    32d2:	7e 89       	ldd	r23, Y+22	; 0x16
    32d4:	8f 89       	ldd	r24, Y+23	; 0x17
    32d6:	98 8d       	ldd	r25, Y+24	; 0x18
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e8       	ldi	r20, 0x80	; 128
    32de:	5f e3       	ldi	r21, 0x3F	; 63
    32e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e4:	88 23       	and	r24, r24
    32e6:	2c f4       	brge	.+10     	; 0x32f2 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9c 8b       	std	Y+20, r25	; 0x14
    32ee:	8b 8b       	std	Y+19, r24	; 0x13
    32f0:	3f c0       	rjmp	.+126    	; 0x3370 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    32f2:	6d 89       	ldd	r22, Y+21	; 0x15
    32f4:	7e 89       	ldd	r23, Y+22	; 0x16
    32f6:	8f 89       	ldd	r24, Y+23	; 0x17
    32f8:	98 8d       	ldd	r25, Y+24	; 0x18
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	4f e7       	ldi	r20, 0x7F	; 127
    3300:	57 e4       	ldi	r21, 0x47	; 71
    3302:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3306:	18 16       	cp	r1, r24
    3308:	4c f5       	brge	.+82     	; 0x335c <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330a:	69 8d       	ldd	r22, Y+25	; 0x19
    330c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    330e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e2       	ldi	r20, 0x20	; 32
    3318:	51 e4       	ldi	r21, 0x41	; 65
    331a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9c 8b       	std	Y+20, r25	; 0x14
    3330:	8b 8b       	std	Y+19, r24	; 0x13
    3332:	0f c0       	rjmp	.+30     	; 0x3352 <LCD_displayCharacter+0x7be>
    3334:	88 ec       	ldi	r24, 0xC8	; 200
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9a 8b       	std	Y+18, r25	; 0x12
    333a:	89 8b       	std	Y+17, r24	; 0x11
    333c:	89 89       	ldd	r24, Y+17	; 0x11
    333e:	9a 89       	ldd	r25, Y+18	; 0x12
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	f1 f7       	brne	.-4      	; 0x3340 <LCD_displayCharacter+0x7ac>
    3344:	9a 8b       	std	Y+18, r25	; 0x12
    3346:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3348:	8b 89       	ldd	r24, Y+19	; 0x13
    334a:	9c 89       	ldd	r25, Y+20	; 0x14
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	9c 8b       	std	Y+20, r25	; 0x14
    3350:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3352:	8b 89       	ldd	r24, Y+19	; 0x13
    3354:	9c 89       	ldd	r25, Y+20	; 0x14
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	69 f7       	brne	.-38     	; 0x3334 <LCD_displayCharacter+0x7a0>
    335a:	14 c0       	rjmp	.+40     	; 0x3384 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335c:	6d 89       	ldd	r22, Y+21	; 0x15
    335e:	7e 89       	ldd	r23, Y+22	; 0x16
    3360:	8f 89       	ldd	r24, Y+23	; 0x17
    3362:	98 8d       	ldd	r25, Y+24	; 0x18
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	9c 8b       	std	Y+20, r25	; 0x14
    336e:	8b 8b       	std	Y+19, r24	; 0x13
    3370:	8b 89       	ldd	r24, Y+19	; 0x13
    3372:	9c 89       	ldd	r25, Y+20	; 0x14
    3374:	98 8b       	std	Y+16, r25	; 0x10
    3376:	8f 87       	std	Y+15, r24	; 0x0f
    3378:	8f 85       	ldd	r24, Y+15	; 0x0f
    337a:	98 89       	ldd	r25, Y+16	; 0x10
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <LCD_displayCharacter+0x7e8>
    3380:	98 8b       	std	Y+16, r25	; 0x10
    3382:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	61 e0       	ldi	r22, 0x01	; 1
    3388:	40 e0       	ldi	r20, 0x00	; 0
    338a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	a0 e8       	ldi	r26, 0x80	; 128
    3394:	bf e3       	ldi	r27, 0x3F	; 63
    3396:	8b 87       	std	Y+11, r24	; 0x0b
    3398:	9c 87       	std	Y+12, r25	; 0x0c
    339a:	ad 87       	std	Y+13, r26	; 0x0d
    339c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339e:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	4a ef       	ldi	r20, 0xFA	; 250
    33ac:	54 e4       	ldi	r21, 0x44	; 68
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	8f 83       	std	Y+7, r24	; 0x07
    33b8:	98 87       	std	Y+8, r25	; 0x08
    33ba:	a9 87       	std	Y+9, r26	; 0x09
    33bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33be:	6f 81       	ldd	r22, Y+7	; 0x07
    33c0:	78 85       	ldd	r23, Y+8	; 0x08
    33c2:	89 85       	ldd	r24, Y+9	; 0x09
    33c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	40 e8       	ldi	r20, 0x80	; 128
    33cc:	5f e3       	ldi	r21, 0x3F	; 63
    33ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33d2:	88 23       	and	r24, r24
    33d4:	2c f4       	brge	.+10     	; 0x33e0 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	9e 83       	std	Y+6, r25	; 0x06
    33dc:	8d 83       	std	Y+5, r24	; 0x05
    33de:	3f c0       	rjmp	.+126    	; 0x345e <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    33e0:	6f 81       	ldd	r22, Y+7	; 0x07
    33e2:	78 85       	ldd	r23, Y+8	; 0x08
    33e4:	89 85       	ldd	r24, Y+9	; 0x09
    33e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	3f ef       	ldi	r19, 0xFF	; 255
    33ec:	4f e7       	ldi	r20, 0x7F	; 127
    33ee:	57 e4       	ldi	r21, 0x47	; 71
    33f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33f4:	18 16       	cp	r1, r24
    33f6:	4c f5       	brge	.+82     	; 0x344a <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    33fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e2       	ldi	r20, 0x20	; 32
    3406:	51 e4       	ldi	r21, 0x41	; 65
    3408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	9e 83       	std	Y+6, r25	; 0x06
    341e:	8d 83       	std	Y+5, r24	; 0x05
    3420:	0f c0       	rjmp	.+30     	; 0x3440 <LCD_displayCharacter+0x8ac>
    3422:	88 ec       	ldi	r24, 0xC8	; 200
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9c 83       	std	Y+4, r25	; 0x04
    3428:	8b 83       	std	Y+3, r24	; 0x03
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	9c 81       	ldd	r25, Y+4	; 0x04
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <LCD_displayCharacter+0x89a>
    3432:	9c 83       	std	Y+4, r25	; 0x04
    3434:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	9e 81       	ldd	r25, Y+6	; 0x06
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	9e 83       	std	Y+6, r25	; 0x06
    343e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3440:	8d 81       	ldd	r24, Y+5	; 0x05
    3442:	9e 81       	ldd	r25, Y+6	; 0x06
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	69 f7       	brne	.-38     	; 0x3422 <LCD_displayCharacter+0x88e>
    3448:	14 c0       	rjmp	.+40     	; 0x3472 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344a:	6f 81       	ldd	r22, Y+7	; 0x07
    344c:	78 85       	ldd	r23, Y+8	; 0x08
    344e:	89 85       	ldd	r24, Y+9	; 0x09
    3450:	9a 85       	ldd	r25, Y+10	; 0x0a
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	9e 83       	std	Y+6, r25	; 0x06
    345c:	8d 83       	std	Y+5, r24	; 0x05
    345e:	8d 81       	ldd	r24, Y+5	; 0x05
    3460:	9e 81       	ldd	r25, Y+6	; 0x06
    3462:	9a 83       	std	Y+2, r25	; 0x02
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	9a 81       	ldd	r25, Y+2	; 0x02
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <LCD_displayCharacter+0x8d6>
    346e:	9a 83       	std	Y+2, r25	; 0x02
    3470:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3472:	cd 59       	subi	r28, 0x9D	; 157
    3474:	df 4f       	sbci	r29, 0xFF	; 255
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	08 95       	ret

0000348a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    348a:	df 93       	push	r29
    348c:	cf 93       	push	r28
    348e:	00 d0       	rcall	.+0      	; 0x3490 <LCD_displayString+0x6>
    3490:	0f 92       	push	r0
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	9b 83       	std	Y+3, r25	; 0x03
    3498:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    349a:	19 82       	std	Y+1, r1	; 0x01
    349c:	0e c0       	rjmp	.+28     	; 0x34ba <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	28 2f       	mov	r18, r24
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	9b 81       	ldd	r25, Y+3	; 0x03
    34a8:	fc 01       	movw	r30, r24
    34aa:	e2 0f       	add	r30, r18
    34ac:	f3 1f       	adc	r31, r19
    34ae:	80 81       	ld	r24, Z
    34b0:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <LCD_displayCharacter>
		i++;
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	8f 5f       	subi	r24, 0xFF	; 255
    34b8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	28 2f       	mov	r18, r24
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	9b 81       	ldd	r25, Y+3	; 0x03
    34c4:	fc 01       	movw	r30, r24
    34c6:	e2 0f       	add	r30, r18
    34c8:	f3 1f       	adc	r31, r19
    34ca:	80 81       	ld	r24, Z
    34cc:	88 23       	and	r24, r24
    34ce:	39 f7       	brne	.-50     	; 0x349e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <LCD_moveCursor+0x6>
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <LCD_moveCursor+0x8>
    34e4:	0f 92       	push	r0
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	8a 83       	std	Y+2, r24	; 0x02
    34ec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	3d 83       	std	Y+5, r19	; 0x05
    34f6:	2c 83       	std	Y+4, r18	; 0x04
    34f8:	8c 81       	ldd	r24, Y+4	; 0x04
    34fa:	9d 81       	ldd	r25, Y+5	; 0x05
    34fc:	81 30       	cpi	r24, 0x01	; 1
    34fe:	91 05       	cpc	r25, r1
    3500:	c1 f0       	breq	.+48     	; 0x3532 <LCD_moveCursor+0x56>
    3502:	2c 81       	ldd	r18, Y+4	; 0x04
    3504:	3d 81       	ldd	r19, Y+5	; 0x05
    3506:	22 30       	cpi	r18, 0x02	; 2
    3508:	31 05       	cpc	r19, r1
    350a:	2c f4       	brge	.+10     	; 0x3516 <LCD_moveCursor+0x3a>
    350c:	8c 81       	ldd	r24, Y+4	; 0x04
    350e:	9d 81       	ldd	r25, Y+5	; 0x05
    3510:	00 97       	sbiw	r24, 0x00	; 0
    3512:	61 f0       	breq	.+24     	; 0x352c <LCD_moveCursor+0x50>
    3514:	19 c0       	rjmp	.+50     	; 0x3548 <LCD_moveCursor+0x6c>
    3516:	2c 81       	ldd	r18, Y+4	; 0x04
    3518:	3d 81       	ldd	r19, Y+5	; 0x05
    351a:	22 30       	cpi	r18, 0x02	; 2
    351c:	31 05       	cpc	r19, r1
    351e:	69 f0       	breq	.+26     	; 0x353a <LCD_moveCursor+0x5e>
    3520:	8c 81       	ldd	r24, Y+4	; 0x04
    3522:	9d 81       	ldd	r25, Y+5	; 0x05
    3524:	83 30       	cpi	r24, 0x03	; 3
    3526:	91 05       	cpc	r25, r1
    3528:	61 f0       	breq	.+24     	; 0x3542 <LCD_moveCursor+0x66>
    352a:	0e c0       	rjmp	.+28     	; 0x3548 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	0b c0       	rjmp	.+22     	; 0x3548 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3532:	8b 81       	ldd	r24, Y+3	; 0x03
    3534:	80 5c       	subi	r24, 0xC0	; 192
    3536:	89 83       	std	Y+1, r24	; 0x01
    3538:	07 c0       	rjmp	.+14     	; 0x3548 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	80 5f       	subi	r24, 0xF0	; 240
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	03 c0       	rjmp	.+6      	; 0x3548 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	80 5b       	subi	r24, 0xB0	; 176
    3546:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	80 68       	ori	r24, 0x80	; 128
    354c:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
}
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <LCD_displayStringRowColumn+0x6>
    3566:	00 d0       	rcall	.+0      	; 0x3568 <LCD_displayStringRowColumn+0x8>
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	6a 83       	std	Y+2, r22	; 0x02
    3570:	5c 83       	std	Y+4, r21	; 0x04
    3572:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	6a 81       	ldd	r22, Y+2	; 0x02
    3578:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	9c 81       	ldd	r25, Y+4	; 0x04
    3580:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
}
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	08 95       	ret

00003592 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    359a:	62 97       	sbiw	r28, 0x12	; 18
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
    35a6:	9a 8b       	std	Y+18, r25	; 0x12
    35a8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    35aa:	89 89       	ldd	r24, Y+17	; 0x11
    35ac:	9a 89       	ldd	r25, Y+18	; 0x12
    35ae:	9e 01       	movw	r18, r28
    35b0:	2f 5f       	subi	r18, 0xFF	; 255
    35b2:	3f 4f       	sbci	r19, 0xFF	; 255
    35b4:	b9 01       	movw	r22, r18
    35b6:	4a e0       	ldi	r20, 0x0A	; 10
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <itoa>
   LCD_displayString(buff); /* Display the string */
    35be:	ce 01       	movw	r24, r28
    35c0:	01 96       	adiw	r24, 0x01	; 1
    35c2:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
}
    35c6:	62 96       	adiw	r28, 0x12	; 18
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	08 95       	ret

000035d8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    35d8:	df 93       	push	r29
    35da:	cf 93       	push	r28
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	0e 94 4f 11 	call	0x229e	; 0x229e <LCD_sendCommand>
}
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <LED_init>:
#include "led.h"

#include "../../mcal/atmega32_gpio.h"

void LED_init(LED* led)
{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <LED_init+0x6>
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	9a 83       	std	Y+2, r25	; 0x02
    35f8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(led->portID, led->pinID, PIN_OUTPUT);
    35fa:	e9 81       	ldd	r30, Y+1	; 0x01
    35fc:	fa 81       	ldd	r31, Y+2	; 0x02
    35fe:	80 81       	ld	r24, Z
    3600:	e9 81       	ldd	r30, Y+1	; 0x01
    3602:	fa 81       	ldd	r31, Y+2	; 0x02
    3604:	91 81       	ldd	r25, Z+1	; 0x01
    3606:	69 2f       	mov	r22, r25
    3608:	41 e0       	ldi	r20, 0x01	; 1
    360a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <LED_on>:
void LED_on(LED* led)
{
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	00 d0       	rcall	.+0      	; 0x361e <LED_on+0x6>
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	9a 83       	std	Y+2, r25	; 0x02
    3624:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(led->portID, led->pinID, LOGIC_HIGH);
    3626:	e9 81       	ldd	r30, Y+1	; 0x01
    3628:	fa 81       	ldd	r31, Y+2	; 0x02
    362a:	80 81       	ld	r24, Z
    362c:	e9 81       	ldd	r30, Y+1	; 0x01
    362e:	fa 81       	ldd	r31, Y+2	; 0x02
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	69 2f       	mov	r22, r25
    3634:	41 e0       	ldi	r20, 0x01	; 1
    3636:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <LED_off>:
void LED_off(LED* led)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	00 d0       	rcall	.+0      	; 0x364a <LED_off+0x6>
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	9a 83       	std	Y+2, r25	; 0x02
    3650:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(led->portID, led->pinID, LOGIC_LOW);
    3652:	e9 81       	ldd	r30, Y+1	; 0x01
    3654:	fa 81       	ldd	r31, Y+2	; 0x02
    3656:	80 81       	ld	r24, Z
    3658:	e9 81       	ldd	r30, Y+1	; 0x01
    365a:	fa 81       	ldd	r31, Y+2	; 0x02
    365c:	91 81       	ldd	r25, Z+1	; 0x01
    365e:	69 2f       	mov	r22, r25
    3660:	40 e0       	ldi	r20, 0x00	; 0
    3662:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <SOLENOID_init>:
#include "solenoid_lock.h"

#include "../../mcal/atmega32_gpio.h"

void SOLENOID_init(SolenoidLock* lock)
{
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	00 d0       	rcall	.+0      	; 0x3676 <SOLENOID_init+0x6>
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(lock->portID, lock->pinID, PIN_OUTPUT);
    367e:	e9 81       	ldd	r30, Y+1	; 0x01
    3680:	fa 81       	ldd	r31, Y+2	; 0x02
    3682:	80 81       	ld	r24, Z
    3684:	e9 81       	ldd	r30, Y+1	; 0x01
    3686:	fa 81       	ldd	r31, Y+2	; 0x02
    3688:	91 81       	ldd	r25, Z+1	; 0x01
    368a:	69 2f       	mov	r22, r25
    368c:	41 e0       	ldi	r20, 0x01	; 1
    368e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	08 95       	ret

0000369c <SOLENOID_on>:
void SOLENOID_on(SolenoidLock* lock)
{
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	00 d0       	rcall	.+0      	; 0x36a2 <SOLENOID_on+0x6>
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	9a 83       	std	Y+2, r25	; 0x02
    36a8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(lock->portID, lock->pinID, LOGIC_HIGH);
    36aa:	e9 81       	ldd	r30, Y+1	; 0x01
    36ac:	fa 81       	ldd	r31, Y+2	; 0x02
    36ae:	80 81       	ld	r24, Z
    36b0:	e9 81       	ldd	r30, Y+1	; 0x01
    36b2:	fa 81       	ldd	r31, Y+2	; 0x02
    36b4:	91 81       	ldd	r25, Z+1	; 0x01
    36b6:	69 2f       	mov	r22, r25
    36b8:	41 e0       	ldi	r20, 0x01	; 1
    36ba:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	08 95       	ret

000036c8 <SOLENOID_off>:
void SOLENOID_off(SolenoidLock* lock)
{
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <SOLENOID_off+0x6>
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	9a 83       	std	Y+2, r25	; 0x02
    36d4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(lock->portID, lock->pinID, LOGIC_LOW);
    36d6:	e9 81       	ldd	r30, Y+1	; 0x01
    36d8:	fa 81       	ldd	r31, Y+2	; 0x02
    36da:	80 81       	ld	r24, Z
    36dc:	e9 81       	ldd	r30, Y+1	; 0x01
    36de:	fa 81       	ldd	r31, Y+2	; 0x02
    36e0:	91 81       	ldd	r25, Z+1	; 0x01
    36e2:	69 2f       	mov	r22, r25
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    36ea:	0f 90       	pop	r0
    36ec:	0f 90       	pop	r0
    36ee:	cf 91       	pop	r28
    36f0:	df 91       	pop	r29
    36f2:	08 95       	ret

000036f4 <SOLENOID_read>:
uint8 SOLENOID_read(SolenoidLock* lock)
{
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	00 d0       	rcall	.+0      	; 0x36fa <SOLENOID_read+0x6>
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
    36fe:	9a 83       	std	Y+2, r25	; 0x02
    3700:	89 83       	std	Y+1, r24	; 0x01
	return GPIO_readPin(lock->portID, lock->pinID);
    3702:	e9 81       	ldd	r30, Y+1	; 0x01
    3704:	fa 81       	ldd	r31, Y+2	; 0x02
    3706:	80 81       	ld	r24, Z
    3708:	e9 81       	ldd	r30, Y+1	; 0x01
    370a:	fa 81       	ldd	r31, Y+2	; 0x02
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	69 2f       	mov	r22, r25
    3710:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	08 95       	ret

0000371e <floodHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void floodHandler()
{
    371e:	df 93       	push	r29
    3720:	cf 93       	push	r28
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
	if(WATER_read())
    3726:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <WATER_read>
    372a:	88 23       	and	r24, r24
    372c:	79 f0       	breq	.+30     	; 0x374c <floodHandler+0x2e>
	{
		DCMOTOR_on(&g_waterPump2);
    372e:	81 ef       	ldi	r24, 0xF1	; 241
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DCMOTOR_on>
		g_threatFlag |= (1<<FLOOD_THREAT);
    3736:	80 91 24 01 	lds	r24, 0x0124
    373a:	84 60       	ori	r24, 0x04	; 4
    373c:	80 93 24 01 	sts	0x0124, r24
		INTERRUPT_INT2_init(floodHandler, FALLING);
    3740:	8f e8       	ldi	r24, 0x8F	; 143
    3742:	9b e1       	ldi	r25, 0x1B	; 27
    3744:	62 e0       	ldi	r22, 0x02	; 2
    3746:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <INTERRUPT_INT2_init>
    374a:	0e c0       	rjmp	.+28     	; 0x3768 <floodHandler+0x4a>
	}
	else
	{
		DCMOTOR_off(&g_waterPump2);
    374c:	81 ef       	ldi	r24, 0xF1	; 241
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <DCMOTOR_off>
		g_threatFlag &= ~(1<<FLOOD_THREAT);
    3754:	80 91 24 01 	lds	r24, 0x0124
    3758:	8b 7f       	andi	r24, 0xFB	; 251
    375a:	80 93 24 01 	sts	0x0124, r24
		INTERRUPT_INT2_init(floodHandler, RISING);
    375e:	8f e8       	ldi	r24, 0x8F	; 143
    3760:	9b e1       	ldi	r25, 0x1B	; 27
    3762:	63 e0       	ldi	r22, 0x03	; 3
    3764:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <INTERRUPT_INT2_init>
	}
}
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <WATER_FLOOD_SYSTEM_Init>:

void WATER_FLOOD_SYSTEM_Init()
{
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Water Flood System */
	WATER_init();
    3776:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <WATER_init>
	INTERRUPT_INT2_init(floodHandler, RISING);
    377a:	8f e8       	ldi	r24, 0x8F	; 143
    377c:	9b e1       	ldi	r25, 0x1B	; 27
    377e:	63 e0       	ldi	r22, 0x03	; 3
    3780:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <INTERRUPT_INT2_init>
	DCMOTOR_init(&g_waterPump2);
    3784:	81 ef       	ldi	r24, 0xF1	; 241
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <DCMOTOR_init>
}
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <lockDoor>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

static void lockDoor() {
    3792:	df 93       	push	r29
    3794:	cf 93       	push	r28
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
	SOLENOID_on(&g_lock);
    379a:	83 ef       	ldi	r24, 0xF3	; 243
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	0e 94 4e 1b 	call	0x369c	; 0x369c <SOLENOID_on>
	Comm_HandleSend(DOOR_CLOSED);
    37a2:	85 e0       	ldi	r24, 0x05	; 5
    37a4:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <Comm_HandleSend>
}
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	08 95       	ret

000037ae <unlockDoor>:

static void unlockDoor() {
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
	SOLENOID_off(&g_lock);
    37b6:	83 ef       	ldi	r24, 0xF3	; 243
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <SOLENOID_off>
	Comm_HandleSend(DOOR_OPENED);
    37be:	85 e4       	ldi	r24, 0x45	; 69
    37c0:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <Comm_HandleSend>
}
    37c4:	cf 91       	pop	r28
    37c6:	df 91       	pop	r29
    37c8:	08 95       	ret

000037ca <setLcdDelay>:

static void setLcdDelay(uint8 seconds) {
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	0f 92       	push	r0
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	89 83       	std	Y+1, r24	; 0x01
	g_lcdDelay = seconds;
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	80 93 1f 01 	sts	0x011F, r24
	g_lcdDelayFlag = TRUE;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	80 93 22 01 	sts	0x0122, r24
	TIMER2_on();
    37e2:	0e 94 ad 0b 	call	0x175a	; 0x175a <TIMER2_on>
}
    37e6:	0f 90       	pop	r0
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <setMode>:

void setMode(PinMode mode, uint8 quickMsg) {
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	28 97       	sbiw	r28, 0x08	; 8
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	89 83       	std	Y+1, r24	; 0x01
    3804:	6a 83       	std	Y+2, r22	; 0x02
	g_mode = mode;
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	80 93 21 01 	sts	0x0121, r24
	LCD_clearScreen();
    380c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <LCD_clearScreen>
	switch (mode) {
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	28 2f       	mov	r18, r24
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	38 87       	std	Y+8, r19	; 0x08
    3818:	2f 83       	std	Y+7, r18	; 0x07
    381a:	8f 81       	ldd	r24, Y+7	; 0x07
    381c:	98 85       	ldd	r25, Y+8	; 0x08
    381e:	81 30       	cpi	r24, 0x01	; 1
    3820:	91 05       	cpc	r25, r1
    3822:	09 f4       	brne	.+2      	; 0x3826 <setMode+0x38>
    3824:	4d c0       	rjmp	.+154    	; 0x38c0 <setMode+0xd2>
    3826:	2f 81       	ldd	r18, Y+7	; 0x07
    3828:	38 85       	ldd	r19, Y+8	; 0x08
    382a:	22 30       	cpi	r18, 0x02	; 2
    382c:	31 05       	cpc	r19, r1
    382e:	2c f4       	brge	.+10     	; 0x383a <setMode+0x4c>
    3830:	8f 81       	ldd	r24, Y+7	; 0x07
    3832:	98 85       	ldd	r25, Y+8	; 0x08
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	71 f0       	breq	.+28     	; 0x3854 <setMode+0x66>
    3838:	8a c0       	rjmp	.+276    	; 0x394e <setMode+0x160>
    383a:	2f 81       	ldd	r18, Y+7	; 0x07
    383c:	38 85       	ldd	r19, Y+8	; 0x08
    383e:	22 30       	cpi	r18, 0x02	; 2
    3840:	31 05       	cpc	r19, r1
    3842:	09 f4       	brne	.+2      	; 0x3846 <setMode+0x58>
    3844:	44 c0       	rjmp	.+136    	; 0x38ce <setMode+0xe0>
    3846:	8f 81       	ldd	r24, Y+7	; 0x07
    3848:	98 85       	ldd	r25, Y+8	; 0x08
    384a:	83 30       	cpi	r24, 0x03	; 3
    384c:	91 05       	cpc	r25, r1
    384e:	09 f4       	brne	.+2      	; 0x3852 <setMode+0x64>
    3850:	63 c0       	rjmp	.+198    	; 0x3918 <setMode+0x12a>
    3852:	7d c0       	rjmp	.+250    	; 0x394e <setMode+0x160>
	case NORMAL_LOCKED:
		lockDoor();
    3854:	0e 94 c9 1b 	call	0x3792	; 0x3792 <lockDoor>
		switch (quickMsg) {
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	28 2f       	mov	r18, r24
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	3e 83       	std	Y+6, r19	; 0x06
    3860:	2d 83       	std	Y+5, r18	; 0x05
    3862:	8d 81       	ldd	r24, Y+5	; 0x05
    3864:	9e 81       	ldd	r25, Y+6	; 0x06
    3866:	82 30       	cpi	r24, 0x02	; 2
    3868:	91 05       	cpc	r25, r1
    386a:	91 f0       	breq	.+36     	; 0x3890 <setMode+0xa2>
    386c:	2d 81       	ldd	r18, Y+5	; 0x05
    386e:	3e 81       	ldd	r19, Y+6	; 0x06
    3870:	23 30       	cpi	r18, 0x03	; 3
    3872:	31 05       	cpc	r19, r1
    3874:	a9 f0       	breq	.+42     	; 0x38a0 <setMode+0xb2>
    3876:	8d 81       	ldd	r24, Y+5	; 0x05
    3878:	9e 81       	ldd	r25, Y+6	; 0x06
    387a:	81 30       	cpi	r24, 0x01	; 1
    387c:	91 05       	cpc	r25, r1
    387e:	d9 f4       	brne	.+54     	; 0x38b6 <setMode+0xc8>
		case 1:
			LCD_displayString("Door Locked");
    3880:	80 e6       	ldi	r24, 0x60	; 96
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
			setLcdDelay(2);
    3888:	82 e0       	ldi	r24, 0x02	; 2
    388a:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <setLcdDelay>
    388e:	5f c0       	rjmp	.+190    	; 0x394e <setMode+0x160>
			break;
		case 2:
			LCD_displayString("Access Denied");
    3890:	8c e6       	ldi	r24, 0x6C	; 108
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
			setLcdDelay(2);
    3898:	82 e0       	ldi	r24, 0x02	; 2
    389a:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <setLcdDelay>
    389e:	57 c0       	rjmp	.+174    	; 0x394e <setMode+0x160>
			break;
		case 3:
			LCD_displayString("Access Granted");
    38a0:	8a e7       	ldi	r24, 0x7A	; 122
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
			g_mode = NORMAL_UNLOCKED;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	80 93 21 01 	sts	0x0121, r24
			setLcdDelay(2);
    38ae:	82 e0       	ldi	r24, 0x02	; 2
    38b0:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <setLcdDelay>
    38b4:	4c c0       	rjmp	.+152    	; 0x394e <setMode+0x160>
			break;
		case 0:
		default:
			LCD_displayString("Enter Pin: ");
    38b6:	89 e8       	ldi	r24, 0x89	; 137
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
    38be:	47 c0       	rjmp	.+142    	; 0x394e <setMode+0x160>
			break;
		}
		break;
	case NORMAL_UNLOCKED:
		unlockDoor();
    38c0:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <unlockDoor>
		LCD_displayString("Door Unlocked");
    38c4:	85 e9       	ldi	r24, 0x95	; 149
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
    38cc:	40 c0       	rjmp	.+128    	; 0x394e <setMode+0x160>
		break;
	case CHANGE_OLD:
		switch (quickMsg) {
    38ce:	8a 81       	ldd	r24, Y+2	; 0x02
    38d0:	28 2f       	mov	r18, r24
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	3c 83       	std	Y+4, r19	; 0x04
    38d6:	2b 83       	std	Y+3, r18	; 0x03
    38d8:	8b 81       	ldd	r24, Y+3	; 0x03
    38da:	9c 81       	ldd	r25, Y+4	; 0x04
    38dc:	81 30       	cpi	r24, 0x01	; 1
    38de:	91 05       	cpc	r25, r1
    38e0:	31 f0       	breq	.+12     	; 0x38ee <setMode+0x100>
    38e2:	2b 81       	ldd	r18, Y+3	; 0x03
    38e4:	3c 81       	ldd	r19, Y+4	; 0x04
    38e6:	22 30       	cpi	r18, 0x02	; 2
    38e8:	31 05       	cpc	r19, r1
    38ea:	31 f0       	breq	.+12     	; 0x38f8 <setMode+0x10a>
    38ec:	10 c0       	rjmp	.+32     	; 0x390e <setMode+0x120>
		case 1:
			LCD_displayString("Incorrect Pin");
    38ee:	83 ea       	ldi	r24, 0xA3	; 163
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
    38f6:	2b c0       	rjmp	.+86     	; 0x394e <setMode+0x160>
			break;
		case 2:
			LCD_displayString("Correct Pin");
    38f8:	81 eb       	ldi	r24, 0xB1	; 177
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
			g_mode = CHANGE_NEW;
    3900:	83 e0       	ldi	r24, 0x03	; 3
    3902:	80 93 21 01 	sts	0x0121, r24
			setLcdDelay(2);
    3906:	82 e0       	ldi	r24, 0x02	; 2
    3908:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <setLcdDelay>
    390c:	20 c0       	rjmp	.+64     	; 0x394e <setMode+0x160>
			break;
		case 0:
		default:
			LCD_displayString("Enter Old Pin: ");
    390e:	8d eb       	ldi	r24, 0xBD	; 189
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
    3916:	1b c0       	rjmp	.+54     	; 0x394e <setMode+0x160>
			break;
		}
		break;
	case CHANGE_NEW:
		if (quickMsg) {
    3918:	8a 81       	ldd	r24, Y+2	; 0x02
    391a:	88 23       	and	r24, r24
    391c:	a1 f0       	breq	.+40     	; 0x3946 <setMode+0x158>
			LCD_displayString("Pin Changed");
    391e:	8d ec       	ldi	r24, 0xCD	; 205
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
			if (SOLENOID_read(&g_lock) == 1) {
    3926:	83 ef       	ldi	r24, 0xF3	; 243
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <SOLENOID_read>
    392e:	81 30       	cpi	r24, 0x01	; 1
    3930:	19 f4       	brne	.+6      	; 0x3938 <setMode+0x14a>
				g_mode = NORMAL_LOCKED;
    3932:	10 92 21 01 	sts	0x0121, r1
    3936:	03 c0       	rjmp	.+6      	; 0x393e <setMode+0x150>
			} else {
				g_mode = NORMAL_UNLOCKED;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	80 93 21 01 	sts	0x0121, r24
			}
			setLcdDelay(2);
    393e:	82 e0       	ldi	r24, 0x02	; 2
    3940:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <setLcdDelay>
    3944:	04 c0       	rjmp	.+8      	; 0x394e <setMode+0x160>
		} else {
			LCD_displayString("Enter New Pin: ");
    3946:	89 ed       	ldi	r24, 0xD9	; 217
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 45 1a 	call	0x348a	; 0x348a <LCD_displayString>
		}
		break;
	default:
		break;
	}
	LCD_moveCursor(1, 0);
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	60 e0       	ldi	r22, 0x00	; 0
    3952:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <LCD_moveCursor>
	g_pinCount = 0;
    3956:	10 92 1e 01 	sts	0x011E, r1
}
    395a:	28 96       	adiw	r28, 0x08	; 8
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	08 95       	ret

0000396c <lcdDelayHandler>:

static void lcdDelayHandler() {
    396c:	df 93       	push	r29
    396e:	cf 93       	push	r28
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
	g_lcdTimerCount++;
    3974:	80 91 18 01 	lds	r24, 0x0118
    3978:	90 91 19 01 	lds	r25, 0x0119
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	90 93 19 01 	sts	0x0119, r25
    3982:	80 93 18 01 	sts	0x0118, r24
	if (g_lcdTimerCount == g_lcdDelay * 30) {
    3986:	80 91 1f 01 	lds	r24, 0x011F
    398a:	28 2f       	mov	r18, r24
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	c9 01       	movw	r24, r18
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	82 0f       	add	r24, r18
    3996:	93 1f       	adc	r25, r19
    3998:	9c 01       	movw	r18, r24
    399a:	22 0f       	add	r18, r18
    399c:	33 1f       	adc	r19, r19
    399e:	22 0f       	add	r18, r18
    39a0:	33 1f       	adc	r19, r19
    39a2:	82 0f       	add	r24, r18
    39a4:	93 1f       	adc	r25, r19
    39a6:	88 0f       	add	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	9c 01       	movw	r18, r24
    39ac:	80 91 18 01 	lds	r24, 0x0118
    39b0:	90 91 19 01 	lds	r25, 0x0119
    39b4:	28 17       	cp	r18, r24
    39b6:	39 07       	cpc	r19, r25
    39b8:	69 f4       	brne	.+26     	; 0x39d4 <lcdDelayHandler+0x68>
		TIMER2_off();
    39ba:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIMER2_off>
		g_lcdDelayFlag = FALSE;
    39be:	10 92 22 01 	sts	0x0122, r1
		g_lcdTimerCount = 0;
    39c2:	10 92 19 01 	sts	0x0119, r1
    39c6:	10 92 18 01 	sts	0x0118, r1
		setMode(g_mode, 0);
    39ca:	80 91 21 01 	lds	r24, 0x0121
    39ce:	60 e0       	ldi	r22, 0x00	; 0
    39d0:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
	}
}
    39d4:	cf 91       	pop	r28
    39d6:	df 91       	pop	r29
    39d8:	08 95       	ret

000039da <setPin>:

static void setPin() {
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	0f 92       	push	r0
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	EEPROM_write(0x000, 1);
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	61 e0       	ldi	r22, 0x01	; 1
    39ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_write>
	for (i = 0; i < 4; i++) {
    39ee:	19 82       	std	Y+1, r1	; 0x01
    39f0:	21 c0       	rjmp	.+66     	; 0x3a34 <setPin+0x5a>
		EEPROM_write(i + 1, g_enteredPin[i]);
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	88 2f       	mov	r24, r24
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	ac 01       	movw	r20, r24
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	88 2f       	mov	r24, r24
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	fc 01       	movw	r30, r24
    3a04:	eb 5d       	subi	r30, 0xDB	; 219
    3a06:	fe 4f       	sbci	r31, 0xFE	; 254
    3a08:	20 81       	ld	r18, Z
    3a0a:	ca 01       	movw	r24, r20
    3a0c:	62 2f       	mov	r22, r18
    3a0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_write>
		g_correctPin[i] = g_enteredPin[i];
    3a12:	89 81       	ldd	r24, Y+1	; 0x01
    3a14:	28 2f       	mov	r18, r24
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	88 2f       	mov	r24, r24
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	fc 01       	movw	r30, r24
    3a20:	eb 5d       	subi	r30, 0xDB	; 219
    3a22:	fe 4f       	sbci	r31, 0xFE	; 254
    3a24:	80 81       	ld	r24, Z
    3a26:	f9 01       	movw	r30, r18
    3a28:	e6 5e       	subi	r30, 0xE6	; 230
    3a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2c:	80 83       	st	Z, r24
}

static void setPin() {
	uint8 i;
	EEPROM_write(0x000, 1);
	for (i = 0; i < 4; i++) {
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	8f 5f       	subi	r24, 0xFF	; 255
    3a32:	89 83       	std	Y+1, r24	; 0x01
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	84 30       	cpi	r24, 0x04	; 4
    3a38:	e0 f2       	brcs	.-72     	; 0x39f2 <setPin+0x18>
		EEPROM_write(i + 1, g_enteredPin[i]);
		g_correctPin[i] = g_enteredPin[i];
	}
	g_pinCount = 0;
    3a3a:	10 92 1e 01 	sts	0x011E, r1
	setMode(CHANGE_NEW, 1);
    3a3e:	83 e0       	ldi	r24, 0x03	; 3
    3a40:	61 e0       	ldi	r22, 0x01	; 1
    3a42:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
}
    3a46:	0f 90       	pop	r0
    3a48:	cf 91       	pop	r28
    3a4a:	df 91       	pop	r29
    3a4c:	08 95       	ret

00003a4e <getPin>:

static void getPin() {
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	df 93       	push	r29
    3a54:	cf 93       	push	r28
    3a56:	00 d0       	rcall	.+0      	; 0x3a58 <getPin+0xa>
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
	uint8 pinChanged = EEPROM_read(0x000);
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	0e 94 d3 05 	call	0xba6	; 0xba6 <EEPROM_read>
    3a64:	8a 83       	std	Y+2, r24	; 0x02
	if (pinChanged == 1) {
    3a66:	8a 81       	ldd	r24, Y+2	; 0x02
    3a68:	81 30       	cpi	r24, 0x01	; 1
    3a6a:	c1 f4       	brne	.+48     	; 0x3a9c <getPin+0x4e>
		uint8 i;
		for (i = 1; i <= 4; i++) {
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	89 83       	std	Y+1, r24	; 0x01
    3a70:	12 c0       	rjmp	.+36     	; 0x3a96 <getPin+0x48>
			g_correctPin[i - 1] = EEPROM_read(i);
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	88 2f       	mov	r24, r24
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	8c 01       	movw	r16, r24
    3a7a:	01 50       	subi	r16, 0x01	; 1
    3a7c:	10 40       	sbci	r17, 0x00	; 0
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	88 2f       	mov	r24, r24
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	0e 94 d3 05 	call	0xba6	; 0xba6 <EEPROM_read>
    3a88:	f8 01       	movw	r30, r16
    3a8a:	e6 5e       	subi	r30, 0xE6	; 230
    3a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a8e:	80 83       	st	Z, r24

static void getPin() {
	uint8 pinChanged = EEPROM_read(0x000);
	if (pinChanged == 1) {
		uint8 i;
		for (i = 1; i <= 4; i++) {
    3a90:	89 81       	ldd	r24, Y+1	; 0x01
    3a92:	8f 5f       	subi	r24, 0xFF	; 255
    3a94:	89 83       	std	Y+1, r24	; 0x01
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
    3a98:	85 30       	cpi	r24, 0x05	; 5
    3a9a:	58 f3       	brcs	.-42     	; 0x3a72 <getPin+0x24>
			g_correctPin[i - 1] = EEPROM_read(i);
		}
	}
}
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	cf 91       	pop	r28
    3aa2:	df 91       	pop	r29
    3aa4:	1f 91       	pop	r17
    3aa6:	0f 91       	pop	r16
    3aa8:	08 95       	ret

00003aaa <checkPin>:

static void checkPin() {
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	00 d0       	rcall	.+0      	; 0x3ab0 <checkPin+0x6>
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	boolean isValid = TRUE;
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	89 83       	std	Y+1, r24	; 0x01
	for (i = 0; i < 4; i++) {
    3ab8:	1a 82       	std	Y+2, r1	; 0x02
    3aba:	14 c0       	rjmp	.+40     	; 0x3ae4 <checkPin+0x3a>
		if (g_enteredPin[i] != g_correctPin[i])
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	88 2f       	mov	r24, r24
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	eb 5d       	subi	r30, 0xDB	; 219
    3ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ac8:	20 81       	ld	r18, Z
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	88 2f       	mov	r24, r24
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	fc 01       	movw	r30, r24
    3ad2:	e6 5e       	subi	r30, 0xE6	; 230
    3ad4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad6:	80 81       	ld	r24, Z
    3ad8:	28 17       	cp	r18, r24
    3ada:	09 f0       	breq	.+2      	; 0x3ade <checkPin+0x34>
			isValid = FALSE;
    3adc:	19 82       	std	Y+1, r1	; 0x01
}

static void checkPin() {
	uint8 i;
	boolean isValid = TRUE;
	for (i = 0; i < 4; i++) {
    3ade:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae0:	8f 5f       	subi	r24, 0xFF	; 255
    3ae2:	8a 83       	std	Y+2, r24	; 0x02
    3ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae6:	84 30       	cpi	r24, 0x04	; 4
    3ae8:	48 f3       	brcs	.-46     	; 0x3abc <checkPin+0x12>
		if (g_enteredPin[i] != g_correctPin[i])
			isValid = FALSE;
	}
	LCD_clearScreen();
    3aea:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <LCD_clearScreen>
	if (isValid == TRUE) {
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	81 30       	cpi	r24, 0x01	; 1
    3af2:	71 f4       	brne	.+28     	; 0x3b10 <checkPin+0x66>
		if (g_mode == CHANGE_OLD) {
    3af4:	80 91 21 01 	lds	r24, 0x0121
    3af8:	82 30       	cpi	r24, 0x02	; 2
    3afa:	29 f4       	brne	.+10     	; 0x3b06 <checkPin+0x5c>
			setMode(CHANGE_OLD, 2);
    3afc:	82 e0       	ldi	r24, 0x02	; 2
    3afe:	62 e0       	ldi	r22, 0x02	; 2
    3b00:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
    3b04:	12 c0       	rjmp	.+36     	; 0x3b2a <checkPin+0x80>
		} else {
			setMode(NORMAL_LOCKED, 3);
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	63 e0       	ldi	r22, 0x03	; 3
    3b0a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
    3b0e:	0d c0       	rjmp	.+26     	; 0x3b2a <checkPin+0x80>
		}
	} else {
		if (g_mode == CHANGE_OLD) {
    3b10:	80 91 21 01 	lds	r24, 0x0121
    3b14:	82 30       	cpi	r24, 0x02	; 2
    3b16:	29 f4       	brne	.+10     	; 0x3b22 <checkPin+0x78>
			setMode(CHANGE_OLD, 1);
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	61 e0       	ldi	r22, 0x01	; 1
    3b1c:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
    3b20:	04 c0       	rjmp	.+8      	; 0x3b2a <checkPin+0x80>
		} else {
			setMode(NORMAL_LOCKED, 2);
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	62 e0       	ldi	r22, 0x02	; 2
    3b26:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
		}
	}
	setLcdDelay(2);
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <setLcdDelay>
	g_pinCount = 0;
    3b30:	10 92 1e 01 	sts	0x011E, r1
}
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	08 95       	ret

00003b3e <inputKey>:

static void inputKey(uint8 key) {
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	2f 97       	sbiw	r28, 0x0f	; 15
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	f8 94       	cli
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	cd bf       	out	0x3d, r28	; 61
    3b52:	8f 87       	std	Y+15, r24	; 0x0f
	if (key >= 0 && key <= 9 && g_mode != NORMAL_UNLOCKED) {
    3b54:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b56:	8a 30       	cpi	r24, 0x0A	; 10
    3b58:	20 f5       	brcc	.+72     	; 0x3ba2 <inputKey+0x64>
    3b5a:	80 91 21 01 	lds	r24, 0x0121
    3b5e:	81 30       	cpi	r24, 0x01	; 1
    3b60:	01 f1       	breq	.+64     	; 0x3ba2 <inputKey+0x64>
		//		LCD_displayCharacter('*');
		LCD_intgerToString(key);
    3b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b64:	88 2f       	mov	r24, r24
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	0e 94 c9 1a 	call	0x3592	; 0x3592 <LCD_intgerToString>
		g_enteredPin[g_pinCount++] = key;
    3b6c:	20 91 1e 01 	lds	r18, 0x011E
    3b70:	82 2f       	mov	r24, r18
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	fc 01       	movw	r30, r24
    3b76:	eb 5d       	subi	r30, 0xDB	; 219
    3b78:	fe 4f       	sbci	r31, 0xFE	; 254
    3b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b7c:	80 83       	st	Z, r24
    3b7e:	82 2f       	mov	r24, r18
    3b80:	8f 5f       	subi	r24, 0xFF	; 255
    3b82:	80 93 1e 01 	sts	0x011E, r24
		if (g_pinCount == 4) {
    3b86:	80 91 1e 01 	lds	r24, 0x011E
    3b8a:	84 30       	cpi	r24, 0x04	; 4
    3b8c:	b9 f5       	brne	.+110    	; 0x3bfc <inputKey+0xbe>
			if (g_mode == CHANGE_NEW) {
    3b8e:	80 91 21 01 	lds	r24, 0x0121
    3b92:	83 30       	cpi	r24, 0x03	; 3
    3b94:	19 f4       	brne	.+6      	; 0x3b9c <inputKey+0x5e>
				setPin();
    3b96:	0e 94 ed 1c 	call	0x39da	; 0x39da <setPin>
    3b9a:	30 c0       	rjmp	.+96     	; 0x3bfc <inputKey+0xbe>
			} else {
				checkPin();
    3b9c:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <checkPin>
    3ba0:	2d c0       	rjmp	.+90     	; 0x3bfc <inputKey+0xbe>
			}
		}
	} else if (key == '#') {
    3ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba4:	83 32       	cpi	r24, 0x23	; 35
    3ba6:	e9 f4       	brne	.+58     	; 0x3be2 <inputKey+0xa4>
		if (g_mode == NORMAL_LOCKED || g_mode == NORMAL_UNLOCKED) {
    3ba8:	80 91 21 01 	lds	r24, 0x0121
    3bac:	88 23       	and	r24, r24
    3bae:	21 f0       	breq	.+8      	; 0x3bb8 <inputKey+0x7a>
    3bb0:	80 91 21 01 	lds	r24, 0x0121
    3bb4:	81 30       	cpi	r24, 0x01	; 1
    3bb6:	29 f4       	brne	.+10     	; 0x3bc2 <inputKey+0x84>
			setMode(CHANGE_OLD, 0);
    3bb8:	82 e0       	ldi	r24, 0x02	; 2
    3bba:	60 e0       	ldi	r22, 0x00	; 0
    3bbc:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
    3bc0:	1d c0       	rjmp	.+58     	; 0x3bfc <inputKey+0xbe>
		} else {
			if (SOLENOID_read(&g_lock) == 1) {
    3bc2:	83 ef       	ldi	r24, 0xF3	; 243
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <SOLENOID_read>
    3bca:	81 30       	cpi	r24, 0x01	; 1
    3bcc:	29 f4       	brne	.+10     	; 0x3bd8 <inputKey+0x9a>
				setMode(NORMAL_LOCKED, 0);
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	60 e0       	ldi	r22, 0x00	; 0
    3bd2:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
    3bd6:	12 c0       	rjmp	.+36     	; 0x3bfc <inputKey+0xbe>
			} else {
				setMode(NORMAL_UNLOCKED, 0);
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	60 e0       	ldi	r22, 0x00	; 0
    3bdc:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
    3be0:	0d c0       	rjmp	.+26     	; 0x3bfc <inputKey+0xbe>
			}
		}
	} else if (key == '*') {
    3be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3be4:	8a 32       	cpi	r24, 0x2A	; 42
    3be6:	51 f4       	brne	.+20     	; 0x3bfc <inputKey+0xbe>
		if (SOLENOID_read(&g_lock) == 0) {
    3be8:	83 ef       	ldi	r24, 0xF3	; 243
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <SOLENOID_read>
    3bf0:	88 23       	and	r24, r24
    3bf2:	21 f4       	brne	.+8      	; 0x3bfc <inputKey+0xbe>
			setMode(NORMAL_LOCKED, 1);
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	61 e0       	ldi	r22, 0x01	; 1
    3bf8:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	a6 e9       	ldi	r26, 0x96	; 150
    3c02:	b3 e4       	ldi	r27, 0x43	; 67
    3c04:	8b 87       	std	Y+11, r24	; 0x0b
    3c06:	9c 87       	std	Y+12, r25	; 0x0c
    3c08:	ad 87       	std	Y+13, r26	; 0x0d
    3c0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	4a ef       	ldi	r20, 0xFA	; 250
    3c1a:	54 e4       	ldi	r21, 0x44	; 68
    3c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	8f 83       	std	Y+7, r24	; 0x07
    3c26:	98 87       	std	Y+8, r25	; 0x08
    3c28:	a9 87       	std	Y+9, r26	; 0x09
    3c2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2e:	78 85       	ldd	r23, Y+8	; 0x08
    3c30:	89 85       	ldd	r24, Y+9	; 0x09
    3c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e8       	ldi	r20, 0x80	; 128
    3c3a:	5f e3       	ldi	r21, 0x3F	; 63
    3c3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c40:	88 23       	and	r24, r24
    3c42:	2c f4       	brge	.+10     	; 0x3c4e <inputKey+0x110>
		__ticks = 1;
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9e 83       	std	Y+6, r25	; 0x06
    3c4a:	8d 83       	std	Y+5, r24	; 0x05
    3c4c:	3f c0       	rjmp	.+126    	; 0x3ccc <inputKey+0x18e>
	else if (__tmp > 65535)
    3c4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c50:	78 85       	ldd	r23, Y+8	; 0x08
    3c52:	89 85       	ldd	r24, Y+9	; 0x09
    3c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	3f ef       	ldi	r19, 0xFF	; 255
    3c5a:	4f e7       	ldi	r20, 0x7F	; 127
    3c5c:	57 e4       	ldi	r21, 0x47	; 71
    3c5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c62:	18 16       	cp	r1, r24
    3c64:	4c f5       	brge	.+82     	; 0x3cb8 <inputKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e2       	ldi	r20, 0x20	; 32
    3c74:	51 e4       	ldi	r21, 0x41	; 65
    3c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	bc 01       	movw	r22, r24
    3c80:	cd 01       	movw	r24, r26
    3c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	9e 83       	std	Y+6, r25	; 0x06
    3c8c:	8d 83       	std	Y+5, r24	; 0x05
    3c8e:	0f c0       	rjmp	.+30     	; 0x3cae <inputKey+0x170>
    3c90:	88 ec       	ldi	r24, 0xC8	; 200
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	9c 83       	std	Y+4, r25	; 0x04
    3c96:	8b 83       	std	Y+3, r24	; 0x03
    3c98:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <inputKey+0x15e>
    3ca0:	9c 83       	std	Y+4, r25	; 0x04
    3ca2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	9e 83       	std	Y+6, r25	; 0x06
    3cac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cae:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	69 f7       	brne	.-38     	; 0x3c90 <inputKey+0x152>
    3cb6:	14 c0       	rjmp	.+40     	; 0x3ce0 <inputKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cba:	78 85       	ldd	r23, Y+8	; 0x08
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	9e 83       	std	Y+6, r25	; 0x06
    3cca:	8d 83       	std	Y+5, r24	; 0x05
    3ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cce:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd0:	9a 83       	std	Y+2, r25	; 0x02
    3cd2:	89 83       	std	Y+1, r24	; 0x01
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	f1 f7       	brne	.-4      	; 0x3cd8 <inputKey+0x19a>
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	_delay_ms(300);
}
    3ce0:	2f 96       	adiw	r28, 0x0f	; 15
    3ce2:	0f b6       	in	r0, 0x3f	; 63
    3ce4:	f8 94       	cli
    3ce6:	de bf       	out	0x3e, r29	; 62
    3ce8:	0f be       	out	0x3f, r0	; 63
    3cea:	cd bf       	out	0x3d, r28	; 61
    3cec:	cf 91       	pop	r28
    3cee:	df 91       	pop	r29
    3cf0:	08 95       	ret

00003cf2 <SMART_DOOR_LOCK_SYSTEM_Init>:

void SMART_DOOR_LOCK_SYSTEM_Init() {
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Door Lock System */
	LCD_init();
    3cfa:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_init>
	KEYPAD_init();
    3cfe:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <KEYPAD_init>
	SOLENOID_init(&g_lock);
    3d02:	83 ef       	ldi	r24, 0xF3	; 243
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	0e 94 38 1b 	call	0x3670	; 0x3670 <SOLENOID_init>
	SOLENOID_on(&g_lock);
    3d0a:	83 ef       	ldi	r24, 0xF3	; 243
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 4e 1b 	call	0x369c	; 0x369c <SOLENOID_on>
	getPin();
    3d12:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <getPin>
	setMode(NORMAL_LOCKED, 0);
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	60 e0       	ldi	r22, 0x00	; 0
    3d1a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>

	/* Initialize Timer2 */
	TIMER2_init(TMR2_1024);
    3d1e:	87 e0       	ldi	r24, 0x07	; 7
    3d20:	0e 94 93 0b 	call	0x1726	; 0x1726 <TIMER2_init>
	TIMER2_setCallback(lcdDelayHandler);
    3d24:	86 eb       	ldi	r24, 0xB6	; 182
    3d26:	9c e1       	ldi	r25, 0x1C	; 28
    3d28:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <TIMER2_setCallback>
	TIMER2_interruptEnable();
    3d2c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <TIMER2_interruptEnable>
}
    3d30:	cf 91       	pop	r28
    3d32:	df 91       	pop	r29
    3d34:	08 95       	ret

00003d36 <SMART_DOOR_LOCK_SYSTEM_Listener>:

void SMART_DOOR_LOCK_SYSTEM_Listener() {
    3d36:	df 93       	push	r29
    3d38:	cf 93       	push	r28
    3d3a:	0f 92       	push	r0
    3d3c:	cd b7       	in	r28, 0x3d	; 61
    3d3e:	de b7       	in	r29, 0x3e	; 62
	if (g_lcdDelayFlag == FALSE) {
    3d40:	80 91 22 01 	lds	r24, 0x0122
    3d44:	88 23       	and	r24, r24
    3d46:	49 f4       	brne	.+18     	; 0x3d5a <SMART_DOOR_LOCK_SYSTEM_Listener+0x24>
		uint8 key = KEYPAD_getPressedKey();
    3d48:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <KEYPAD_getPressedKey>
    3d4c:	89 83       	std	Y+1, r24	; 0x01
		if (key != KEYPAD_NO_PRESS)
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
    3d50:	80 32       	cpi	r24, 0x20	; 32
    3d52:	19 f0       	breq	.+6      	; 0x3d5a <SMART_DOOR_LOCK_SYSTEM_Listener+0x24>
			inputKey(key);
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
    3d56:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <inputKey>
	}
}
    3d5a:	0f 90       	pop	r0
    3d5c:	cf 91       	pop	r28
    3d5e:	df 91       	pop	r29
    3d60:	08 95       	ret

00003d62 <motionHandler>:
boolean g_motionEnable = TRUE;

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void motionHandler() {
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
	if (PIR_read()) {
    3d6a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <PIR_read>
    3d6e:	88 23       	and	r24, r24
    3d70:	49 f0       	breq	.+18     	; 0x3d84 <motionHandler+0x22>
		g_threatFlag |= (1 << MOTION_THREAT);
    3d72:	80 91 24 01 	lds	r24, 0x0124
    3d76:	88 60       	ori	r24, 0x08	; 8
    3d78:	80 93 24 01 	sts	0x0124, r24
		Comm_HandleSend(MOTION_TRIGGERED);
    3d7c:	84 e4       	ldi	r24, 0x44	; 68
    3d7e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <Comm_HandleSend>
    3d82:	08 c0       	rjmp	.+16     	; 0x3d94 <motionHandler+0x32>
	} else {
		g_threatFlag &= ~(1 << MOTION_THREAT);
    3d84:	80 91 24 01 	lds	r24, 0x0124
    3d88:	87 7f       	andi	r24, 0xF7	; 247
    3d8a:	80 93 24 01 	sts	0x0124, r24
		Comm_HandleSend(MOTION_HANDLED);
    3d8e:	84 e0       	ldi	r24, 0x04	; 4
    3d90:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <Comm_HandleSend>
	}
}
    3d94:	cf 91       	pop	r28
    3d96:	df 91       	pop	r29
    3d98:	08 95       	ret

00003d9a <MOTION_DETECTION_SYSTEM_Init>:

void MOTION_DETECTION_SYSTEM_Init() {
    3d9a:	df 93       	push	r29
    3d9c:	cf 93       	push	r28
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Motion Detection System */
	PIR_init();
    3da2:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <PIR_init>
}
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <MOTION_DETECTION_SYSTEM_Listener>:

void MOTION_DETECTION_SYSTEM_Listener() {
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
	if (g_motionEnable) {
    3db4:	80 91 f6 00 	lds	r24, 0x00F6
    3db8:	88 23       	and	r24, r24
    3dba:	11 f0       	breq	.+4      	; 0x3dc0 <MOTION_DETECTION_SYSTEM_Listener+0x14>
		motionHandler();
    3dbc:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <motionHandler>
	}
}
    3dc0:	cf 91       	pop	r28
    3dc2:	df 91       	pop	r29
    3dc4:	08 95       	ret

00003dc6 <gasHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void gasHandler()
{
    3dc6:	df 93       	push	r29
    3dc8:	cf 93       	push	r28
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
	if(MQ9_read())
    3dce:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <MQ9_read>
    3dd2:	88 23       	and	r24, r24
    3dd4:	d1 f0       	breq	.+52     	; 0x3e0a <gasHandler+0x44>
	{
		if(!(g_threatFlag & (1<<FIRE_THREAT)))DCMOTOR_on(&g_fan);
    3dd6:	80 91 24 01 	lds	r24, 0x0124
    3dda:	88 2f       	mov	r24, r24
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	81 70       	andi	r24, 0x01	; 1
    3de0:	90 70       	andi	r25, 0x00	; 0
    3de2:	00 97       	sbiw	r24, 0x00	; 0
    3de4:	29 f4       	brne	.+10     	; 0x3df0 <gasHandler+0x2a>
    3de6:	87 ef       	ldi	r24, 0xF7	; 247
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DCMOTOR_on>
    3dee:	04 c0       	rjmp	.+8      	; 0x3df8 <gasHandler+0x32>
		else DCMOTOR_off(&g_fan);
    3df0:	87 ef       	ldi	r24, 0xF7	; 247
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <DCMOTOR_off>
		g_threatFlag |= (1<<GAS_THREAT);
    3df8:	80 91 24 01 	lds	r24, 0x0124
    3dfc:	82 60       	ori	r24, 0x02	; 2
    3dfe:	80 93 24 01 	sts	0x0124, r24
		Comm_HandleSend(GAS_TRIGGERED);
    3e02:	82 e4       	ldi	r24, 0x42	; 66
    3e04:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <Comm_HandleSend>
    3e08:	0c c0       	rjmp	.+24     	; 0x3e22 <gasHandler+0x5c>
	}
	else
	{
		DCMOTOR_off(&g_fan);
    3e0a:	87 ef       	ldi	r24, 0xF7	; 247
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <DCMOTOR_off>
		g_threatFlag &= ~(1<<GAS_THREAT);
    3e12:	80 91 24 01 	lds	r24, 0x0124
    3e16:	8d 7f       	andi	r24, 0xFD	; 253
    3e18:	80 93 24 01 	sts	0x0124, r24
		Comm_HandleSend(GAS_HANDLED);
    3e1c:	82 e0       	ldi	r24, 0x02	; 2
    3e1e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <Comm_HandleSend>
	}
}
    3e22:	cf 91       	pop	r28
    3e24:	df 91       	pop	r29
    3e26:	08 95       	ret

00003e28 <GAS_SYSTEM_Init>:

void GAS_SYSTEM_Init()
{
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Gas System */
	MQ9_init();
    3e30:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MQ9_init>
	INTERRUPT_INT1_init(gasHandler, CHANGE);
    3e34:	83 ee       	ldi	r24, 0xE3	; 227
    3e36:	9e e1       	ldi	r25, 0x1E	; 30
    3e38:	61 e0       	ldi	r22, 0x01	; 1
    3e3a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <INTERRUPT_INT1_init>
	DCMOTOR_init(&g_fan);
    3e3e:	87 ef       	ldi	r24, 0xF7	; 247
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <DCMOTOR_init>
}
    3e46:	cf 91       	pop	r28
    3e48:	df 91       	pop	r29
    3e4a:	08 95       	ret

00003e4c <fireHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void fireHandler()
{
    3e4c:	df 93       	push	r29
    3e4e:	cf 93       	push	r28
    3e50:	cd b7       	in	r28, 0x3d	; 61
    3e52:	de b7       	in	r29, 0x3e	; 62
	if(FLAME_read())
    3e54:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <FLAME_read>
    3e58:	88 23       	and	r24, r24
    3e5a:	69 f0       	breq	.+26     	; 0x3e76 <fireHandler+0x2a>
	{
		DCMOTOR_on(&g_waterPump1);
    3e5c:	89 ef       	ldi	r24, 0xF9	; 249
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DCMOTOR_on>
		g_threatFlag |= (1<<FIRE_THREAT);
    3e64:	80 91 24 01 	lds	r24, 0x0124
    3e68:	81 60       	ori	r24, 0x01	; 1
    3e6a:	80 93 24 01 	sts	0x0124, r24
		Comm_HandleSend(FIRE_TRIGGERED);
    3e6e:	81 e4       	ldi	r24, 0x41	; 65
    3e70:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <Comm_HandleSend>
    3e74:	0c c0       	rjmp	.+24     	; 0x3e8e <fireHandler+0x42>
	}
	else
	{
		DCMOTOR_off(&g_waterPump1);
    3e76:	89 ef       	ldi	r24, 0xF9	; 249
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <DCMOTOR_off>
		g_threatFlag &= ~(1<<FIRE_THREAT);
    3e7e:	80 91 24 01 	lds	r24, 0x0124
    3e82:	8e 7f       	andi	r24, 0xFE	; 254
    3e84:	80 93 24 01 	sts	0x0124, r24
		Comm_HandleSend(FIRE_HANDLED);
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <Comm_HandleSend>
	}
	gasHandler();
    3e8e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <gasHandler>
}
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	08 95       	ret

00003e98 <FIRE_SYSTEM_Init>:

void FIRE_SYSTEM_Init()
{
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	cd b7       	in	r28, 0x3d	; 61
    3e9e:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Fire System */
	FLAME_init();
    3ea0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <FLAME_init>
	INTERRUPT_INT0_init(fireHandler, CHANGE);
    3ea4:	86 e2       	ldi	r24, 0x26	; 38
    3ea6:	9f e1       	ldi	r25, 0x1F	; 31
    3ea8:	61 e0       	ldi	r22, 0x01	; 1
    3eaa:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <INTERRUPT_INT0_init>
	DCMOTOR_init(&g_waterPump1);
    3eae:	89 ef       	ldi	r24, 0xF9	; 249
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <DCMOTOR_init>
}
    3eb6:	cf 91       	pop	r28
    3eb8:	df 91       	pop	r29
    3eba:	08 95       	ret

00003ebc <alarmHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void alarmHandler()
{
    3ebc:	df 93       	push	r29
    3ebe:	cf 93       	push	r28
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62
	if(g_alarmTimerCount == 10)
    3ec4:	80 91 23 01 	lds	r24, 0x0123
    3ec8:	8a 30       	cpi	r24, 0x0A	; 10
    3eca:	49 f4       	brne	.+18     	; 0x3ede <alarmHandler+0x22>
	{
		LED_on(&g_alarmLED);
    3ecc:	8d ef       	ldi	r24, 0xFD	; 253
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	0e 94 0c 1b 	call	0x3618	; 0x3618 <LED_on>
		BUZZER_on(&g_alarmBuzzer);
    3ed4:	8b ef       	ldi	r24, 0xFB	; 251
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <BUZZER_on>
    3edc:	0e c0       	rjmp	.+28     	; 0x3efa <alarmHandler+0x3e>
	}
	else if(g_alarmTimerCount == 20)
    3ede:	80 91 23 01 	lds	r24, 0x0123
    3ee2:	84 31       	cpi	r24, 0x14	; 20
    3ee4:	51 f4       	brne	.+20     	; 0x3efa <alarmHandler+0x3e>
	{
		LED_off(&g_alarmLED);
    3ee6:	8d ef       	ldi	r24, 0xFD	; 253
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	0e 94 22 1b 	call	0x3644	; 0x3644 <LED_off>
		BUZZER_off(&g_alarmBuzzer);
    3eee:	8b ef       	ldi	r24, 0xFB	; 251
    3ef0:	90 e0       	ldi	r25, 0x00	; 0
    3ef2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <BUZZER_off>
		g_alarmTimerCount = 0;
    3ef6:	10 92 23 01 	sts	0x0123, r1
	}
	g_alarmTimerCount++;
    3efa:	80 91 23 01 	lds	r24, 0x0123
    3efe:	8f 5f       	subi	r24, 0xFF	; 255
    3f00:	80 93 23 01 	sts	0x0123, r24
}
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	08 95       	ret

00003f0a <alarmOn>:
static void alarmOn()
{
    3f0a:	df 93       	push	r29
    3f0c:	cf 93       	push	r28
    3f0e:	cd b7       	in	r28, 0x3d	; 61
    3f10:	de b7       	in	r29, 0x3e	; 62
	TIMER0_on();
    3f12:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TIMER0_on>
}
    3f16:	cf 91       	pop	r28
    3f18:	df 91       	pop	r29
    3f1a:	08 95       	ret

00003f1c <alarmOff>:

static void alarmOff()
{
    3f1c:	df 93       	push	r29
    3f1e:	cf 93       	push	r28
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
	TIMER0_off();
    3f24:	0e 94 0c 0b 	call	0x1618	; 0x1618 <TIMER0_off>
	LED_off(&g_alarmLED);
    3f28:	8d ef       	ldi	r24, 0xFD	; 253
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	0e 94 22 1b 	call	0x3644	; 0x3644 <LED_off>
	BUZZER_off(&g_alarmBuzzer);
    3f30:	8b ef       	ldi	r24, 0xFB	; 251
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <BUZZER_off>
	g_alarmTimerCount = 0;
    3f38:	10 92 23 01 	sts	0x0123, r1
}
    3f3c:	cf 91       	pop	r28
    3f3e:	df 91       	pop	r29
    3f40:	08 95       	ret

00003f42 <ALARM_SYSTEM_Init>:

void ALARM_SYSTEM_Init()
{
    3f42:	df 93       	push	r29
    3f44:	cf 93       	push	r28
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Timer0 */
	TIMER0_init(TMR0_1024);
    3f4a:	85 e0       	ldi	r24, 0x05	; 5
    3f4c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIMER0_init>
	TIMER0_setCallback(alarmHandler);
    3f50:	8e e5       	ldi	r24, 0x5E	; 94
    3f52:	9f e1       	ldi	r25, 0x1F	; 31
    3f54:	0e 94 40 0b 	call	0x1680	; 0x1680 <TIMER0_setCallback>
	TIMER0_interruptEnable();
    3f58:	0e 94 32 0b 	call	0x1664	; 0x1664 <TIMER0_interruptEnable>

	/* Initialize Alarm System */
	BUZZER_init(&g_alarmBuzzer);
    3f5c:	8b ef       	ldi	r24, 0xFB	; 251
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <BUZZER_init>
	LED_init(&g_alarmLED);
    3f64:	8d ef       	ldi	r24, 0xFD	; 253
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LED_init>
}
    3f6c:	cf 91       	pop	r28
    3f6e:	df 91       	pop	r29
    3f70:	08 95       	ret

00003f72 <ALARM_SYSTEM_Listener>:

void ALARM_SYSTEM_Listener()
{
    3f72:	df 93       	push	r29
    3f74:	cf 93       	push	r28
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
	if(g_threatFlag) alarmOn();
    3f7a:	80 91 24 01 	lds	r24, 0x0124
    3f7e:	88 23       	and	r24, r24
    3f80:	19 f0       	breq	.+6      	; 0x3f88 <ALARM_SYSTEM_Listener+0x16>
    3f82:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <alarmOn>
    3f86:	02 c0       	rjmp	.+4      	; 0x3f8c <ALARM_SYSTEM_Listener+0x1a>
	else alarmOff();
    3f88:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <alarmOff>
}
    3f8c:	cf 91       	pop	r28
    3f8e:	df 91       	pop	r29
    3f90:	08 95       	ret

00003f92 <Comm_HandleSend>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Comm_HandleSend(uint8 sData)
{
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	0f 92       	push	r0
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
    3f9c:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(sData);
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <UART_sendByte>
}
    3fa4:	0f 90       	pop	r0
    3fa6:	cf 91       	pop	r28
    3fa8:	df 91       	pop	r29
    3faa:	08 95       	ret

00003fac <Comm_HandleReceive>:

static void Comm_HandleReceive(uint8 rData)
{
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	00 d0       	rcall	.+0      	; 0x3fb2 <Comm_HandleReceive+0x6>
    3fb2:	0f 92       	push	r0
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	89 83       	std	Y+1, r24	; 0x01
	switch (rData)
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	28 2f       	mov	r18, r24
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	3b 83       	std	Y+3, r19	; 0x03
    3fc2:	2a 83       	std	Y+2, r18	; 0x02
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc8:	89 38       	cpi	r24, 0x89	; 137
    3fca:	91 05       	cpc	r25, r1
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <Comm_HandleReceive+0x24>
    3fce:	48 c0       	rjmp	.+144    	; 0x4060 <Comm_HandleReceive+0xb4>
    3fd0:	2a 81       	ldd	r18, Y+2	; 0x02
    3fd2:	3b 81       	ldd	r19, Y+3	; 0x03
    3fd4:	2a 38       	cpi	r18, 0x8A	; 138
    3fd6:	31 05       	cpc	r19, r1
    3fd8:	84 f4       	brge	.+32     	; 0x3ffa <Comm_HandleReceive+0x4e>
    3fda:	8a 81       	ldd	r24, Y+2	; 0x02
    3fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    3fde:	87 38       	cpi	r24, 0x87	; 135
    3fe0:	91 05       	cpc	r25, r1
    3fe2:	99 f1       	breq	.+102    	; 0x404a <Comm_HandleReceive+0x9e>
    3fe4:	2a 81       	ldd	r18, Y+2	; 0x02
    3fe6:	3b 81       	ldd	r19, Y+3	; 0x03
    3fe8:	28 38       	cpi	r18, 0x88	; 136
    3fea:	31 05       	cpc	r19, r1
    3fec:	ec f5       	brge	.+122    	; 0x4068 <Comm_HandleReceive+0xbc>
    3fee:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff2:	86 38       	cpi	r24, 0x86	; 134
    3ff4:	91 05       	cpc	r25, r1
    3ff6:	01 f1       	breq	.+64     	; 0x4038 <Comm_HandleReceive+0x8c>
    3ff8:	37 c0       	rjmp	.+110    	; 0x4068 <Comm_HandleReceive+0xbc>
    3ffa:	2a 81       	ldd	r18, Y+2	; 0x02
    3ffc:	3b 81       	ldd	r19, Y+3	; 0x03
    3ffe:	27 39       	cpi	r18, 0x97	; 151
    4000:	31 05       	cpc	r19, r1
    4002:	e9 f0       	breq	.+58     	; 0x403e <Comm_HandleReceive+0x92>
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	9b 81       	ldd	r25, Y+3	; 0x03
    4008:	88 39       	cpi	r24, 0x98	; 152
    400a:	91 05       	cpc	r25, r1
    400c:	34 f4       	brge	.+12     	; 0x401a <Comm_HandleReceive+0x6e>
    400e:	2a 81       	ldd	r18, Y+2	; 0x02
    4010:	3b 81       	ldd	r19, Y+3	; 0x03
    4012:	26 39       	cpi	r18, 0x96	; 150
    4014:	31 05       	cpc	r19, r1
    4016:	61 f0       	breq	.+24     	; 0x4030 <Comm_HandleReceive+0x84>
    4018:	27 c0       	rjmp	.+78     	; 0x4068 <Comm_HandleReceive+0xbc>
    401a:	8a 81       	ldd	r24, Y+2	; 0x02
    401c:	9b 81       	ldd	r25, Y+3	; 0x03
    401e:	88 39       	cpi	r24, 0x98	; 152
    4020:	91 05       	cpc	r25, r1
    4022:	11 f1       	breq	.+68     	; 0x4068 <Comm_HandleReceive+0xbc>
    4024:	2a 81       	ldd	r18, Y+2	; 0x02
    4026:	3b 81       	ldd	r19, Y+3	; 0x03
    4028:	29 3e       	cpi	r18, 0xE9	; 233
    402a:	31 05       	cpc	r19, r1
    402c:	a1 f0       	breq	.+40     	; 0x4056 <Comm_HandleReceive+0xaa>
    402e:	1c c0       	rjmp	.+56     	; 0x4068 <Comm_HandleReceive+0xbc>
	{
	case MOTION_ON:
		g_motionEnable = TRUE;
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	80 93 f6 00 	sts	0x00F6, r24
    4036:	18 c0       	rjmp	.+48     	; 0x4068 <Comm_HandleReceive+0xbc>
		break;
	case MOTION_OFF:
		g_motionEnable = FALSE;
    4038:	10 92 f6 00 	sts	0x00F6, r1
    403c:	15 c0       	rjmp	.+42     	; 0x4068 <Comm_HandleReceive+0xbc>
		break;
	case PANIC_ON:
		g_threatFlag |= (1 << PANIC_MODE);
    403e:	80 91 24 01 	lds	r24, 0x0124
    4042:	80 61       	ori	r24, 0x10	; 16
    4044:	80 93 24 01 	sts	0x0124, r24
    4048:	0f c0       	rjmp	.+30     	; 0x4068 <Comm_HandleReceive+0xbc>
		break;
	case PANIC_OFF:
		g_threatFlag &= ~(1 << PANIC_MODE);
    404a:	80 91 24 01 	lds	r24, 0x0124
    404e:	8f 7e       	andi	r24, 0xEF	; 239
    4050:	80 93 24 01 	sts	0x0124, r24
    4054:	09 c0       	rjmp	.+18     	; 0x4068 <Comm_HandleReceive+0xbc>
	case DISARM_ON:
		break;
	case DISARM_OFF:
		break;
	case DOOR_OPEN:
		setMode(NORMAL_LOCKED, 3);
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	63 e0       	ldi	r22, 0x03	; 3
    405a:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
    405e:	04 c0       	rjmp	.+8      	; 0x4068 <Comm_HandleReceive+0xbc>
		break;
	case DOOR_CLOSE:
		setMode(NORMAL_LOCKED, 1);
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	61 e0       	ldi	r22, 0x01	; 1
    4064:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <setMode>
		break;
	default:
		break;
	}
}
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	0f 90       	pop	r0
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	08 95       	ret

00004074 <RXHandler>:

static void RXHandler()
{
    4074:	df 93       	push	r29
    4076:	cf 93       	push	r28
    4078:	0f 92       	push	r0
    407a:	cd b7       	in	r28, 0x3d	; 61
    407c:	de b7       	in	r29, 0x3e	; 62
	uint8 rData = UART_receiveByte();
    407e:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <UART_receiveByte>
    4082:	89 83       	std	Y+1, r24	; 0x01
	Comm_HandleReceive(rData);
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <Comm_HandleReceive>
}
    408a:	0f 90       	pop	r0
    408c:	cf 91       	pop	r28
    408e:	df 91       	pop	r29
    4090:	08 95       	ret

00004092 <Comm_Init>:

void Comm_Init()
{
    4092:	df 93       	push	r29
    4094:	cf 93       	push	r28
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
    409a:	2c 97       	sbiw	r28, 0x0c	; 12
    409c:	0f b6       	in	r0, 0x3f	; 63
    409e:	f8 94       	cli
    40a0:	de bf       	out	0x3e, r29	; 62
    40a2:	0f be       	out	0x3f, r0	; 63
    40a4:	cd bf       	out	0x3d, r28	; 61
	/* Configure & Initialize UART */
	UART_ConfigType uartConfig =
	{ UART_8BIT, PARITY_ENABLE, UART_1_STOP_BIT, 9600 };
    40a6:	ce 01       	movw	r24, r28
    40a8:	01 96       	adiw	r24, 0x01	; 1
    40aa:	99 87       	std	Y+9, r25	; 0x09
    40ac:	88 87       	std	Y+8, r24	; 0x08
    40ae:	ef ef       	ldi	r30, 0xFF	; 255
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	fb 87       	std	Y+11, r31	; 0x0b
    40b4:	ea 87       	std	Y+10, r30	; 0x0a
    40b6:	f7 e0       	ldi	r31, 0x07	; 7
    40b8:	fc 87       	std	Y+12, r31	; 0x0c
    40ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    40bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    40be:	00 80       	ld	r0, Z
    40c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    40c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    40c4:	01 96       	adiw	r24, 0x01	; 1
    40c6:	9b 87       	std	Y+11, r25	; 0x0b
    40c8:	8a 87       	std	Y+10, r24	; 0x0a
    40ca:	e8 85       	ldd	r30, Y+8	; 0x08
    40cc:	f9 85       	ldd	r31, Y+9	; 0x09
    40ce:	00 82       	st	Z, r0
    40d0:	88 85       	ldd	r24, Y+8	; 0x08
    40d2:	99 85       	ldd	r25, Y+9	; 0x09
    40d4:	01 96       	adiw	r24, 0x01	; 1
    40d6:	99 87       	std	Y+9, r25	; 0x09
    40d8:	88 87       	std	Y+8, r24	; 0x08
    40da:	9c 85       	ldd	r25, Y+12	; 0x0c
    40dc:	91 50       	subi	r25, 0x01	; 1
    40de:	9c 87       	std	Y+12, r25	; 0x0c
    40e0:	ec 85       	ldd	r30, Y+12	; 0x0c
    40e2:	ee 23       	and	r30, r30
    40e4:	51 f7       	brne	.-44     	; 0x40ba <Comm_Init+0x28>
	UART_init(&uartConfig);
    40e6:	ce 01       	movw	r24, r28
    40e8:	01 96       	adiw	r24, 0x01	; 1
    40ea:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_init>
	UART_interruptEnable(RX_INT);
    40ee:	84 e0       	ldi	r24, 0x04	; 4
    40f0:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <UART_interruptEnable>
	UART_setCallBackRX(RXHandler);
    40f4:	8a e3       	ldi	r24, 0x3A	; 58
    40f6:	90 e2       	ldi	r25, 0x20	; 32
    40f8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_setCallBackRX>
}
    40fc:	2c 96       	adiw	r28, 0x0c	; 12
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	08 95       	ret

0000410e <main>:

/*******************************************************************************
 *                          Main Functions                              	   *
 *******************************************************************************/
int main(void)
{
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Communication */
	Comm_Init();
    4116:	0e 94 49 20 	call	0x4092	; 0x4092 <Comm_Init>

	/* Initialize Sub Systems */
	ALARM_SYSTEM_Init();
    411a:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <ALARM_SYSTEM_Init>
	FIRE_SYSTEM_Init();
    411e:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <FIRE_SYSTEM_Init>
	GAS_SYSTEM_Init();
    4122:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <GAS_SYSTEM_Init>
	WATER_FLOOD_SYSTEM_Init();
    4126:	0e 94 b7 1b 	call	0x376e	; 0x376e <WATER_FLOOD_SYSTEM_Init>
	MOTION_DETECTION_SYSTEM_Init();
    412a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <MOTION_DETECTION_SYSTEM_Init>
	SMART_DOOR_LOCK_SYSTEM_Init();
    412e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <SMART_DOOR_LOCK_SYSTEM_Init>

	/* Enable Global Interrupt */
	INTERRUPT_enable();
    4132:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <INTERRUPT_enable>

	while(1)
	{
		SMART_DOOR_LOCK_SYSTEM_Listener();
    4136:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <SMART_DOOR_LOCK_SYSTEM_Listener>
		MOTION_DETECTION_SYSTEM_Listener();
    413a:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <MOTION_DETECTION_SYSTEM_Listener>
		ALARM_SYSTEM_Listener();
    413e:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <ALARM_SYSTEM_Listener>
    4142:	f9 cf       	rjmp	.-14     	; 0x4136 <main+0x28>

00004144 <__udivmodsi4>:
    4144:	a1 e2       	ldi	r26, 0x21	; 33
    4146:	1a 2e       	mov	r1, r26
    4148:	aa 1b       	sub	r26, r26
    414a:	bb 1b       	sub	r27, r27
    414c:	fd 01       	movw	r30, r26
    414e:	0d c0       	rjmp	.+26     	; 0x416a <__udivmodsi4_ep>

00004150 <__udivmodsi4_loop>:
    4150:	aa 1f       	adc	r26, r26
    4152:	bb 1f       	adc	r27, r27
    4154:	ee 1f       	adc	r30, r30
    4156:	ff 1f       	adc	r31, r31
    4158:	a2 17       	cp	r26, r18
    415a:	b3 07       	cpc	r27, r19
    415c:	e4 07       	cpc	r30, r20
    415e:	f5 07       	cpc	r31, r21
    4160:	20 f0       	brcs	.+8      	; 0x416a <__udivmodsi4_ep>
    4162:	a2 1b       	sub	r26, r18
    4164:	b3 0b       	sbc	r27, r19
    4166:	e4 0b       	sbc	r30, r20
    4168:	f5 0b       	sbc	r31, r21

0000416a <__udivmodsi4_ep>:
    416a:	66 1f       	adc	r22, r22
    416c:	77 1f       	adc	r23, r23
    416e:	88 1f       	adc	r24, r24
    4170:	99 1f       	adc	r25, r25
    4172:	1a 94       	dec	r1
    4174:	69 f7       	brne	.-38     	; 0x4150 <__udivmodsi4_loop>
    4176:	60 95       	com	r22
    4178:	70 95       	com	r23
    417a:	80 95       	com	r24
    417c:	90 95       	com	r25
    417e:	9b 01       	movw	r18, r22
    4180:	ac 01       	movw	r20, r24
    4182:	bd 01       	movw	r22, r26
    4184:	cf 01       	movw	r24, r30
    4186:	08 95       	ret

00004188 <__prologue_saves__>:
    4188:	2f 92       	push	r2
    418a:	3f 92       	push	r3
    418c:	4f 92       	push	r4
    418e:	5f 92       	push	r5
    4190:	6f 92       	push	r6
    4192:	7f 92       	push	r7
    4194:	8f 92       	push	r8
    4196:	9f 92       	push	r9
    4198:	af 92       	push	r10
    419a:	bf 92       	push	r11
    419c:	cf 92       	push	r12
    419e:	df 92       	push	r13
    41a0:	ef 92       	push	r14
    41a2:	ff 92       	push	r15
    41a4:	0f 93       	push	r16
    41a6:	1f 93       	push	r17
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
    41b0:	ca 1b       	sub	r28, r26
    41b2:	db 0b       	sbc	r29, r27
    41b4:	0f b6       	in	r0, 0x3f	; 63
    41b6:	f8 94       	cli
    41b8:	de bf       	out	0x3e, r29	; 62
    41ba:	0f be       	out	0x3f, r0	; 63
    41bc:	cd bf       	out	0x3d, r28	; 61
    41be:	09 94       	ijmp

000041c0 <__epilogue_restores__>:
    41c0:	2a 88       	ldd	r2, Y+18	; 0x12
    41c2:	39 88       	ldd	r3, Y+17	; 0x11
    41c4:	48 88       	ldd	r4, Y+16	; 0x10
    41c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    41c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    41ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    41cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    41ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    41d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    41d2:	b9 84       	ldd	r11, Y+9	; 0x09
    41d4:	c8 84       	ldd	r12, Y+8	; 0x08
    41d6:	df 80       	ldd	r13, Y+7	; 0x07
    41d8:	ee 80       	ldd	r14, Y+6	; 0x06
    41da:	fd 80       	ldd	r15, Y+5	; 0x05
    41dc:	0c 81       	ldd	r16, Y+4	; 0x04
    41de:	1b 81       	ldd	r17, Y+3	; 0x03
    41e0:	aa 81       	ldd	r26, Y+2	; 0x02
    41e2:	b9 81       	ldd	r27, Y+1	; 0x01
    41e4:	ce 0f       	add	r28, r30
    41e6:	d1 1d       	adc	r29, r1
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	cd bf       	out	0x3d, r28	; 61
    41f2:	ed 01       	movw	r28, r26
    41f4:	08 95       	ret

000041f6 <itoa>:
    41f6:	fb 01       	movw	r30, r22
    41f8:	9f 01       	movw	r18, r30
    41fa:	e8 94       	clt
    41fc:	42 30       	cpi	r20, 0x02	; 2
    41fe:	c4 f0       	brlt	.+48     	; 0x4230 <itoa+0x3a>
    4200:	45 32       	cpi	r20, 0x25	; 37
    4202:	b4 f4       	brge	.+44     	; 0x4230 <itoa+0x3a>
    4204:	4a 30       	cpi	r20, 0x0A	; 10
    4206:	29 f4       	brne	.+10     	; 0x4212 <itoa+0x1c>
    4208:	97 fb       	bst	r25, 7
    420a:	1e f4       	brtc	.+6      	; 0x4212 <itoa+0x1c>
    420c:	90 95       	com	r25
    420e:	81 95       	neg	r24
    4210:	9f 4f       	sbci	r25, 0xFF	; 255
    4212:	64 2f       	mov	r22, r20
    4214:	77 27       	eor	r23, r23
    4216:	0e 94 2c 21 	call	0x4258	; 0x4258 <__udivmodhi4>
    421a:	80 5d       	subi	r24, 0xD0	; 208
    421c:	8a 33       	cpi	r24, 0x3A	; 58
    421e:	0c f0       	brlt	.+2      	; 0x4222 <itoa+0x2c>
    4220:	89 5d       	subi	r24, 0xD9	; 217
    4222:	81 93       	st	Z+, r24
    4224:	cb 01       	movw	r24, r22
    4226:	00 97       	sbiw	r24, 0x00	; 0
    4228:	a1 f7       	brne	.-24     	; 0x4212 <itoa+0x1c>
    422a:	16 f4       	brtc	.+4      	; 0x4230 <itoa+0x3a>
    422c:	5d e2       	ldi	r21, 0x2D	; 45
    422e:	51 93       	st	Z+, r21
    4230:	10 82       	st	Z, r1
    4232:	c9 01       	movw	r24, r18
    4234:	0c 94 1c 21 	jmp	0x4238	; 0x4238 <strrev>

00004238 <strrev>:
    4238:	dc 01       	movw	r26, r24
    423a:	fc 01       	movw	r30, r24
    423c:	67 2f       	mov	r22, r23
    423e:	71 91       	ld	r23, Z+
    4240:	77 23       	and	r23, r23
    4242:	e1 f7       	brne	.-8      	; 0x423c <strrev+0x4>
    4244:	32 97       	sbiw	r30, 0x02	; 2
    4246:	04 c0       	rjmp	.+8      	; 0x4250 <strrev+0x18>
    4248:	7c 91       	ld	r23, X
    424a:	6d 93       	st	X+, r22
    424c:	70 83       	st	Z, r23
    424e:	62 91       	ld	r22, -Z
    4250:	ae 17       	cp	r26, r30
    4252:	bf 07       	cpc	r27, r31
    4254:	c8 f3       	brcs	.-14     	; 0x4248 <strrev+0x10>
    4256:	08 95       	ret

00004258 <__udivmodhi4>:
    4258:	aa 1b       	sub	r26, r26
    425a:	bb 1b       	sub	r27, r27
    425c:	51 e1       	ldi	r21, 0x11	; 17
    425e:	07 c0       	rjmp	.+14     	; 0x426e <__udivmodhi4_ep>

00004260 <__udivmodhi4_loop>:
    4260:	aa 1f       	adc	r26, r26
    4262:	bb 1f       	adc	r27, r27
    4264:	a6 17       	cp	r26, r22
    4266:	b7 07       	cpc	r27, r23
    4268:	10 f0       	brcs	.+4      	; 0x426e <__udivmodhi4_ep>
    426a:	a6 1b       	sub	r26, r22
    426c:	b7 0b       	sbc	r27, r23

0000426e <__udivmodhi4_ep>:
    426e:	88 1f       	adc	r24, r24
    4270:	99 1f       	adc	r25, r25
    4272:	5a 95       	dec	r21
    4274:	a9 f7       	brne	.-22     	; 0x4260 <__udivmodhi4_loop>
    4276:	80 95       	com	r24
    4278:	90 95       	com	r25
    427a:	bc 01       	movw	r22, r24
    427c:	cd 01       	movw	r24, r26
    427e:	08 95       	ret

00004280 <_exit>:
    4280:	f8 94       	cli

00004282 <__stop_program>:
    4282:	ff cf       	rjmp	.-2      	; 0x4282 <__stop_program>
