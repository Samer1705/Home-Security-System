
Home_Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00003aa4  00003b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080009e  0080009e  00003b76  2**0
                  ALLOC
  3 .stab         00005418  00000000  00000000  00003b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002dc4  00000000  00000000  00008f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bd54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000be94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c004  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000eb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f8e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fa48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000104a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_1>
       8:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_2>
       c:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 95 1c 	call	0x392a	; 0x392a <main>
      8a:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e8       	ldi	r26, 0x88	; 136
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e8       	ldi	r24, 0x88	; 136
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 1c 	jmp	0x39e0	; 0x39e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_write>:
#include "atmega32_eeprom.h"

#include <avr/io.h>

void EEPROM_write(uint16 uiAddress, uint8 ucData)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_write+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6b 83       	std	Y+3, r22	; 0x03
	while(EECR & (1<<EEWE)); 				/* Wait for completion of previous write */
     b58:	ec e3       	ldi	r30, 0x3C	; 60
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	82 70       	andi	r24, 0x02	; 2
     b64:	90 70       	andi	r25, 0x00	; 0
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	b9 f7       	brne	.-18     	; 0xb58 <EEPROM_write+0x12>

	/* Set up address and data registers */
	EEAR = uiAddress;
     b6a:	ee e3       	ldi	r30, 0x3E	; 62
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	80 83       	st	Z, r24
	EEDR = ucData;
     b76:	ed e3       	ldi	r30, 0x3D	; 61
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	80 83       	st	Z, r24

	EECR |= (1<<EEMWE);						/* Write logical one to EEMWE */
     b7e:	ac e3       	ldi	r26, 0x3C	; 60
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	ec e3       	ldi	r30, 0x3C	; 60
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	84 60       	ori	r24, 0x04	; 4
     b8a:	8c 93       	st	X, r24
	EECR |= (1<<EEWE);						/* Start eeprom write by setting EEWE */
     b8c:	ac e3       	ldi	r26, 0x3C	; 60
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ec e3       	ldi	r30, 0x3C	; 60
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	82 60       	ori	r24, 0x02	; 2
     b98:	8c 93       	st	X, r24
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	08 95       	ret

00000ba6 <EEPROM_read>:

uint8 EEPROM_read(uint16 uiAddress)
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	00 d0       	rcall	.+0      	; 0xbac <EEPROM_read+0x6>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	89 83       	std	Y+1, r24	; 0x01
	while(EECR & (1<<EEWE));				/* Wait for completion of previous write */
     bb4:	ec e3       	ldi	r30, 0x3C	; 60
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	82 70       	andi	r24, 0x02	; 2
     bc0:	90 70       	andi	r25, 0x00	; 0
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	b9 f7       	brne	.-18     	; 0xbb4 <EEPROM_read+0xe>
	EEAR = uiAddress;						/* Set up address register */
     bc6:	ee e3       	ldi	r30, 0x3E	; 62
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	80 83       	st	Z, r24
	EECR |= (1<<EERE);						/* Start eeprom read by writing EERE */
     bd2:	ac e3       	ldi	r26, 0x3C	; 60
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ec e3       	ldi	r30, 0x3C	; 60
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
	return EEDR;							/* Return data from data register */
     be0:	ed e3       	ldi	r30, 0x3D	; 61
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
}
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <GPIO_setupPinDirection>:
/*
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <GPIO_setupPinDirection+0x6>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <GPIO_setupPinDirection+0x8>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	6a 83       	std	Y+2, r22	; 0x02
     c02:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	88 30       	cpi	r24, 0x08	; 8
     c08:	08 f0       	brcs	.+2      	; 0xc0c <GPIO_setupPinDirection+0x1c>
     c0a:	d5 c0       	rjmp	.+426    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	84 30       	cpi	r24, 0x04	; 4
     c10:	08 f0       	brcs	.+2      	; 0xc14 <GPIO_setupPinDirection+0x24>
     c12:	d1 c0       	rjmp	.+418    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	3d 83       	std	Y+5, r19	; 0x05
     c1c:	2c 83       	std	Y+4, r18	; 0x04
     c1e:	8c 81       	ldd	r24, Y+4	; 0x04
     c20:	9d 81       	ldd	r25, Y+5	; 0x05
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	91 05       	cpc	r25, r1
     c26:	09 f4       	brne	.+2      	; 0xc2a <GPIO_setupPinDirection+0x3a>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <GPIO_setupPinDirection+0xc0>
     c2a:	2c 81       	ldd	r18, Y+4	; 0x04
     c2c:	3d 81       	ldd	r19, Y+5	; 0x05
     c2e:	22 30       	cpi	r18, 0x02	; 2
     c30:	31 05       	cpc	r19, r1
     c32:	2c f4       	brge	.+10     	; 0xc3e <GPIO_setupPinDirection+0x4e>
     c34:	8c 81       	ldd	r24, Y+4	; 0x04
     c36:	9d 81       	ldd	r25, Y+5	; 0x05
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	71 f0       	breq	.+28     	; 0xc58 <GPIO_setupPinDirection+0x68>
     c3c:	bc c0       	rjmp	.+376    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
     c3e:	2c 81       	ldd	r18, Y+4	; 0x04
     c40:	3d 81       	ldd	r19, Y+5	; 0x05
     c42:	22 30       	cpi	r18, 0x02	; 2
     c44:	31 05       	cpc	r19, r1
     c46:	09 f4       	brne	.+2      	; 0xc4a <GPIO_setupPinDirection+0x5a>
     c48:	5f c0       	rjmp	.+190    	; 0xd08 <GPIO_setupPinDirection+0x118>
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	9d 81       	ldd	r25, Y+5	; 0x05
     c4e:	83 30       	cpi	r24, 0x03	; 3
     c50:	91 05       	cpc	r25, r1
     c52:	09 f4       	brne	.+2      	; 0xc56 <GPIO_setupPinDirection+0x66>
     c54:	85 c0       	rjmp	.+266    	; 0xd60 <GPIO_setupPinDirection+0x170>
     c56:	af c0       	rjmp	.+350    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRA,pin_num);
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	a1 f4       	brne	.+40     	; 0xc86 <GPIO_setupPinDirection+0x96>
     c5e:	aa e3       	ldi	r26, 0x3A	; 58
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	ea e3       	ldi	r30, 0x3A	; 58
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	48 2f       	mov	r20, r24
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <GPIO_setupPinDirection+0x8c>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <GPIO_setupPinDirection+0x88>
     c80:	84 2b       	or	r24, r20
     c82:	8c 93       	st	X, r24
     c84:	98 c0       	rjmp	.+304    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRA,pin_num);
     c86:	aa e3       	ldi	r26, 0x3A	; 58
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	ea e3       	ldi	r30, 0x3A	; 58
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	48 2f       	mov	r20, r24
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	02 2e       	mov	r0, r18
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <GPIO_setupPinDirection+0xb4>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	0a 94       	dec	r0
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <GPIO_setupPinDirection+0xb0>
     ca8:	80 95       	com	r24
     caa:	84 23       	and	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	83 c0       	rjmp	.+262    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRB,pin_num);
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	a1 f4       	brne	.+40     	; 0xcde <GPIO_setupPinDirection+0xee>
     cb6:	a7 e3       	ldi	r26, 0x37	; 55
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e3       	ldi	r30, 0x37	; 55
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <GPIO_setupPinDirection+0xe4>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <GPIO_setupPinDirection+0xe0>
     cd8:	84 2b       	or	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	6c c0       	rjmp	.+216    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRB,pin_num);
     cde:	a7 e3       	ldi	r26, 0x37	; 55
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e3       	ldi	r30, 0x37	; 55
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	48 2f       	mov	r20, r24
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 2e       	mov	r0, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <GPIO_setupPinDirection+0x10c>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <GPIO_setupPinDirection+0x108>
     d00:	80 95       	com	r24
     d02:	84 23       	and	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	57 c0       	rjmp	.+174    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRC,pin_num);
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	a1 f4       	brne	.+40     	; 0xd36 <GPIO_setupPinDirection+0x146>
     d0e:	a4 e3       	ldi	r26, 0x34	; 52
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e4 e3       	ldi	r30, 0x34	; 52
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_setupPinDirection+0x13c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_setupPinDirection+0x138>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	40 c0       	rjmp	.+128    	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRC,pin_num);
     d36:	a4 e3       	ldi	r26, 0x34	; 52
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e4 e3       	ldi	r30, 0x34	; 52
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <GPIO_setupPinDirection+0x164>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <GPIO_setupPinDirection+0x160>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	2b c0       	rjmp	.+86     	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRD,pin_num);
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	a1 f4       	brne	.+40     	; 0xd8e <GPIO_setupPinDirection+0x19e>
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setupPinDirection+0x194>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setupPinDirection+0x190>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRD,pin_num);
     d8e:	a1 e3       	ldi	r26, 0x31	; 49
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e1 e3       	ldi	r30, 0x31	; 49
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <GPIO_setupPinDirection+0x1bc>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <GPIO_setupPinDirection+0x1b8>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
			break;
		}
	}
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <GPIO_writePin+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <GPIO_writePin+0x8>
     dce:	0f 92       	push	r0
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	6a 83       	std	Y+2, r22	; 0x02
     dd8:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	88 30       	cpi	r24, 0x08	; 8
     dde:	08 f0       	brcs	.+2      	; 0xde2 <GPIO_writePin+0x1c>
     de0:	e4 c0       	rjmp	.+456    	; 0xfaa <GPIO_writePin+0x1e4>
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	08 f0       	brcs	.+2      	; 0xdea <GPIO_writePin+0x24>
     de8:	e0 c0       	rjmp	.+448    	; 0xfaa <GPIO_writePin+0x1e4>
	{
		/* Set up the pin value as required */
		switch (port_num)
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	3d 83       	std	Y+5, r19	; 0x05
     df2:	2c 83       	std	Y+4, r18	; 0x04
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	9d 81       	ldd	r25, Y+5	; 0x05
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <GPIO_writePin+0x3a>
     dfe:	47 c0       	rjmp	.+142    	; 0xe8e <GPIO_writePin+0xc8>
     e00:	2c 81       	ldd	r18, Y+4	; 0x04
     e02:	3d 81       	ldd	r19, Y+5	; 0x05
     e04:	22 30       	cpi	r18, 0x02	; 2
     e06:	31 05       	cpc	r19, r1
     e08:	2c f4       	brge	.+10     	; 0xe14 <GPIO_writePin+0x4e>
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	9d 81       	ldd	r25, Y+5	; 0x05
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	71 f0       	breq	.+28     	; 0xe2e <GPIO_writePin+0x68>
     e12:	cb c0       	rjmp	.+406    	; 0xfaa <GPIO_writePin+0x1e4>
     e14:	2c 81       	ldd	r18, Y+4	; 0x04
     e16:	3d 81       	ldd	r19, Y+5	; 0x05
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <GPIO_writePin+0x5a>
     e1e:	67 c0       	rjmp	.+206    	; 0xeee <GPIO_writePin+0x128>
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
     e24:	83 30       	cpi	r24, 0x03	; 3
     e26:	91 05       	cpc	r25, r1
     e28:	09 f4       	brne	.+2      	; 0xe2c <GPIO_writePin+0x66>
     e2a:	91 c0       	rjmp	.+290    	; 0xf4e <GPIO_writePin+0x188>
     e2c:	be c0       	rjmp	.+380    	; 0xfaa <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTA, pin_num);
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	88 23       	and	r24, r24
     e32:	a9 f4       	brne	.+42     	; 0xe5e <GPIO_writePin+0x98>
     e34:	ab e3       	ldi	r26, 0x3B	; 59
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	eb e3       	ldi	r30, 0x3B	; 59
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <GPIO_writePin+0x8c>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <GPIO_writePin+0x88>
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	a6 c0       	rjmp	.+332    	; 0xfaa <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTA, pin_num);
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	09 f0       	breq	.+2      	; 0xe66 <GPIO_writePin+0xa0>
     e64:	a2 c0       	rjmp	.+324    	; 0xfaa <GPIO_writePin+0x1e4>
     e66:	ab e3       	ldi	r26, 0x3B	; 59
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb e3       	ldi	r30, 0x3B	; 59
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <GPIO_writePin+0xbe>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <GPIO_writePin+0xba>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	8e c0       	rjmp	.+284    	; 0xfaa <GPIO_writePin+0x1e4>
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTB, pin_num);
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	88 23       	and	r24, r24
     e92:	a9 f4       	brne	.+42     	; 0xebe <GPIO_writePin+0xf8>
     e94:	a8 e3       	ldi	r26, 0x38	; 56
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e8 e3       	ldi	r30, 0x38	; 56
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <GPIO_writePin+0xec>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <GPIO_writePin+0xe8>
     eb6:	80 95       	com	r24
     eb8:	84 23       	and	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	76 c0       	rjmp	.+236    	; 0xfaa <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTB, pin_num);
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	09 f0       	breq	.+2      	; 0xec6 <GPIO_writePin+0x100>
     ec4:	72 c0       	rjmp	.+228    	; 0xfaa <GPIO_writePin+0x1e4>
     ec6:	a8 e3       	ldi	r26, 0x38	; 56
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e8 e3       	ldi	r30, 0x38	; 56
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <GPIO_writePin+0x11e>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <GPIO_writePin+0x11a>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	5e c0       	rjmp	.+188    	; 0xfaa <GPIO_writePin+0x1e4>
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTC, pin_num);
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	88 23       	and	r24, r24
     ef2:	a9 f4       	brne	.+42     	; 0xf1e <GPIO_writePin+0x158>
     ef4:	a5 e3       	ldi	r26, 0x35	; 53
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e5 e3       	ldi	r30, 0x35	; 53
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_writePin+0x14c>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_writePin+0x148>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	46 c0       	rjmp	.+140    	; 0xfaa <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTC, pin_num);
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <GPIO_writePin+0x160>
     f24:	42 c0       	rjmp	.+132    	; 0xfaa <GPIO_writePin+0x1e4>
     f26:	a5 e3       	ldi	r26, 0x35	; 53
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e5 e3       	ldi	r30, 0x35	; 53
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <GPIO_writePin+0x17e>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <GPIO_writePin+0x17a>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	2e c0       	rjmp	.+92     	; 0xfaa <GPIO_writePin+0x1e4>
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTD, pin_num);
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	88 23       	and	r24, r24
     f52:	a9 f4       	brne	.+42     	; 0xf7e <GPIO_writePin+0x1b8>
     f54:	a2 e3       	ldi	r26, 0x32	; 50
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e2 e3       	ldi	r30, 0x32	; 50
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_writePin+0x1ac>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_writePin+0x1a8>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	16 c0       	rjmp	.+44     	; 0xfaa <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTD, pin_num);
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	99 f4       	brne	.+38     	; 0xfaa <GPIO_writePin+0x1e4>
     f84:	a2 e3       	ldi	r26, 0x32	; 50
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e2 e3       	ldi	r30, 0x32	; 50
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <GPIO_writePin+0x1dc>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <GPIO_writePin+0x1d8>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
			break;
		}
	}
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <GPIO_readPin>:
/*
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	29 97       	sbiw	r28, 0x09	; 9
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	88 30       	cpi	r24, 0x08	; 8
     fd6:	08 f0       	brcs	.+2      	; 0xfda <GPIO_readPin+0x20>
     fd8:	8d c0       	rjmp	.+282    	; 0x10f4 <GPIO_readPin+0x13a>
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <GPIO_readPin+0x28>
     fe0:	89 c0       	rjmp	.+274    	; 0x10f4 <GPIO_readPin+0x13a>
	{
		/* Return the value of the desired pin as required */
		switch (port_num)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	39 87       	std	Y+9, r19	; 0x09
     fea:	28 87       	std	Y+8, r18	; 0x08
     fec:	48 85       	ldd	r20, Y+8	; 0x08
     fee:	59 85       	ldd	r21, Y+9	; 0x09
     ff0:	41 30       	cpi	r20, 0x01	; 1
     ff2:	51 05       	cpc	r21, r1
     ff4:	89 f1       	breq	.+98     	; 0x1058 <GPIO_readPin+0x9e>
     ff6:	88 85       	ldd	r24, Y+8	; 0x08
     ff8:	99 85       	ldd	r25, Y+9	; 0x09
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	91 05       	cpc	r25, r1
     ffe:	34 f4       	brge	.+12     	; 0x100c <GPIO_readPin+0x52>
    1000:	28 85       	ldd	r18, Y+8	; 0x08
    1002:	39 85       	ldd	r19, Y+9	; 0x09
    1004:	21 15       	cp	r18, r1
    1006:	31 05       	cpc	r19, r1
    1008:	69 f0       	breq	.+26     	; 0x1024 <GPIO_readPin+0x6a>
    100a:	74 c0       	rjmp	.+232    	; 0x10f4 <GPIO_readPin+0x13a>
    100c:	48 85       	ldd	r20, Y+8	; 0x08
    100e:	59 85       	ldd	r21, Y+9	; 0x09
    1010:	42 30       	cpi	r20, 0x02	; 2
    1012:	51 05       	cpc	r21, r1
    1014:	d9 f1       	breq	.+118    	; 0x108c <GPIO_readPin+0xd2>
    1016:	88 85       	ldd	r24, Y+8	; 0x08
    1018:	99 85       	ldd	r25, Y+9	; 0x09
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <GPIO_readPin+0x68>
    1020:	4f c0       	rjmp	.+158    	; 0x10c0 <GPIO_readPin+0x106>
    1022:	68 c0       	rjmp	.+208    	; 0x10f4 <GPIO_readPin+0x13a>
		{
		case PORTA_ID:
			return (BIT_IS_SET(PINA, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1024:	e9 e3       	ldi	r30, 0x39	; 57
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a9 01       	movw	r20, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_readPin+0x82>
    1038:	55 95       	asr	r21
    103a:	47 95       	ror	r20
    103c:	8a 95       	dec	r24
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_readPin+0x7e>
    1040:	ca 01       	movw	r24, r20
    1042:	81 70       	andi	r24, 0x01	; 1
    1044:	90 70       	andi	r25, 0x00	; 0
    1046:	88 23       	and	r24, r24
    1048:	19 f0       	breq	.+6      	; 0x1050 <GPIO_readPin+0x96>
    104a:	51 e0       	ldi	r21, 0x01	; 1
    104c:	5e 83       	std	Y+6, r21	; 0x06
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <GPIO_readPin+0x98>
    1050:	1e 82       	std	Y+6, r1	; 0x06
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	8f 83       	std	Y+7, r24	; 0x07
    1056:	4f c0       	rjmp	.+158    	; 0x10f6 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1058:	e6 e3       	ldi	r30, 0x36	; 54
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a9 01       	movw	r20, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <GPIO_readPin+0xb6>
    106c:	55 95       	asr	r21
    106e:	47 95       	ror	r20
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <GPIO_readPin+0xb2>
    1074:	ca 01       	movw	r24, r20
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	88 23       	and	r24, r24
    107c:	19 f0       	breq	.+6      	; 0x1084 <GPIO_readPin+0xca>
    107e:	51 e0       	ldi	r21, 0x01	; 1
    1080:	5d 83       	std	Y+5, r21	; 0x05
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <GPIO_readPin+0xcc>
    1084:	1d 82       	std	Y+5, r1	; 0x05
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	8f 83       	std	Y+7, r24	; 0x07
    108a:	35 c0       	rjmp	.+106    	; 0x10f6 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    108c:	e3 e3       	ldi	r30, 0x33	; 51
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <GPIO_readPin+0xea>
    10a0:	55 95       	asr	r21
    10a2:	47 95       	ror	r20
    10a4:	8a 95       	dec	r24
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <GPIO_readPin+0xe6>
    10a8:	ca 01       	movw	r24, r20
    10aa:	81 70       	andi	r24, 0x01	; 1
    10ac:	90 70       	andi	r25, 0x00	; 0
    10ae:	88 23       	and	r24, r24
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <GPIO_readPin+0xfe>
    10b2:	51 e0       	ldi	r21, 0x01	; 1
    10b4:	5c 83       	std	Y+4, r21	; 0x04
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <GPIO_readPin+0x100>
    10b8:	1c 82       	std	Y+4, r1	; 0x04
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	1b c0       	rjmp	.+54     	; 0x10f6 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    10c0:	e0 e3       	ldi	r30, 0x30	; 48
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_readPin+0x11e>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_readPin+0x11a>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	90 70       	andi	r25, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	19 f0       	breq	.+6      	; 0x10ec <GPIO_readPin+0x132>
    10e6:	51 e0       	ldi	r21, 0x01	; 1
    10e8:	5b 83       	std	Y+3, r21	; 0x03
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <GPIO_readPin+0x134>
    10ec:	1b 82       	std	Y+3, r1	; 0x03
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	8f 83       	std	Y+7, r24	; 0x07
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <GPIO_readPin+0x13c>
			break;
		}
	}
	return LOGIC_LOW;
    10f4:	1f 82       	std	Y+7, r1	; 0x07
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    10f8:	29 96       	adiw	r28, 0x09	; 9
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <GPIO_setupPortDirection+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <GPIO_setupPortDirection+0x8>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	90 f5       	brcc	.+100    	; 0x1184 <GPIO_setupPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port_num)
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <GPIO_setupPortDirection+0x5e>
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	3c 81       	ldd	r19, Y+4	; 0x04
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <GPIO_setupPortDirection+0x3e>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <GPIO_setupPortDirection+0x54>
    1146:	1e c0       	rjmp	.+60     	; 0x1184 <GPIO_setupPortDirection+0x7a>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <GPIO_setupPortDirection+0x68>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <GPIO_setupPortDirection+0x72>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    115e:	ea e3       	ldi	r30, 0x3A	; 58
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	80 83       	st	Z, r24
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1172:	e4 e3       	ldi	r30, 0x34	; 52
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
			break;
		}
	}
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <GPIO_writePort+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <GPIO_writePort+0x8>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	90 f5       	brcc	.+100    	; 0x120c <GPIO_writePort+0x7a>
	{
		/* Setup the port value as required */
		switch(port_num)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3c 83       	std	Y+4, r19	; 0x04
    11b0:	2b 83       	std	Y+3, r18	; 0x03
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	d1 f0       	breq	.+52     	; 0x11f0 <GPIO_writePort+0x5e>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <GPIO_writePort+0x3e>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <GPIO_writePort+0x54>
    11ce:	1e c0       	rjmp	.+60     	; 0x120c <GPIO_writePort+0x7a>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	81 f0       	breq	.+32     	; 0x11fa <GPIO_writePort+0x68>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	81 f0       	breq	.+32     	; 0x1204 <GPIO_writePort+0x72>
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
    11ee:	0e c0       	rjmp	.+28     	; 0x120c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 83       	st	Z, r24
    1202:	04 c0       	rjmp	.+8      	; 0x120c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1204:	e2 e3       	ldi	r30, 0x32	; 50
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
			break;
		}
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <GPIO_readPort>:
/*
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <GPIO_readPort+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_readPort+0x8>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01
	if(port_num < NUM_OF_PORTS)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	84 30       	cpi	r24, 0x04	; 4
    122c:	98 f5       	brcc	.+102    	; 0x1294 <GPIO_readPort+0x7a>
	{
		/* Return the value of the desired port as required */
		switch(port_num)
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3c 83       	std	Y+4, r19	; 0x04
    1236:	2b 83       	std	Y+3, r18	; 0x03
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	d1 f0       	breq	.+52     	; 0x1276 <GPIO_readPort+0x5c>
    1242:	2b 81       	ldd	r18, Y+3	; 0x03
    1244:	3c 81       	ldd	r19, Y+4	; 0x04
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	2c f4       	brge	.+10     	; 0x1256 <GPIO_readPort+0x3c>
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	61 f0       	breq	.+24     	; 0x126c <GPIO_readPort+0x52>
    1254:	1f c0       	rjmp	.+62     	; 0x1294 <GPIO_readPort+0x7a>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	81 f0       	breq	.+32     	; 0x1280 <GPIO_readPort+0x66>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	91 05       	cpc	r25, r1
    1268:	81 f0       	breq	.+32     	; 0x128a <GPIO_readPort+0x70>
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    126c:	e9 e3       	ldi	r30, 0x39	; 57
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	90 81       	ld	r25, Z
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	10 c0       	rjmp	.+32     	; 0x1296 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    1276:	e6 e3       	ldi	r30, 0x36	; 54
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	20 81       	ld	r18, Z
    127c:	2a 83       	std	Y+2, r18	; 0x02
    127e:	0b c0       	rjmp	.+22     	; 0x1296 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    1280:	e3 e3       	ldi	r30, 0x33	; 51
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	30 81       	ld	r19, Z
    1286:	3a 83       	std	Y+2, r19	; 0x02
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    128a:	e0 e3       	ldi	r30, 0x30	; 48
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    1294:	1a 82       	std	Y+2, r1	; 0x02
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <__vector_1>:

/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(INT0_vect)
{
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt0 != NULL_PTR)
    12d0:	80 91 9e 00 	lds	r24, 0x009E
    12d4:	90 91 9f 00 	lds	r25, 0x009F
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	29 f0       	breq	.+10     	; 0x12e6 <__vector_1+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    12dc:	e0 91 9e 00 	lds	r30, 0x009E
    12e0:	f0 91 9f 00 	lds	r31, 0x009F
    12e4:	09 95       	icall
		}
}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	ff 91       	pop	r31
    12ec:	ef 91       	pop	r30
    12ee:	bf 91       	pop	r27
    12f0:	af 91       	pop	r26
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	7f 91       	pop	r23
    12f8:	6f 91       	pop	r22
    12fa:	5f 91       	pop	r21
    12fc:	4f 91       	pop	r20
    12fe:	3f 91       	pop	r19
    1300:	2f 91       	pop	r18
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <__vector_2>:

ISR(INT1_vect)
{
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	2f 93       	push	r18
    1318:	3f 93       	push	r19
    131a:	4f 93       	push	r20
    131c:	5f 93       	push	r21
    131e:	6f 93       	push	r22
    1320:	7f 93       	push	r23
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25
    1326:	af 93       	push	r26
    1328:	bf 93       	push	r27
    132a:	ef 93       	push	r30
    132c:	ff 93       	push	r31
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt1 != NULL_PTR)
    1336:	80 91 a0 00 	lds	r24, 0x00A0
    133a:	90 91 a1 00 	lds	r25, 0x00A1
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	29 f0       	breq	.+10     	; 0x134c <__vector_2+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1342:	e0 91 a0 00 	lds	r30, 0x00A0
    1346:	f0 91 a1 00 	lds	r31, 0x00A1
    134a:	09 95       	icall
		}
}
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_3>:

ISR(INT2_vect)
{
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt2 != NULL_PTR)
    139c:	80 91 a2 00 	lds	r24, 0x00A2
    13a0:	90 91 a3 00 	lds	r25, 0x00A3
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	29 f0       	breq	.+10     	; 0x13b2 <__vector_3+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    13a8:	e0 91 a2 00 	lds	r30, 0x00A2
    13ac:	f0 91 a3 00 	lds	r31, 0x00A3
    13b0:	09 95       	icall
		}
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	ff 91       	pop	r31
    13b8:	ef 91       	pop	r30
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti

000013d8 <INTERRUPT_enable>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void INTERRUPT_enable()
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);					/* Enable Global Interrupts */
    13e0:	af e5       	ldi	r26, 0x5F	; 95
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ef e5       	ldi	r30, 0x5F	; 95
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 68       	ori	r24, 0x80	; 128
    13ec:	8c 93       	st	X, r24
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <INTERRUPT_INT0_init>:
void INTERRUPT_INT0_init(void(*a_ptr)(void), InterruptSense sense)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <INTERRUPT_INT0_init+0x6>
    13fa:	0f 92       	push	r0
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	62 e0       	ldi	r22, 0x02	; 2
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GICR |= (1<<INT0);
    1410:	ab e5       	ldi	r26, 0x5B	; 91
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e5       	ldi	r30, 0x5B	; 91
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 64       	ori	r24, 0x40	; 64
    141c:	8c 93       	st	X, r24
	MCUCR &= 0xFC;
    141e:	a5 e5       	ldi	r26, 0x55	; 85
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e5       	ldi	r30, 0x55	; 85
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8c 7f       	andi	r24, 0xFC	; 252
    142a:	8c 93       	st	X, r24
	MCUCR |= (sense<<ISC00);
    142c:	a5 e5       	ldi	r26, 0x55	; 85
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e5 e5       	ldi	r30, 0x55	; 85
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	90 81       	ld	r25, Z
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	89 2b       	or	r24, r25
    143a:	8c 93       	st	X, r24
	g_callBackPtrInt0 = a_ptr;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	90 93 9f 00 	sts	0x009F, r25
    1444:	80 93 9e 00 	sts	0x009E, r24
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <INTERRUPT_INT1_init>:
void INTERRUPT_INT1_init(void(*a_ptr)(void), InterruptSense sense)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <INTERRUPT_INT1_init+0x6>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	63 e0       	ldi	r22, 0x03	; 3
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GICR |= (1<<INT1);
    1470:	ab e5       	ldi	r26, 0x5B	; 91
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e5       	ldi	r30, 0x5B	; 91
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	8c 93       	st	X, r24
	MCUCR &= 0xF3;
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	83 7f       	andi	r24, 0xF3	; 243
    148a:	8c 93       	st	X, r24
	MCUCR |= (sense<<ISC10);
    148c:	a5 e5       	ldi	r26, 0x55	; 85
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e5 e5       	ldi	r30, 0x55	; 85
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	82 2b       	or	r24, r18
    14a8:	8c 93       	st	X, r24
	g_callBackPtrInt1 = a_ptr;
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	90 93 a1 00 	sts	0x00A1, r25
    14b2:	80 93 a0 00 	sts	0x00A0, r24
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <INTERRUPT_INT2_init>:
void INTERRUPT_INT2_init(void(*a_ptr)(void), InterruptSense sense)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <INTERRUPT_INT2_init+0x6>
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT);
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	62 e0       	ldi	r22, 0x02	; 2
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GICR |= (1<<INT2);
    14de:	ab e5       	ldi	r26, 0x5B	; 91
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	eb e5       	ldi	r30, 0x5B	; 91
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 62       	ori	r24, 0x20	; 32
    14ea:	8c 93       	st	X, r24
	sense &= ~(1<<1);
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	8d 7f       	andi	r24, 0xFD	; 253
    14f0:	8b 83       	std	Y+3, r24	; 0x03
	MCUCSR =(MCUCSR & ~(1<<ISC2))|(sense<<ISC2);
    14f2:	a4 e5       	ldi	r26, 0x54	; 84
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e4 e5       	ldi	r30, 0x54	; 84
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	2f 7b       	andi	r18, 0xBF	; 191
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	00 24       	eor	r0, r0
    1508:	96 95       	lsr	r25
    150a:	87 95       	ror	r24
    150c:	07 94       	ror	r0
    150e:	96 95       	lsr	r25
    1510:	87 95       	ror	r24
    1512:	07 94       	ror	r0
    1514:	98 2f       	mov	r25, r24
    1516:	80 2d       	mov	r24, r0
    1518:	82 2b       	or	r24, r18
    151a:	8c 93       	st	X, r24
	g_callBackPtrInt2 = a_ptr;
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	90 93 a3 00 	sts	0x00A3, r25
    1524:	80 93 a2 00 	sts	0x00A2, r24
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <INTERRUPT_disable>:
void INTERRUPT_disable()
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
	SREG &= ~(1<<7);					/* Disable Global Interrupts */
    153c:	af e5       	ldi	r26, 0x5F	; 95
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ef e5       	ldi	r30, 0x5F	; 95
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8f 77       	andi	r24, 0x7F	; 127
    1548:	8c 93       	st	X, r24
}
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <__vector_11>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOVF0 != NULL_PTR)
    157a:	80 91 a4 00 	lds	r24, 0x00A4
    157e:	90 91 a5 00 	lds	r25, 0x00A5
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	29 f0       	breq	.+10     	; 0x1590 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOVF0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1586:	e0 91 a4 00 	lds	r30, 0x00A4
    158a:	f0 91 a5 00 	lds	r31, 0x00A5
    158e:	09 95       	icall
	}
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <TIMER0_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER0_init(TIMER0_CLK clk)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = 0;
    15c2:	e3 e5       	ldi	r30, 0x53	; 83
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	10 82       	st	Z, r1
	TCCR0 |= (1<<FOC0);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 68       	ori	r24, 0x80	; 128
    15d4:	8c 93       	st	X, r24
	g_clock = clk;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	80 93 a6 00 	sts	0x00A6, r24
	TCNT0 = 0;
    15dc:	e2 e5       	ldi	r30, 0x52	; 82
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	10 82       	st	Z, r1
}
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <TIMER0_on>:

void TIMER0_on()
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;
    15f2:	a3 e5       	ldi	r26, 0x53	; 83
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e3 e5       	ldi	r30, 0x53	; 83
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 7f       	andi	r24, 0xF8	; 248
    15fe:	8c 93       	st	X, r24
	TCCR0 |= (g_clock<<CS00);
    1600:	a3 e5       	ldi	r26, 0x53	; 83
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e3 e5       	ldi	r30, 0x53	; 83
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	90 81       	ld	r25, Z
    160a:	80 91 a6 00 	lds	r24, 0x00A6
    160e:	89 2b       	or	r24, r25
    1610:	8c 93       	st	X, r24
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <TIMER0_off>:

void TIMER0_off()
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;
    1620:	a3 e5       	ldi	r26, 0x53	; 83
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e3 e5       	ldi	r30, 0x53	; 83
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	88 7f       	andi	r24, 0xF8	; 248
    162c:	8c 93       	st	X, r24
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <TIMER0_read>:

uint8 TIMER0_read()
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    163c:	e2 e5       	ldi	r30, 0x52	; 82
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <TIMER0_write>:

void TIMER0_write(uint8 time)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	0f 92       	push	r0
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = time;
    1654:	e2 e5       	ldi	r30, 0x52	; 82
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	80 83       	st	Z, r24
}
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <TIMER0_interruptEnable>:

void TIMER0_interruptEnable()
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);
    166c:	a9 e5       	ldi	r26, 0x59	; 89
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e9 e5       	ldi	r30, 0x59	; 89
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	81 60       	ori	r24, 0x01	; 1
    1678:	8c 93       	st	X, r24
}
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <TIMER0_setCallback>:

void TIMER0_setCallback(void(*a_ptr)(void))
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <TIMER0_setCallback+0x6>
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrOVF0 = a_ptr;
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	90 93 a5 00 	sts	0x00A5, r25
    1696:	80 93 a4 00 	sts	0x00A4, r24
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <TIMER0_interruptDisable>:

void TIMER0_interruptDisable()
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE0);
    16ac:	a9 e5       	ldi	r26, 0x59	; 89
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e9 e5       	ldi	r30, 0x59	; 89
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8e 7f       	andi	r24, 0xFE	; 254
    16b8:	8c 93       	st	X, r24
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <__vector_5>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(TIMER2_OVF_vect)
{
    16c0:	1f 92       	push	r1
    16c2:	0f 92       	push	r0
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	0f 92       	push	r0
    16c8:	11 24       	eor	r1, r1
    16ca:	2f 93       	push	r18
    16cc:	3f 93       	push	r19
    16ce:	4f 93       	push	r20
    16d0:	5f 93       	push	r21
    16d2:	6f 93       	push	r22
    16d4:	7f 93       	push	r23
    16d6:	8f 93       	push	r24
    16d8:	9f 93       	push	r25
    16da:	af 93       	push	r26
    16dc:	bf 93       	push	r27
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOVF2 != NULL_PTR)
    16ea:	80 91 a7 00 	lds	r24, 0x00A7
    16ee:	90 91 a8 00 	lds	r25, 0x00A8
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	29 f0       	breq	.+10     	; 0x1700 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOVF2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    16f6:	e0 91 a7 00 	lds	r30, 0x00A7
    16fa:	f0 91 a8 00 	lds	r31, 0x00A8
    16fe:	09 95       	icall
	}
}
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	bf 91       	pop	r27
    170a:	af 91       	pop	r26
    170c:	9f 91       	pop	r25
    170e:	8f 91       	pop	r24
    1710:	7f 91       	pop	r23
    1712:	6f 91       	pop	r22
    1714:	5f 91       	pop	r21
    1716:	4f 91       	pop	r20
    1718:	3f 91       	pop	r19
    171a:	2f 91       	pop	r18
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	0f 90       	pop	r0
    1722:	1f 90       	pop	r1
    1724:	18 95       	reti

00001726 <TIMER2_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER2_init(TIMER2_CLK clk)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	0f 92       	push	r0
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 = 0;
    1732:	e5 e4       	ldi	r30, 0x45	; 69
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	10 82       	st	Z, r1
	TCCR2 |= (1<<FOC2);
    1738:	a5 e4       	ldi	r26, 0x45	; 69
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e5 e4       	ldi	r30, 0x45	; 69
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	80 68       	ori	r24, 0x80	; 128
    1744:	8c 93       	st	X, r24
	g_clock = clk;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	80 93 a9 00 	sts	0x00A9, r24
	TCNT2 = 0;
    174c:	e4 e4       	ldi	r30, 0x44	; 68
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	10 82       	st	Z, r1
}
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <TIMER2_on>:

void TIMER2_on()
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0xF8;
    1762:	a5 e4       	ldi	r26, 0x45	; 69
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e5 e4       	ldi	r30, 0x45	; 69
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 7f       	andi	r24, 0xF8	; 248
    176e:	8c 93       	st	X, r24
	TCCR2 |= (g_clock<<CS20);
    1770:	a5 e4       	ldi	r26, 0x45	; 69
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e4       	ldi	r30, 0x45	; 69
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	90 81       	ld	r25, Z
    177a:	80 91 a9 00 	lds	r24, 0x00A9
    177e:	89 2b       	or	r24, r25
    1780:	8c 93       	st	X, r24
}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <TIMER2_off>:

void TIMER2_off()
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0xF8;
    1790:	a5 e4       	ldi	r26, 0x45	; 69
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e5 e4       	ldi	r30, 0x45	; 69
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	88 7f       	andi	r24, 0xF8	; 248
    179c:	8c 93       	st	X, r24
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <TIMER2_read>:

uint8 TIMER2_read()
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    17ac:	e4 e4       	ldi	r30, 0x44	; 68
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
}
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <TIMER2_write>:

void TIMER2_write(uint8 time)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	0f 92       	push	r0
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = time;
    17c4:	e4 e4       	ldi	r30, 0x44	; 68
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	80 83       	st	Z, r24
}
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <TIMER2_interruptEnable>:

void TIMER2_interruptEnable()
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE2);
    17dc:	a9 e5       	ldi	r26, 0x59	; 89
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e9 e5       	ldi	r30, 0x59	; 89
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 64       	ori	r24, 0x40	; 64
    17e8:	8c 93       	st	X, r24
}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <TIMER2_setCallback>:

void TIMER2_setCallback(void(*a_ptr)(void))
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <TIMER2_setCallback+0x6>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrOVF2 = a_ptr;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	90 93 a8 00 	sts	0x00A8, r25
    1806:	80 93 a7 00 	sts	0x00A7, r24
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <TIMER2_interruptDisable>:

void TIMER2_interruptDisable()
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE2);
    181c:	a9 e5       	ldi	r26, 0x59	; 89
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e9 e5       	ldi	r30, 0x59	; 89
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8f 7b       	andi	r24, 0xBF	; 191
    1828:	8c 93       	st	X, r24
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <UART_init+0x6>
    1836:	00 d0       	rcall	.+0      	; 0x1838 <UART_init+0x8>
    1838:	00 d0       	rcall	.+0      	; 0x183a <UART_init+0xa>
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	6b 83       	std	Y+3, r22	; 0x03
    1840:	7c 83       	std	Y+4, r23	; 0x04
    1842:	8d 83       	std	Y+5, r24	; 0x05
    1844:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    1846:	1a 82       	std	Y+2, r1	; 0x02
    1848:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    184a:	eb e2       	ldi	r30, 0x2B	; 43
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	82 e0       	ldi	r24, 0x02	; 2
    1850:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1852:	ea e2       	ldi	r30, 0x2A	; 42
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	88 e1       	ldi	r24, 0x18	; 24
    1858:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    185a:	e0 e4       	ldi	r30, 0x40	; 64
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	86 e8       	ldi	r24, 0x86	; 134
    1860:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	ad 81       	ldd	r26, Y+5	; 0x05
    1868:	be 81       	ldd	r27, Y+6	; 0x06
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	aa 1f       	adc	r26, r26
    1870:	bb 1f       	adc	r27, r27
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	aa 1f       	adc	r26, r26
    1878:	bb 1f       	adc	r27, r27
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	aa 1f       	adc	r26, r26
    1880:	bb 1f       	adc	r27, r27
    1882:	9c 01       	movw	r18, r24
    1884:	ad 01       	movw	r20, r26
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	92 e1       	ldi	r25, 0x12	; 18
    188a:	aa e7       	ldi	r26, 0x7A	; 122
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 b2 1c 	call	0x3964	; 0x3964 <__udivmodsi4>
    1896:	da 01       	movw	r26, r20
    1898:	c9 01       	movw	r24, r18
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    18a0:	e0 e4       	ldi	r30, 0x40	; 64
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	9a 81       	ldd	r25, Y+2	; 0x02
    18a8:	89 2f       	mov	r24, r25
    18aa:	99 27       	eor	r25, r25
    18ac:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    18ae:	e9 e2       	ldi	r30, 0x29	; 41
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	80 83       	st	Z, r24
}
    18b6:	26 96       	adiw	r28, 0x06	; 6
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	0f 92       	push	r0
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    18d4:	eb e2       	ldi	r30, 0x2B	; 43
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	80 72       	andi	r24, 0x20	; 32
    18e0:	90 70       	andi	r25, 0x00	; 0
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	b9 f3       	breq	.-18     	; 0x18d4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    18e6:	ec e2       	ldi	r30, 0x2C	; 44
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)); // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    18fe:	eb e2       	ldi	r30, 0x2B	; 43
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	88 23       	and	r24, r24
    1906:	dc f7       	brge	.-10     	; 0x18fe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1908:	ec e2       	ldi	r30, 0x2C	; 44
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
}
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <UART_sendString+0x6>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9b 83       	std	Y+3, r25	; 0x03
    1922:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1924:	19 82       	std	Y+1, r1	; 0x01
    1926:	0e c0       	rjmp	.+28     	; 0x1944 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	9b 81       	ldd	r25, Y+3	; 0x03
    1932:	fc 01       	movw	r30, r24
    1934:	e2 0f       	add	r30, r18
    1936:	f3 1f       	adc	r31, r19
    1938:	80 81       	ld	r24, Z
    193a:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <UART_sendByte>
		i++;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	fc 01       	movw	r30, r24
    1950:	e2 0f       	add	r30, r18
    1952:	f3 1f       	adc	r31, r19
    1954:	80 81       	ld	r24, Z
    1956:	88 23       	and	r24, r24
    1958:	39 f7       	brne	.-50     	; 0x1928 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <UART_receiveString+0xa>
    1970:	0f 92       	push	r0
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9b 83       	std	Y+3, r25	; 0x03
    1978:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    197a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	9b 81       	ldd	r25, Y+3	; 0x03
    1986:	8c 01       	movw	r16, r24
    1988:	02 0f       	add	r16, r18
    198a:	13 1f       	adc	r17, r19
    198c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <UART_recieveByte>
    1990:	f8 01       	movw	r30, r16
    1992:	80 83       	st	Z, r24
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	8c 01       	movw	r16, r24
    19a8:	02 0f       	add	r16, r18
    19aa:	13 1f       	adc	r17, r19
    19ac:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <UART_recieveByte>
    19b0:	f8 01       	movw	r30, r16
    19b2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	9b 81       	ldd	r25, Y+3	; 0x03
    19be:	fc 01       	movw	r30, r24
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
    19c4:	80 81       	ld	r24, Z
    19c6:	83 32       	cpi	r24, 0x23	; 35
    19c8:	31 f7       	brne	.-52     	; 0x1996 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	9b 81       	ldd	r25, Y+3	; 0x03
    19d4:	fc 01       	movw	r30, r24
    19d6:	e2 0f       	add	r30, r18
    19d8:	f3 1f       	adc	r31, r19
    19da:	10 82       	st	Z, r1
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <FLAME_init>:

#include "flame_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void FLAME_init()
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(FLAME_PORTID, FLAME_PINID, PIN_INPUT);
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	62 e0       	ldi	r22, 0x02	; 2
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <FLAME_read>:
uint8 FLAME_read()
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(FLAME_PORTID, FLAME_PINID);
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	62 e0       	ldi	r22, 0x02	; 2
    1a10:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <MQ9_init>:

#include "mq9_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void MQ9_init()
{
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MQ9_PORTID, MQ9_PINID, PIN_INPUT);
    1a22:	83 e0       	ldi	r24, 0x03	; 3
    1a24:	63 e0       	ldi	r22, 0x03	; 3
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <MQ9_read>:
uint8 MQ9_read()
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(MQ9_PORTID, MQ9_PINID);
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	63 e0       	ldi	r22, 0x03	; 3
    1a3e:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <PIR_init>:

#include "pir_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void PIR_init()
{
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORTID, PIR_PINID, PIN_INPUT);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	63 e0       	ldi	r22, 0x03	; 3
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <PIR_read>:
uint8 PIR_read()
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORTID, PIR_PINID);
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	63 e0       	ldi	r22, 0x03	; 3
    1a6c:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <WATER_init>:

#include "water_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void WATER_init()
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(WATER_PORTID, WATER_PINID, PIN_INPUT);
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	62 e0       	ldi	r22, 0x02	; 2
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <WATER_read>:
uint8 WATER_read()
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(WATER_PORTID, WATER_PINID);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	62 e0       	ldi	r22, 0x02	; 2
    1a9a:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <BUZZER_init>:
#include "buzzer.h"

#include "../../mcal/atmega32_gpio.h"

void BUZZER_init(Buzzer* buzzer)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <BUZZER_init+0x6>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(buzzer->portID, buzzer->pinID, PIN_OUTPUT);
    1ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab6:	80 81       	ld	r24, Z
    1ab8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aba:	fa 81       	ldd	r31, Y+2	; 0x02
    1abc:	91 81       	ldd	r25, Z+1	; 0x01
    1abe:	69 2f       	mov	r22, r25
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <BUZZER_on>:
void BUZZER_on(Buzzer* buzzer)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <BUZZER_on+0x6>
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(buzzer->portID, buzzer->pinID, LOGIC_HIGH);
    1ade:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae2:	80 81       	ld	r24, Z
    1ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae8:	91 81       	ldd	r25, Z+1	; 0x01
    1aea:	69 2f       	mov	r22, r25
    1aec:	41 e0       	ldi	r20, 0x01	; 1
    1aee:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <BUZZER_off>:
void BUZZER_off(Buzzer* buzzer)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <BUZZER_off+0x6>
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(buzzer->portID, buzzer->pinID, LOGIC_LOW);
    1b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0e:	80 81       	ld	r24, Z
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	69 2f       	mov	r22, r25
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <DCMOTOR_init>:
#include "dc_motor.h"

#include "../../mcal/atmega32_gpio.h"

void DCMOTOR_init(DCMotor* motor)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <DCMOTOR_init+0x6>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(motor->portID, motor->pinID, PIN_OUTPUT);
    1b36:	e9 81       	ldd	r30, Y+1	; 0x01
    1b38:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3a:	80 81       	ld	r24, Z
    1b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	69 2f       	mov	r22, r25
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <DCMOTOR_on>:
void DCMOTOR_on(DCMotor* motor)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <DCMOTOR_on+0x6>
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(motor->portID, motor->pinID, LOGIC_HIGH);
    1b62:	e9 81       	ldd	r30, Y+1	; 0x01
    1b64:	fa 81       	ldd	r31, Y+2	; 0x02
    1b66:	80 81       	ld	r24, Z
    1b68:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	69 2f       	mov	r22, r25
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <DCMOTOR_off>:
void DCMOTOR_off(DCMotor* motor)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <DCMOTOR_off+0x6>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(motor->portID, motor->pinID, LOGIC_LOW);
    1b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b90:	fa 81       	ldd	r31, Y+2	; 0x02
    1b92:	80 81       	ld	r24, Z
    1b94:	e9 81       	ldd	r30, Y+1	; 0x01
    1b96:	fa 81       	ldd	r31, Y+2	; 0x02
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	69 2f       	mov	r22, r25
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <KEYPAD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KEYPAD_init(void)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	61 e0       	ldi	r22, 0x01	; 1
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	62 e0       	ldi	r22, 0x02	; 2
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	63 e0       	ldi	r22, 0x03	; 3
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	64 e0       	ldi	r22, 0x04	; 4
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	65 e0       	ldi	r22, 0x05	; 5
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	66 e0       	ldi	r22, 0x06	; 6
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
}
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <KEYPAD_getPressedKey>:

uint8 KEYPAD_getPressedKey(void)
{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	61 97       	sbiw	r28, 0x11	; 17
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1c14:	1f 86       	std	Y+15, r1	; 0x0f
    1c16:	a0 c0       	rjmp	.+320    	; 0x1d58 <KEYPAD_getPressedKey+0x158>
	{
		/* Set/Clear the row output pin */
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
		for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c22:	18 8a       	std	Y+16, r1	; 0x10
    1c24:	1c c0       	rjmp	.+56     	; 0x1c5e <KEYPAD_getPressedKey+0x5e>
		{
			/* Check if the switch is pressed in this column */
			if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1c26:	88 89       	ldd	r24, Y+16	; 0x10
    1c28:	98 2f       	mov	r25, r24
    1c2a:	9c 5f       	subi	r25, 0xFC	; 252
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	69 2f       	mov	r22, r25
    1c30:	0e 94 dd 07 	call	0xfba	; 0xfba <GPIO_readPin>
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	81 f4       	brne	.+32     	; 0x1c58 <KEYPAD_getPressedKey+0x58>
			{
#if (KEYPAD_NUM_COLS == 3)
#ifdef STANDARD_KEYPAD
				return ((row*KEYPAD_NUM_COLS)+col+1);
#else
				return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1c38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	c9 01       	movw	r24, r18
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	82 0f       	add	r24, r18
    1c46:	93 1f       	adc	r25, r19
    1c48:	98 2f       	mov	r25, r24
    1c4a:	88 89       	ldd	r24, Y+16	; 0x10
    1c4c:	89 0f       	add	r24, r25
    1c4e:	8f 5f       	subi	r24, 0xFF	; 255
    1c50:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <KEYPAD_4x3_adjustKeyNumber>
    1c54:	89 8b       	std	Y+17, r24	; 0x11
    1c56:	86 c0       	rjmp	.+268    	; 0x1d64 <KEYPAD_getPressedKey+0x164>
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
	{
		/* Set/Clear the row output pin */
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
		for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c58:	88 89       	ldd	r24, Y+16	; 0x10
    1c5a:	8f 5f       	subi	r24, 0xFF	; 255
    1c5c:	88 8b       	std	Y+16, r24	; 0x10
    1c5e:	88 89       	ldd	r24, Y+16	; 0x10
    1c60:	83 30       	cpi	r24, 0x03	; 3
    1c62:	08 f3       	brcs	.-62     	; 0x1c26 <KEYPAD_getPressedKey+0x26>
#endif
#endif
			}
		}
		//		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    1c64:	82 e0       	ldi	r24, 0x02	; 2
    1c66:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 ea       	ldi	r26, 0xA0	; 160
    1c74:	b0 e4       	ldi	r27, 0x40	; 64
    1c76:	8b 87       	std	Y+11, r24	; 0x0b
    1c78:	9c 87       	std	Y+12, r25	; 0x0c
    1c7a:	ad 87       	std	Y+13, r26	; 0x0d
    1c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a ef       	ldi	r20, 0xFA	; 250
    1c8c:	54 e4       	ldi	r21, 0x44	; 68
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8f 83       	std	Y+7, r24	; 0x07
    1c98:	98 87       	std	Y+8, r25	; 0x08
    1c9a:	a9 87       	std	Y+9, r26	; 0x09
    1c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <KEYPAD_getPressedKey+0xc0>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <KEYPAD_getPressedKey+0x13e>
	else if (__tmp > 65535)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <KEYPAD_getPressedKey+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <KEYPAD_getPressedKey+0x120>
    1d02:	88 ec       	ldi	r24, 0xC8	; 200
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <KEYPAD_getPressedKey+0x10e>
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <KEYPAD_getPressedKey+0x102>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <KEYPAD_getPressedKey+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <KEYPAD_getPressedKey+0x14a>
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
}

uint8 KEYPAD_getPressedKey(void)
{
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	8f 87       	std	Y+15, r24	; 0x0f
    1d58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	08 f4       	brcc	.+2      	; 0x1d60 <KEYPAD_getPressedKey+0x160>
    1d5e:	5c cf       	rjmp	.-328    	; 0x1c18 <KEYPAD_getPressedKey+0x18>
		}
		//		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
	}
	return KEYPAD_NO_PRESS;
    1d60:	80 e2       	ldi	r24, 0x20	; 32
    1d62:	89 8b       	std	Y+17, r24	; 0x11
    1d64:	89 89       	ldd	r24, Y+17	; 0x11
}
    1d66:	61 96       	adiw	r28, 0x11	; 17
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <KEYPAD_4x3_adjustKeyNumber+0x6>
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <KEYPAD_4x3_adjustKeyNumber+0x8>
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d86:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3c 83       	std	Y+4, r19	; 0x04
    1d90:	2b 83       	std	Y+3, r18	; 0x03
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	8a 30       	cpi	r24, 0x0A	; 10
    1d98:	91 05       	cpc	r25, r1
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <KEYPAD_4x3_adjustKeyNumber+0x44>
    1d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1da0:	2a 30       	cpi	r18, 0x0A	; 10
    1da2:	31 05       	cpc	r19, r1
    1da4:	9c f0       	brlt	.+38     	; 0x1dcc <KEYPAD_4x3_adjustKeyNumber+0x54>
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	8b 30       	cpi	r24, 0x0B	; 11
    1dac:	91 05       	cpc	r25, r1
    1dae:	49 f0       	breq	.+18     	; 0x1dc2 <KEYPAD_4x3_adjustKeyNumber+0x4a>
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	2c 30       	cpi	r18, 0x0C	; 12
    1db6:	31 05       	cpc	r19, r1
    1db8:	31 f0       	breq	.+12     	; 0x1dc6 <KEYPAD_4x3_adjustKeyNumber+0x4e>
    1dba:	08 c0       	rjmp	.+16     	; 0x1dcc <KEYPAD_4x3_adjustKeyNumber+0x54>
	{
	case 10: keypad_button = '*'; // ASCII Code of *
    1dbc:	8a e2       	ldi	r24, 0x2A	; 42
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	case 11: keypad_button = 0;
    1dc2:	19 82       	std	Y+1, r1	; 0x01
    1dc4:	05 c0       	rjmp	.+10     	; 0x1dd0 <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	case 12: keypad_button = '#'; // ASCII Code of #
    1dc6:	83 e2       	ldi	r24, 0x23	; 35
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	default: keypad_button = button_number;
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	2e 97       	sbiw	r28, 0x0e	; 14
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	61 e0       	ldi	r22, 0x01	; 1
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e0e:	b1 e4       	ldi	r27, 0x41	; 65
    1e10:	8b 87       	std	Y+11, r24	; 0x0b
    1e12:	9c 87       	std	Y+12, r25	; 0x0c
    1e14:	ad 87       	std	Y+13, r26	; 0x0d
    1e16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	4a ef       	ldi	r20, 0xFA	; 250
    1e26:	54 e4       	ldi	r21, 0x44	; 68
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	8f 83       	std	Y+7, r24	; 0x07
    1e32:	98 87       	std	Y+8, r25	; 0x08
    1e34:	a9 87       	std	Y+9, r26	; 0x09
    1e36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	5f e3       	ldi	r21, 0x3F	; 63
    1e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <LCD_init+0x7a>
		__ticks = 1;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9e 83       	std	Y+6, r25	; 0x06
    1e56:	8d 83       	std	Y+5, r24	; 0x05
    1e58:	3f c0       	rjmp	.+126    	; 0x1ed8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5c:	78 85       	ldd	r23, Y+8	; 0x08
    1e5e:	89 85       	ldd	r24, Y+9	; 0x09
    1e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	3f ef       	ldi	r19, 0xFF	; 255
    1e66:	4f e7       	ldi	r20, 0x7F	; 127
    1e68:	57 e4       	ldi	r21, 0x47	; 71
    1e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e6e:	18 16       	cp	r1, r24
    1e70:	4c f5       	brge	.+82     	; 0x1ec4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e2       	ldi	r20, 0x20	; 32
    1e80:	51 e4       	ldi	r21, 0x41	; 65
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	9e 83       	std	Y+6, r25	; 0x06
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	0f c0       	rjmp	.+30     	; 0x1eba <LCD_init+0xda>
    1e9c:	88 ec       	ldi	r24, 0xC8	; 200
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9c 83       	std	Y+4, r25	; 0x04
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_init+0xc8>
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	9e 83       	std	Y+6, r25	; 0x06
    1eb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eba:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	69 f7       	brne	.-38     	; 0x1e9c <LCD_init+0xbc>
    1ec2:	14 c0       	rjmp	.+40     	; 0x1eec <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <LCD_init+0x104>
    1ee8:	9a 83       	std	Y+2, r25	; 0x02
    1eea:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	62 e0       	ldi	r22, 0x02	; 2
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	63 e0       	ldi	r22, 0x03	; 3
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	64 e0       	ldi	r22, 0x04	; 4
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	65 e0       	ldi	r22, 0x05	; 5
    1f0e:	41 e0       	ldi	r20, 0x01	; 1
    1f10:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1f14:	83 e3       	ldi	r24, 0x33	; 51
    1f16:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1f1a:	82 e3       	ldi	r24, 0x32	; 50
    1f1c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1f20:	88 e2       	ldi	r24, 0x28	; 40
    1f22:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f26:	8c e0       	ldi	r24, 0x0C	; 12
    1f28:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
}
    1f32:	2e 96       	adiw	r28, 0x0e	; 14
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	c3 56       	subi	r28, 0x63	; 99
    1f52:	d0 40       	sbci	r29, 0x00	; 0
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	fe 01       	movw	r30, r28
    1f60:	ed 59       	subi	r30, 0x9D	; 157
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    1f70:	fe 01       	movw	r30, r28
    1f72:	e1 5a       	subi	r30, 0xA1	; 161
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a0 e8       	ldi	r26, 0x80	; 128
    1f7c:	bf e3       	ldi	r27, 0x3F	; 63
    1f7e:	80 83       	st	Z, r24
    1f80:	91 83       	std	Z+1, r25	; 0x01
    1f82:	a2 83       	std	Z+2, r26	; 0x02
    1f84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f86:	8e 01       	movw	r16, r28
    1f88:	05 5a       	subi	r16, 0xA5	; 165
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e1 5a       	subi	r30, 0xA1	; 161
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a ef       	ldi	r20, 0xFA	; 250
    1fa0:	54 e4       	ldi	r21, 0x44	; 68
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	f8 01       	movw	r30, r16
    1fac:	80 83       	st	Z, r24
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	a2 83       	std	Z+2, r26	; 0x02
    1fb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	e5 5a       	subi	r30, 0xA5	; 165
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	60 81       	ld	r22, Z
    1fbc:	71 81       	ldd	r23, Z+1	; 0x01
    1fbe:	82 81       	ldd	r24, Z+2	; 0x02
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	44 f4       	brge	.+16     	; 0x1fe2 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e7 5a       	subi	r30, 0xA7	; 167
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
    1fe0:	64 c0       	rjmp	.+200    	; 0x20aa <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e5 5a       	subi	r30, 0xA5	; 165
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	0c f0       	brlt	.+2      	; 0x2002 <LCD_sendCommand+0xbe>
    2000:	43 c0       	rjmp	.+134    	; 0x2088 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	fe 01       	movw	r30, r28
    2004:	e1 5a       	subi	r30, 0xA1	; 161
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8e 01       	movw	r16, r28
    2022:	07 5a       	subi	r16, 0xA7	; 167
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	f8 01       	movw	r30, r16
    2034:	91 83       	std	Z+1, r25	; 0x01
    2036:	80 83       	st	Z, r24
    2038:	1f c0       	rjmp	.+62     	; 0x2078 <LCD_sendCommand+0x134>
    203a:	fe 01       	movw	r30, r28
    203c:	e9 5a       	subi	r30, 0xA9	; 169
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
    2048:	fe 01       	movw	r30, r28
    204a:	e9 5a       	subi	r30, 0xA9	; 169
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_sendCommand+0x10e>
    2056:	fe 01       	movw	r30, r28
    2058:	e9 5a       	subi	r30, 0xA9	; 169
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	de 01       	movw	r26, r28
    2062:	a7 5a       	subi	r26, 0xA7	; 167
    2064:	bf 4f       	sbci	r27, 0xFF	; 255
    2066:	fe 01       	movw	r30, r28
    2068:	e7 5a       	subi	r30, 0xA7	; 167
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	80 81       	ld	r24, Z
    206e:	91 81       	ldd	r25, Z+1	; 0x01
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	11 96       	adiw	r26, 0x01	; 1
    2074:	9c 93       	st	X, r25
    2076:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	fe 01       	movw	r30, r28
    207a:	e7 5a       	subi	r30, 0xA7	; 167
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	80 81       	ld	r24, Z
    2080:	91 81       	ldd	r25, Z+1	; 0x01
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	d1 f6       	brne	.-76     	; 0x203a <LCD_sendCommand+0xf6>
    2086:	27 c0       	rjmp	.+78     	; 0x20d6 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	8e 01       	movw	r16, r28
    208a:	07 5a       	subi	r16, 0xA7	; 167
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	fe 01       	movw	r30, r28
    2090:	e5 5a       	subi	r30, 0xA5	; 165
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	60 81       	ld	r22, Z
    2096:	71 81       	ldd	r23, Z+1	; 0x01
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
    20aa:	de 01       	movw	r26, r28
    20ac:	ab 5a       	subi	r26, 0xAB	; 171
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	fe 01       	movw	r30, r28
    20b2:	e7 5a       	subi	r30, 0xA7	; 167
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	8d 93       	st	X+, r24
    20bc:	9c 93       	st	X, r25
    20be:	fe 01       	movw	r30, r28
    20c0:	eb 5a       	subi	r30, 0xAB	; 171
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_sendCommand+0x184>
    20cc:	fe 01       	movw	r30, r28
    20ce:	eb 5a       	subi	r30, 0xAB	; 171
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    20e0:	fe 01       	movw	r30, r28
    20e2:	ef 5a       	subi	r30, 0xAF	; 175
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e8       	ldi	r26, 0x80	; 128
    20ec:	bf e3       	ldi	r27, 0x3F	; 63
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f6:	8e 01       	movw	r16, r28
    20f8:	03 5b       	subi	r16, 0xB3	; 179
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	fe 01       	movw	r30, r28
    20fe:	ef 5a       	subi	r30, 0xAF	; 175
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a ef       	ldi	r20, 0xFA	; 250
    2110:	54 e4       	ldi	r21, 0x44	; 68
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	f8 01       	movw	r30, r16
    211c:	80 83       	st	Z, r24
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	a2 83       	std	Z+2, r26	; 0x02
    2122:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2124:	fe 01       	movw	r30, r28
    2126:	e3 5b       	subi	r30, 0xB3	; 179
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	44 f4       	brge	.+16     	; 0x2152 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2142:	fe 01       	movw	r30, r28
    2144:	e5 5b       	subi	r30, 0xB5	; 181
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	80 83       	st	Z, r24
    2150:	64 c0       	rjmp	.+200    	; 0x221a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2152:	fe 01       	movw	r30, r28
    2154:	e3 5b       	subi	r30, 0xB3	; 179
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	0c f0       	brlt	.+2      	; 0x2172 <LCD_sendCommand+0x22e>
    2170:	43 c0       	rjmp	.+134    	; 0x21f8 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	fe 01       	movw	r30, r28
    2174:	ef 5a       	subi	r30, 0xAF	; 175
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	8e 01       	movw	r16, r28
    2192:	05 5b       	subi	r16, 0xB5	; 181
    2194:	1f 4f       	sbci	r17, 0xFF	; 255
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	f8 01       	movw	r30, r16
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	1f c0       	rjmp	.+62     	; 0x21e8 <LCD_sendCommand+0x2a4>
    21aa:	fe 01       	movw	r30, r28
    21ac:	e7 5b       	subi	r30, 0xB7	; 183
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	88 ec       	ldi	r24, 0xC8	; 200
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	91 83       	std	Z+1, r25	; 0x01
    21b6:	80 83       	st	Z, r24
    21b8:	fe 01       	movw	r30, r28
    21ba:	e7 5b       	subi	r30, 0xB7	; 183
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_sendCommand+0x27e>
    21c6:	fe 01       	movw	r30, r28
    21c8:	e7 5b       	subi	r30, 0xB7	; 183
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	de 01       	movw	r26, r28
    21d2:	a5 5b       	subi	r26, 0xB5	; 181
    21d4:	bf 4f       	sbci	r27, 0xFF	; 255
    21d6:	fe 01       	movw	r30, r28
    21d8:	e5 5b       	subi	r30, 0xB5	; 181
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 93       	st	X, r25
    21e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	fe 01       	movw	r30, r28
    21ea:	e5 5b       	subi	r30, 0xB5	; 181
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	d1 f6       	brne	.-76     	; 0x21aa <LCD_sendCommand+0x266>
    21f6:	27 c0       	rjmp	.+78     	; 0x2246 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	8e 01       	movw	r16, r28
    21fa:	05 5b       	subi	r16, 0xB5	; 181
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	fe 01       	movw	r30, r28
    2200:	e3 5b       	subi	r30, 0xB3	; 179
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	71 81       	ldd	r23, Z+1	; 0x01
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	93 81       	ldd	r25, Z+3	; 0x03
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	f8 01       	movw	r30, r16
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
    221a:	de 01       	movw	r26, r28
    221c:	a9 5b       	subi	r26, 0xB9	; 185
    221e:	bf 4f       	sbci	r27, 0xFF	; 255
    2220:	fe 01       	movw	r30, r28
    2222:	e5 5b       	subi	r30, 0xB5	; 181
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	80 81       	ld	r24, Z
    2228:	91 81       	ldd	r25, Z+1	; 0x01
    222a:	8d 93       	st	X+, r24
    222c:	9c 93       	st	X, r25
    222e:	fe 01       	movw	r30, r28
    2230:	e9 5b       	subi	r30, 0xB9	; 185
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_sendCommand+0x2f4>
    223c:	fe 01       	movw	r30, r28
    223e:	e9 5b       	subi	r30, 0xB9	; 185
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2246:	fe 01       	movw	r30, r28
    2248:	ed 59       	subi	r30, 0x9D	; 157
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	80 71       	andi	r24, 0x10	; 16
    2254:	90 70       	andi	r25, 0x00	; 0
    2256:	95 95       	asr	r25
    2258:	87 95       	ror	r24
    225a:	95 95       	asr	r25
    225c:	87 95       	ror	r24
    225e:	95 95       	asr	r25
    2260:	87 95       	ror	r24
    2262:	95 95       	asr	r25
    2264:	87 95       	ror	r24
    2266:	98 2f       	mov	r25, r24
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	62 e0       	ldi	r22, 0x02	; 2
    226c:	49 2f       	mov	r20, r25
    226e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2272:	fe 01       	movw	r30, r28
    2274:	ed 59       	subi	r30, 0x9D	; 157
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	80 72       	andi	r24, 0x20	; 32
    2280:	90 70       	andi	r25, 0x00	; 0
    2282:	95 95       	asr	r25
    2284:	87 95       	ror	r24
    2286:	95 95       	asr	r25
    2288:	87 95       	ror	r24
    228a:	95 95       	asr	r25
    228c:	87 95       	ror	r24
    228e:	95 95       	asr	r25
    2290:	87 95       	ror	r24
    2292:	95 95       	asr	r25
    2294:	87 95       	ror	r24
    2296:	98 2f       	mov	r25, r24
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	63 e0       	ldi	r22, 0x03	; 3
    229c:	49 2f       	mov	r20, r25
    229e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    22a2:	fe 01       	movw	r30, r28
    22a4:	ed 59       	subi	r30, 0x9D	; 157
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	80 74       	andi	r24, 0x40	; 64
    22b0:	90 70       	andi	r25, 0x00	; 0
    22b2:	08 2e       	mov	r0, r24
    22b4:	89 2f       	mov	r24, r25
    22b6:	00 0c       	add	r0, r0
    22b8:	88 1f       	adc	r24, r24
    22ba:	99 0b       	sbc	r25, r25
    22bc:	00 0c       	add	r0, r0
    22be:	88 1f       	adc	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	98 2f       	mov	r25, r24
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	64 e0       	ldi	r22, 0x04	; 4
    22c8:	49 2f       	mov	r20, r25
    22ca:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    22ce:	fe 01       	movw	r30, r28
    22d0:	ed 59       	subi	r30, 0x9D	; 157
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	98 2f       	mov	r25, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	99 27       	eor	r25, r25
    22dc:	99 1f       	adc	r25, r25
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	65 e0       	ldi	r22, 0x05	; 5
    22e2:	49 2f       	mov	r20, r25
    22e4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    22e8:	fe 01       	movw	r30, r28
    22ea:	ed 5b       	subi	r30, 0xBD	; 189
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a0 e8       	ldi	r26, 0x80	; 128
    22f4:	bf e3       	ldi	r27, 0x3F	; 63
    22f6:	80 83       	st	Z, r24
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	a2 83       	std	Z+2, r26	; 0x02
    22fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fe:	8e 01       	movw	r16, r28
    2300:	01 5c       	subi	r16, 0xC1	; 193
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	ed 5b       	subi	r30, 0xBD	; 189
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	f8 01       	movw	r30, r16
    2324:	80 83       	st	Z, r24
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	a2 83       	std	Z+2, r26	; 0x02
    232a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    232c:	fe 01       	movw	r30, r28
    232e:	ff 96       	adiw	r30, 0x3f	; 63
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9e af       	std	Y+62, r25	; 0x3e
    234e:	8d af       	std	Y+61, r24	; 0x3d
    2350:	46 c0       	rjmp	.+140    	; 0x23de <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2352:	fe 01       	movw	r30, r28
    2354:	ff 96       	adiw	r30, 0x3f	; 63
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	3f ef       	ldi	r19, 0xFF	; 255
    2362:	4f e7       	ldi	r20, 0x7F	; 127
    2364:	57 e4       	ldi	r21, 0x47	; 71
    2366:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236a:	18 16       	cp	r1, r24
    236c:	64 f5       	brge	.+88     	; 0x23c6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236e:	fe 01       	movw	r30, r28
    2370:	ed 5b       	subi	r30, 0xBD	; 189
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e af       	std	Y+62, r25	; 0x3e
    239a:	8d af       	std	Y+61, r24	; 0x3d
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <LCD_sendCommand+0x478>
    239e:	88 ec       	ldi	r24, 0xC8	; 200
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9c af       	std	Y+60, r25	; 0x3c
    23a4:	8b af       	std	Y+59, r24	; 0x3b
    23a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    23a8:	9c ad       	ldd	r25, Y+60	; 0x3c
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <LCD_sendCommand+0x466>
    23ae:	9c af       	std	Y+60, r25	; 0x3c
    23b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9e af       	std	Y+62, r25	; 0x3e
    23ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23be:	9e ad       	ldd	r25, Y+62	; 0x3e
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <LCD_sendCommand+0x45a>
    23c4:	16 c0       	rjmp	.+44     	; 0x23f2 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	fe 01       	movw	r30, r28
    23c8:	ff 96       	adiw	r30, 0x3f	; 63
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9e af       	std	Y+62, r25	; 0x3e
    23dc:	8d af       	std	Y+61, r24	; 0x3d
    23de:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e2:	9a af       	std	Y+58, r25	; 0x3a
    23e4:	89 af       	std	Y+57, r24	; 0x39
    23e6:	89 ad       	ldd	r24, Y+57	; 0x39
    23e8:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_sendCommand+0x4a6>
    23ee:	9a af       	std	Y+58, r25	; 0x3a
    23f0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e8       	ldi	r26, 0x80	; 128
    2402:	bf e3       	ldi	r27, 0x3F	; 63
    2404:	8d ab       	std	Y+53, r24	; 0x35
    2406:	9e ab       	std	Y+54, r25	; 0x36
    2408:	af ab       	std	Y+55, r26	; 0x37
    240a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	6d a9       	ldd	r22, Y+53	; 0x35
    240e:	7e a9       	ldd	r23, Y+54	; 0x36
    2410:	8f a9       	ldd	r24, Y+55	; 0x37
    2412:	98 ad       	ldd	r25, Y+56	; 0x38
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a ef       	ldi	r20, 0xFA	; 250
    241a:	54 e4       	ldi	r21, 0x44	; 68
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	89 ab       	std	Y+49, r24	; 0x31
    2426:	9a ab       	std	Y+50, r25	; 0x32
    2428:	ab ab       	std	Y+51, r26	; 0x33
    242a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    242c:	69 a9       	ldd	r22, Y+49	; 0x31
    242e:	7a a9       	ldd	r23, Y+50	; 0x32
    2430:	8b a9       	ldd	r24, Y+51	; 0x33
    2432:	9c a9       	ldd	r25, Y+52	; 0x34
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <LCD_sendCommand+0x50a>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	98 ab       	std	Y+48, r25	; 0x30
    244a:	8f a7       	std	Y+47, r24	; 0x2f
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    244e:	69 a9       	ldd	r22, Y+49	; 0x31
    2450:	7a a9       	ldd	r23, Y+50	; 0x32
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	9c a9       	ldd	r25, Y+52	; 0x34
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	6d a9       	ldd	r22, Y+53	; 0x35
    2468:	7e a9       	ldd	r23, Y+54	; 0x36
    246a:	8f a9       	ldd	r24, Y+55	; 0x37
    246c:	98 ad       	ldd	r25, Y+56	; 0x38
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	98 ab       	std	Y+48, r25	; 0x30
    248c:	8f a7       	std	Y+47, r24	; 0x2f
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <LCD_sendCommand+0x56a>
    2490:	88 ec       	ldi	r24, 0xC8	; 200
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e a7       	std	Y+46, r25	; 0x2e
    2496:	8d a7       	std	Y+45, r24	; 0x2d
    2498:	8d a5       	ldd	r24, Y+45	; 0x2d
    249a:	9e a5       	ldd	r25, Y+46	; 0x2e
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_sendCommand+0x558>
    24a0:	9e a7       	std	Y+46, r25	; 0x2e
    24a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a6:	98 a9       	ldd	r25, Y+48	; 0x30
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	98 ab       	std	Y+48, r25	; 0x30
    24ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b0:	98 a9       	ldd	r25, Y+48	; 0x30
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <LCD_sendCommand+0x54c>
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ba:	7a a9       	ldd	r23, Y+50	; 0x32
    24bc:	8b a9       	ldd	r24, Y+51	; 0x33
    24be:	9c a9       	ldd	r25, Y+52	; 0x34
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	98 ab       	std	Y+48, r25	; 0x30
    24ca:	8f a7       	std	Y+47, r24	; 0x2f
    24cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ce:	98 a9       	ldd	r25, Y+48	; 0x30
    24d0:	9c a7       	std	Y+44, r25	; 0x2c
    24d2:	8b a7       	std	Y+43, r24	; 0x2b
    24d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_sendCommand+0x594>
    24dc:	9c a7       	std	Y+44, r25	; 0x2c
    24de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a0 e8       	ldi	r26, 0x80	; 128
    24f0:	bf e3       	ldi	r27, 0x3F	; 63
    24f2:	8f a3       	std	Y+39, r24	; 0x27
    24f4:	98 a7       	std	Y+40, r25	; 0x28
    24f6:	a9 a7       	std	Y+41, r26	; 0x29
    24f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fa:	6f a1       	ldd	r22, Y+39	; 0x27
    24fc:	78 a5       	ldd	r23, Y+40	; 0x28
    24fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2500:	9a a5       	ldd	r25, Y+42	; 0x2a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4a ef       	ldi	r20, 0xFA	; 250
    2508:	54 e4       	ldi	r21, 0x44	; 68
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	8b a3       	std	Y+35, r24	; 0x23
    2514:	9c a3       	std	Y+36, r25	; 0x24
    2516:	ad a3       	std	Y+37, r26	; 0x25
    2518:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    251a:	6b a1       	ldd	r22, Y+35	; 0x23
    251c:	7c a1       	ldd	r23, Y+36	; 0x24
    251e:	8d a1       	ldd	r24, Y+37	; 0x25
    2520:	9e a1       	ldd	r25, Y+38	; 0x26
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9a a3       	std	Y+34, r25	; 0x22
    2538:	89 a3       	std	Y+33, r24	; 0x21
    253a:	3f c0       	rjmp	.+126    	; 0x25ba <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    253c:	6b a1       	ldd	r22, Y+35	; 0x23
    253e:	7c a1       	ldd	r23, Y+36	; 0x24
    2540:	8d a1       	ldd	r24, Y+37	; 0x25
    2542:	9e a1       	ldd	r25, Y+38	; 0x26
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	4c f5       	brge	.+82     	; 0x25a6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	6f a1       	ldd	r22, Y+39	; 0x27
    2556:	78 a5       	ldd	r23, Y+40	; 0x28
    2558:	89 a5       	ldd	r24, Y+41	; 0x29
    255a:	9a a5       	ldd	r25, Y+42	; 0x2a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9a a3       	std	Y+34, r25	; 0x22
    257a:	89 a3       	std	Y+33, r24	; 0x21
    257c:	0f c0       	rjmp	.+30     	; 0x259c <LCD_sendCommand+0x658>
    257e:	88 ec       	ldi	r24, 0xC8	; 200
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	98 a3       	std	Y+32, r25	; 0x20
    2584:	8f 8f       	std	Y+31, r24	; 0x1f
    2586:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2588:	98 a1       	ldd	r25, Y+32	; 0x20
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_sendCommand+0x646>
    258e:	98 a3       	std	Y+32, r25	; 0x20
    2590:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	89 a1       	ldd	r24, Y+33	; 0x21
    2594:	9a a1       	ldd	r25, Y+34	; 0x22
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9a a3       	std	Y+34, r25	; 0x22
    259a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	89 a1       	ldd	r24, Y+33	; 0x21
    259e:	9a a1       	ldd	r25, Y+34	; 0x22
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	69 f7       	brne	.-38     	; 0x257e <LCD_sendCommand+0x63a>
    25a4:	14 c0       	rjmp	.+40     	; 0x25ce <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	6b a1       	ldd	r22, Y+35	; 0x23
    25a8:	7c a1       	ldd	r23, Y+36	; 0x24
    25aa:	8d a1       	ldd	r24, Y+37	; 0x25
    25ac:	9e a1       	ldd	r25, Y+38	; 0x26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9a a3       	std	Y+34, r25	; 0x22
    25b8:	89 a3       	std	Y+33, r24	; 0x21
    25ba:	89 a1       	ldd	r24, Y+33	; 0x21
    25bc:	9a a1       	ldd	r25, Y+34	; 0x22
    25be:	9e 8f       	std	Y+30, r25	; 0x1e
    25c0:	8d 8f       	std	Y+29, r24	; 0x1d
    25c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <LCD_sendCommand+0x682>
    25ca:	9e 8f       	std	Y+30, r25	; 0x1e
    25cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    25ce:	fe 01       	movw	r30, r28
    25d0:	ed 59       	subi	r30, 0x9D	; 157
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	98 2f       	mov	r25, r24
    25d8:	91 70       	andi	r25, 0x01	; 1
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	49 2f       	mov	r20, r25
    25e0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    25e4:	fe 01       	movw	r30, r28
    25e6:	ed 59       	subi	r30, 0x9D	; 157
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	82 70       	andi	r24, 0x02	; 2
    25f2:	90 70       	andi	r25, 0x00	; 0
    25f4:	95 95       	asr	r25
    25f6:	87 95       	ror	r24
    25f8:	98 2f       	mov	r25, r24
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	63 e0       	ldi	r22, 0x03	; 3
    25fe:	49 2f       	mov	r20, r25
    2600:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2604:	fe 01       	movw	r30, r28
    2606:	ed 59       	subi	r30, 0x9D	; 157
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 81       	ld	r24, Z
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	84 70       	andi	r24, 0x04	; 4
    2612:	90 70       	andi	r25, 0x00	; 0
    2614:	95 95       	asr	r25
    2616:	87 95       	ror	r24
    2618:	95 95       	asr	r25
    261a:	87 95       	ror	r24
    261c:	98 2f       	mov	r25, r24
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	64 e0       	ldi	r22, 0x04	; 4
    2622:	49 2f       	mov	r20, r25
    2624:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2628:	fe 01       	movw	r30, r28
    262a:	ed 59       	subi	r30, 0x9D	; 157
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 81       	ld	r24, Z
    2630:	88 2f       	mov	r24, r24
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	88 70       	andi	r24, 0x08	; 8
    2636:	90 70       	andi	r25, 0x00	; 0
    2638:	95 95       	asr	r25
    263a:	87 95       	ror	r24
    263c:	95 95       	asr	r25
    263e:	87 95       	ror	r24
    2640:	95 95       	asr	r25
    2642:	87 95       	ror	r24
    2644:	98 2f       	mov	r25, r24
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	65 e0       	ldi	r22, 0x05	; 5
    264a:	49 2f       	mov	r20, r25
    264c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a0 e8       	ldi	r26, 0x80	; 128
    2656:	bf e3       	ldi	r27, 0x3F	; 63
    2658:	89 8f       	std	Y+25, r24	; 0x19
    265a:	9a 8f       	std	Y+26, r25	; 0x1a
    265c:	ab 8f       	std	Y+27, r26	; 0x1b
    265e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	69 8d       	ldd	r22, Y+25	; 0x19
    2662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8d 8b       	std	Y+21, r24	; 0x15
    267a:	9e 8b       	std	Y+22, r25	; 0x16
    267c:	af 8b       	std	Y+23, r26	; 0x17
    267e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2680:	6d 89       	ldd	r22, Y+21	; 0x15
    2682:	7e 89       	ldd	r23, Y+22	; 0x16
    2684:	8f 89       	ldd	r24, Y+23	; 0x17
    2686:	98 8d       	ldd	r25, Y+24	; 0x18
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9c 8b       	std	Y+20, r25	; 0x14
    269e:	8b 8b       	std	Y+19, r24	; 0x13
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    26a2:	6d 89       	ldd	r22, Y+21	; 0x15
    26a4:	7e 89       	ldd	r23, Y+22	; 0x16
    26a6:	8f 89       	ldd	r24, Y+23	; 0x17
    26a8:	98 8d       	ldd	r25, Y+24	; 0x18
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	69 8d       	ldd	r22, Y+25	; 0x19
    26bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9c 8b       	std	Y+20, r25	; 0x14
    26e0:	8b 8b       	std	Y+19, r24	; 0x13
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <LCD_sendCommand+0x7be>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9a 8b       	std	Y+18, r25	; 0x12
    26ea:	89 8b       	std	Y+17, r24	; 0x11
    26ec:	89 89       	ldd	r24, Y+17	; 0x11
    26ee:	9a 89       	ldd	r25, Y+18	; 0x12
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_sendCommand+0x7ac>
    26f4:	9a 8b       	std	Y+18, r25	; 0x12
    26f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8b 89       	ldd	r24, Y+19	; 0x13
    26fa:	9c 89       	ldd	r25, Y+20	; 0x14
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9c 8b       	std	Y+20, r25	; 0x14
    2700:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8b 89       	ldd	r24, Y+19	; 0x13
    2704:	9c 89       	ldd	r25, Y+20	; 0x14
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <LCD_sendCommand+0x7a0>
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	6d 89       	ldd	r22, Y+21	; 0x15
    270e:	7e 89       	ldd	r23, Y+22	; 0x16
    2710:	8f 89       	ldd	r24, Y+23	; 0x17
    2712:	98 8d       	ldd	r25, Y+24	; 0x18
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9c 8b       	std	Y+20, r25	; 0x14
    271e:	8b 8b       	std	Y+19, r24	; 0x13
    2720:	8b 89       	ldd	r24, Y+19	; 0x13
    2722:	9c 89       	ldd	r25, Y+20	; 0x14
    2724:	98 8b       	std	Y+16, r25	; 0x10
    2726:	8f 87       	std	Y+15, r24	; 0x0f
    2728:	8f 85       	ldd	r24, Y+15	; 0x0f
    272a:	98 89       	ldd	r25, Y+16	; 0x10
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_sendCommand+0x7e8>
    2730:	98 8b       	std	Y+16, r25	; 0x10
    2732:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	61 e0       	ldi	r22, 0x01	; 1
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a0 e8       	ldi	r26, 0x80	; 128
    2744:	bf e3       	ldi	r27, 0x3F	; 63
    2746:	8b 87       	std	Y+11, r24	; 0x0b
    2748:	9c 87       	std	Y+12, r25	; 0x0c
    274a:	ad 87       	std	Y+13, r26	; 0x0d
    274c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2750:	7c 85       	ldd	r23, Y+12	; 0x0c
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a ef       	ldi	r20, 0xFA	; 250
    275c:	54 e4       	ldi	r21, 0x44	; 68
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	8f 83       	std	Y+7, r24	; 0x07
    2768:	98 87       	std	Y+8, r25	; 0x08
    276a:	a9 87       	std	Y+9, r26	; 0x09
    276c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    276e:	6f 81       	ldd	r22, Y+7	; 0x07
    2770:	78 85       	ldd	r23, Y+8	; 0x08
    2772:	89 85       	ldd	r24, Y+9	; 0x09
    2774:	9a 85       	ldd	r25, Y+10	; 0x0a
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e8       	ldi	r20, 0x80	; 128
    277c:	5f e3       	ldi	r21, 0x3F	; 63
    277e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2782:	88 23       	and	r24, r24
    2784:	2c f4       	brge	.+10     	; 0x2790 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9e 83       	std	Y+6, r25	; 0x06
    278c:	8d 83       	std	Y+5, r24	; 0x05
    278e:	3f c0       	rjmp	.+126    	; 0x280e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2790:	6f 81       	ldd	r22, Y+7	; 0x07
    2792:	78 85       	ldd	r23, Y+8	; 0x08
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	3f ef       	ldi	r19, 0xFF	; 255
    279c:	4f e7       	ldi	r20, 0x7F	; 127
    279e:	57 e4       	ldi	r21, 0x47	; 71
    27a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a4:	18 16       	cp	r1, r24
    27a6:	4c f5       	brge	.+82     	; 0x27fa <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e2       	ldi	r20, 0x20	; 32
    27b6:	51 e4       	ldi	r21, 0x41	; 65
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	0f c0       	rjmp	.+30     	; 0x27f0 <LCD_sendCommand+0x8ac>
    27d2:	88 ec       	ldi	r24, 0xC8	; 200
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9c 83       	std	Y+4, r25	; 0x04
    27d8:	8b 83       	std	Y+3, r24	; 0x03
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	9c 81       	ldd	r25, Y+4	; 0x04
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <LCD_sendCommand+0x89a>
    27e2:	9c 83       	std	Y+4, r25	; 0x04
    27e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	9e 83       	std	Y+6, r25	; 0x06
    27ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f0:	8d 81       	ldd	r24, Y+5	; 0x05
    27f2:	9e 81       	ldd	r25, Y+6	; 0x06
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	69 f7       	brne	.-38     	; 0x27d2 <LCD_sendCommand+0x88e>
    27f8:	14 c0       	rjmp	.+40     	; 0x2822 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fa:	6f 81       	ldd	r22, Y+7	; 0x07
    27fc:	78 85       	ldd	r23, Y+8	; 0x08
    27fe:	89 85       	ldd	r24, Y+9	; 0x09
    2800:	9a 85       	ldd	r25, Y+10	; 0x0a
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9e 83       	std	Y+6, r25	; 0x06
    280c:	8d 83       	std	Y+5, r24	; 0x05
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	9a 83       	std	Y+2, r25	; 0x02
    2814:	89 83       	std	Y+1, r24	; 0x01
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_sendCommand+0x8d6>
    281e:	9a 83       	std	Y+2, r25	; 0x02
    2820:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2822:	cd 59       	subi	r28, 0x9D	; 157
    2824:	df 4f       	sbci	r29, 0xFF	; 255
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	08 95       	ret

0000283a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	c3 56       	subi	r28, 0x63	; 99
    2848:	d0 40       	sbci	r29, 0x00	; 0
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	fe 01       	movw	r30, r28
    2856:	ed 59       	subi	r30, 0x9D	; 157
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	41 e0       	ldi	r20, 0x01	; 1
    2862:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2866:	fe 01       	movw	r30, r28
    2868:	e1 5a       	subi	r30, 0xA1	; 161
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 e8       	ldi	r26, 0x80	; 128
    2872:	bf e3       	ldi	r27, 0x3F	; 63
    2874:	80 83       	st	Z, r24
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	a2 83       	std	Z+2, r26	; 0x02
    287a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287c:	8e 01       	movw	r16, r28
    287e:	05 5a       	subi	r16, 0xA5	; 165
    2880:	1f 4f       	sbci	r17, 0xFF	; 255
    2882:	fe 01       	movw	r30, r28
    2884:	e1 5a       	subi	r30, 0xA1	; 161
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	60 81       	ld	r22, Z
    288a:	71 81       	ldd	r23, Z+1	; 0x01
    288c:	82 81       	ldd	r24, Z+2	; 0x02
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a ef       	ldi	r20, 0xFA	; 250
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	f8 01       	movw	r30, r16
    28a2:	80 83       	st	Z, r24
    28a4:	91 83       	std	Z+1, r25	; 0x01
    28a6:	a2 83       	std	Z+2, r26	; 0x02
    28a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28aa:	fe 01       	movw	r30, r28
    28ac:	e5 5a       	subi	r30, 0xA5	; 165
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	60 81       	ld	r22, Z
    28b2:	71 81       	ldd	r23, Z+1	; 0x01
    28b4:	82 81       	ldd	r24, Z+2	; 0x02
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	44 f4       	brge	.+16     	; 0x28d8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    28c8:	fe 01       	movw	r30, r28
    28ca:	e7 5a       	subi	r30, 0xA7	; 167
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	80 83       	st	Z, r24
    28d6:	64 c0       	rjmp	.+200    	; 0x29a0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    28d8:	fe 01       	movw	r30, r28
    28da:	e5 5a       	subi	r30, 0xA5	; 165
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	60 81       	ld	r22, Z
    28e0:	71 81       	ldd	r23, Z+1	; 0x01
    28e2:	82 81       	ldd	r24, Z+2	; 0x02
    28e4:	93 81       	ldd	r25, Z+3	; 0x03
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	57 e4       	ldi	r21, 0x47	; 71
    28ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	0c f0       	brlt	.+2      	; 0x28f8 <LCD_displayCharacter+0xbe>
    28f6:	43 c0       	rjmp	.+134    	; 0x297e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	fe 01       	movw	r30, r28
    28fa:	e1 5a       	subi	r30, 0xA1	; 161
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	60 81       	ld	r22, Z
    2900:	71 81       	ldd	r23, Z+1	; 0x01
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e2       	ldi	r20, 0x20	; 32
    290c:	51 e4       	ldi	r21, 0x41	; 65
    290e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	8e 01       	movw	r16, r28
    2918:	07 5a       	subi	r16, 0xA7	; 167
    291a:	1f 4f       	sbci	r17, 0xFF	; 255
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	f8 01       	movw	r30, r16
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	80 83       	st	Z, r24
    292e:	1f c0       	rjmp	.+62     	; 0x296e <LCD_displayCharacter+0x134>
    2930:	fe 01       	movw	r30, r28
    2932:	e9 5a       	subi	r30, 0xA9	; 169
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	88 ec       	ldi	r24, 0xC8	; 200
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
    293e:	fe 01       	movw	r30, r28
    2940:	e9 5a       	subi	r30, 0xA9	; 169
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <LCD_displayCharacter+0x10e>
    294c:	fe 01       	movw	r30, r28
    294e:	e9 5a       	subi	r30, 0xA9	; 169
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	91 83       	std	Z+1, r25	; 0x01
    2954:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2956:	de 01       	movw	r26, r28
    2958:	a7 5a       	subi	r26, 0xA7	; 167
    295a:	bf 4f       	sbci	r27, 0xFF	; 255
    295c:	fe 01       	movw	r30, r28
    295e:	e7 5a       	subi	r30, 0xA7	; 167
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	11 96       	adiw	r26, 0x01	; 1
    296a:	9c 93       	st	X, r25
    296c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	fe 01       	movw	r30, r28
    2970:	e7 5a       	subi	r30, 0xA7	; 167
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	d1 f6       	brne	.-76     	; 0x2930 <LCD_displayCharacter+0xf6>
    297c:	27 c0       	rjmp	.+78     	; 0x29cc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297e:	8e 01       	movw	r16, r28
    2980:	07 5a       	subi	r16, 0xA7	; 167
    2982:	1f 4f       	sbci	r17, 0xFF	; 255
    2984:	fe 01       	movw	r30, r28
    2986:	e5 5a       	subi	r30, 0xA5	; 165
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	f8 01       	movw	r30, r16
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	de 01       	movw	r26, r28
    29a2:	ab 5a       	subi	r26, 0xAB	; 171
    29a4:	bf 4f       	sbci	r27, 0xFF	; 255
    29a6:	fe 01       	movw	r30, r28
    29a8:	e7 5a       	subi	r30, 0xA7	; 167
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 81       	ld	r24, Z
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	8d 93       	st	X+, r24
    29b2:	9c 93       	st	X, r25
    29b4:	fe 01       	movw	r30, r28
    29b6:	eb 5a       	subi	r30, 0xAB	; 171
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	80 81       	ld	r24, Z
    29bc:	91 81       	ldd	r25, Z+1	; 0x01
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <LCD_displayCharacter+0x184>
    29c2:	fe 01       	movw	r30, r28
    29c4:	eb 5a       	subi	r30, 0xAB	; 171
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	41 e0       	ldi	r20, 0x01	; 1
    29d2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    29d6:	fe 01       	movw	r30, r28
    29d8:	ef 5a       	subi	r30, 0xAF	; 175
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	a0 e8       	ldi	r26, 0x80	; 128
    29e2:	bf e3       	ldi	r27, 0x3F	; 63
    29e4:	80 83       	st	Z, r24
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	a2 83       	std	Z+2, r26	; 0x02
    29ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ec:	8e 01       	movw	r16, r28
    29ee:	03 5b       	subi	r16, 0xB3	; 179
    29f0:	1f 4f       	sbci	r17, 0xFF	; 255
    29f2:	fe 01       	movw	r30, r28
    29f4:	ef 5a       	subi	r30, 0xAF	; 175
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	60 81       	ld	r22, Z
    29fa:	71 81       	ldd	r23, Z+1	; 0x01
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	4a ef       	ldi	r20, 0xFA	; 250
    2a06:	54 e4       	ldi	r21, 0x44	; 68
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	f8 01       	movw	r30, r16
    2a12:	80 83       	st	Z, r24
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	a2 83       	std	Z+2, r26	; 0x02
    2a18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e3 5b       	subi	r30, 0xB3	; 179
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	60 81       	ld	r22, Z
    2a22:	71 81       	ldd	r23, Z+1	; 0x01
    2a24:	82 81       	ldd	r24, Z+2	; 0x02
    2a26:	93 81       	ldd	r25, Z+3	; 0x03
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	44 f4       	brge	.+16     	; 0x2a48 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e5 5b       	subi	r30, 0xB5	; 181
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
    2a46:	64 c0       	rjmp	.+200    	; 0x2b10 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e3 5b       	subi	r30, 0xB3	; 179
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	82 81       	ldd	r24, Z+2	; 0x02
    2a54:	93 81       	ldd	r25, Z+3	; 0x03
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	3f ef       	ldi	r19, 0xFF	; 255
    2a5a:	4f e7       	ldi	r20, 0x7F	; 127
    2a5c:	57 e4       	ldi	r21, 0x47	; 71
    2a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	0c f0       	brlt	.+2      	; 0x2a68 <LCD_displayCharacter+0x22e>
    2a66:	43 c0       	rjmp	.+134    	; 0x2aee <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ef 5a       	subi	r30, 0xAF	; 175
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e2       	ldi	r20, 0x20	; 32
    2a7c:	51 e4       	ldi	r21, 0x41	; 65
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	8e 01       	movw	r16, r28
    2a88:	05 5b       	subi	r16, 0xB5	; 181
    2a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	f8 01       	movw	r30, r16
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
    2a9e:	1f c0       	rjmp	.+62     	; 0x2ade <LCD_displayCharacter+0x2a4>
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e7 5b       	subi	r30, 0xB7	; 183
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	88 ec       	ldi	r24, 0xC8	; 200
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	80 83       	st	Z, r24
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e7 5b       	subi	r30, 0xB7	; 183
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	80 81       	ld	r24, Z
    2ab6:	91 81       	ldd	r25, Z+1	; 0x01
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <LCD_displayCharacter+0x27e>
    2abc:	fe 01       	movw	r30, r28
    2abe:	e7 5b       	subi	r30, 0xB7	; 183
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac6:	de 01       	movw	r26, r28
    2ac8:	a5 5b       	subi	r26, 0xB5	; 181
    2aca:	bf 4f       	sbci	r27, 0xFF	; 255
    2acc:	fe 01       	movw	r30, r28
    2ace:	e5 5b       	subi	r30, 0xB5	; 181
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	11 96       	adiw	r26, 0x01	; 1
    2ada:	9c 93       	st	X, r25
    2adc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e5 5b       	subi	r30, 0xB5	; 181
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 81       	ldd	r25, Z+1	; 0x01
    2ae8:	00 97       	sbiw	r24, 0x00	; 0
    2aea:	d1 f6       	brne	.-76     	; 0x2aa0 <LCD_displayCharacter+0x266>
    2aec:	27 c0       	rjmp	.+78     	; 0x2b3c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aee:	8e 01       	movw	r16, r28
    2af0:	05 5b       	subi	r16, 0xB5	; 181
    2af2:	1f 4f       	sbci	r17, 0xFF	; 255
    2af4:	fe 01       	movw	r30, r28
    2af6:	e3 5b       	subi	r30, 0xB3	; 179
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	60 81       	ld	r22, Z
    2afc:	71 81       	ldd	r23, Z+1	; 0x01
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	80 83       	st	Z, r24
    2b10:	de 01       	movw	r26, r28
    2b12:	a9 5b       	subi	r26, 0xB9	; 185
    2b14:	bf 4f       	sbci	r27, 0xFF	; 255
    2b16:	fe 01       	movw	r30, r28
    2b18:	e5 5b       	subi	r30, 0xB5	; 181
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	8d 93       	st	X+, r24
    2b22:	9c 93       	st	X, r25
    2b24:	fe 01       	movw	r30, r28
    2b26:	e9 5b       	subi	r30, 0xB9	; 185
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	91 81       	ldd	r25, Z+1	; 0x01
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <LCD_displayCharacter+0x2f4>
    2b32:	fe 01       	movw	r30, r28
    2b34:	e9 5b       	subi	r30, 0xB9	; 185
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ed 59       	subi	r30, 0x9D	; 157
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	80 71       	andi	r24, 0x10	; 16
    2b4a:	90 70       	andi	r25, 0x00	; 0
    2b4c:	95 95       	asr	r25
    2b4e:	87 95       	ror	r24
    2b50:	95 95       	asr	r25
    2b52:	87 95       	ror	r24
    2b54:	95 95       	asr	r25
    2b56:	87 95       	ror	r24
    2b58:	95 95       	asr	r25
    2b5a:	87 95       	ror	r24
    2b5c:	98 2f       	mov	r25, r24
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	62 e0       	ldi	r22, 0x02	; 2
    2b62:	49 2f       	mov	r20, r25
    2b64:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ed 59       	subi	r30, 0x9D	; 157
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 81       	ld	r24, Z
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	80 72       	andi	r24, 0x20	; 32
    2b76:	90 70       	andi	r25, 0x00	; 0
    2b78:	95 95       	asr	r25
    2b7a:	87 95       	ror	r24
    2b7c:	95 95       	asr	r25
    2b7e:	87 95       	ror	r24
    2b80:	95 95       	asr	r25
    2b82:	87 95       	ror	r24
    2b84:	95 95       	asr	r25
    2b86:	87 95       	ror	r24
    2b88:	95 95       	asr	r25
    2b8a:	87 95       	ror	r24
    2b8c:	98 2f       	mov	r25, r24
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	63 e0       	ldi	r22, 0x03	; 3
    2b92:	49 2f       	mov	r20, r25
    2b94:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ed 59       	subi	r30, 0x9D	; 157
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	80 74       	andi	r24, 0x40	; 64
    2ba6:	90 70       	andi	r25, 0x00	; 0
    2ba8:	08 2e       	mov	r0, r24
    2baa:	89 2f       	mov	r24, r25
    2bac:	00 0c       	add	r0, r0
    2bae:	88 1f       	adc	r24, r24
    2bb0:	99 0b       	sbc	r25, r25
    2bb2:	00 0c       	add	r0, r0
    2bb4:	88 1f       	adc	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	98 2f       	mov	r25, r24
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	64 e0       	ldi	r22, 0x04	; 4
    2bbe:	49 2f       	mov	r20, r25
    2bc0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ed 59       	subi	r30, 0x9D	; 157
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	98 2f       	mov	r25, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	99 27       	eor	r25, r25
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	65 e0       	ldi	r22, 0x05	; 5
    2bd8:	49 2f       	mov	r20, r25
    2bda:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2bde:	fe 01       	movw	r30, r28
    2be0:	ed 5b       	subi	r30, 0xBD	; 189
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 e8       	ldi	r26, 0x80	; 128
    2bea:	bf e3       	ldi	r27, 0x3F	; 63
    2bec:	80 83       	st	Z, r24
    2bee:	91 83       	std	Z+1, r25	; 0x01
    2bf0:	a2 83       	std	Z+2, r26	; 0x02
    2bf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	8e 01       	movw	r16, r28
    2bf6:	01 5c       	subi	r16, 0xC1	; 193
    2bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ed 5b       	subi	r30, 0xBD	; 189
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	60 81       	ld	r22, Z
    2c02:	71 81       	ldd	r23, Z+1	; 0x01
    2c04:	82 81       	ldd	r24, Z+2	; 0x02
    2c06:	93 81       	ldd	r25, Z+3	; 0x03
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	f8 01       	movw	r30, r16
    2c1a:	80 83       	st	Z, r24
    2c1c:	91 83       	std	Z+1, r25	; 0x01
    2c1e:	a2 83       	std	Z+2, r26	; 0x02
    2c20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c22:	fe 01       	movw	r30, r28
    2c24:	ff 96       	adiw	r30, 0x3f	; 63
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	2c f4       	brge	.+10     	; 0x2c48 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9e af       	std	Y+62, r25	; 0x3e
    2c44:	8d af       	std	Y+61, r24	; 0x3d
    2c46:	46 c0       	rjmp	.+140    	; 0x2cd4 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2c48:	fe 01       	movw	r30, r28
    2c4a:	ff 96       	adiw	r30, 0x3f	; 63
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	3f ef       	ldi	r19, 0xFF	; 255
    2c58:	4f e7       	ldi	r20, 0x7F	; 127
    2c5a:	57 e4       	ldi	r21, 0x47	; 71
    2c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c60:	18 16       	cp	r1, r24
    2c62:	64 f5       	brge	.+88     	; 0x2cbc <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c64:	fe 01       	movw	r30, r28
    2c66:	ed 5b       	subi	r30, 0xBD	; 189
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e2       	ldi	r20, 0x20	; 32
    2c78:	51 e4       	ldi	r21, 0x41	; 65
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	bc 01       	movw	r22, r24
    2c84:	cd 01       	movw	r24, r26
    2c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	9e af       	std	Y+62, r25	; 0x3e
    2c90:	8d af       	std	Y+61, r24	; 0x3d
    2c92:	0f c0       	rjmp	.+30     	; 0x2cb2 <LCD_displayCharacter+0x478>
    2c94:	88 ec       	ldi	r24, 0xC8	; 200
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9c af       	std	Y+60, r25	; 0x3c
    2c9a:	8b af       	std	Y+59, r24	; 0x3b
    2c9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <LCD_displayCharacter+0x466>
    2ca4:	9c af       	std	Y+60, r25	; 0x3c
    2ca6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2caa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	9e af       	std	Y+62, r25	; 0x3e
    2cb0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	69 f7       	brne	.-38     	; 0x2c94 <LCD_displayCharacter+0x45a>
    2cba:	16 c0       	rjmp	.+44     	; 0x2ce8 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ff 96       	adiw	r30, 0x3f	; 63
    2cc0:	60 81       	ld	r22, Z
    2cc2:	71 81       	ldd	r23, Z+1	; 0x01
    2cc4:	82 81       	ldd	r24, Z+2	; 0x02
    2cc6:	93 81       	ldd	r25, Z+3	; 0x03
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9e af       	std	Y+62, r25	; 0x3e
    2cd2:	8d af       	std	Y+61, r24	; 0x3d
    2cd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cd8:	9a af       	std	Y+58, r25	; 0x3a
    2cda:	89 af       	std	Y+57, r24	; 0x39
    2cdc:	89 ad       	ldd	r24, Y+57	; 0x39
    2cde:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <LCD_displayCharacter+0x4a6>
    2ce4:	9a af       	std	Y+58, r25	; 0x3a
    2ce6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	61 e0       	ldi	r22, 0x01	; 1
    2cec:	40 e0       	ldi	r20, 0x00	; 0
    2cee:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	a0 e8       	ldi	r26, 0x80	; 128
    2cf8:	bf e3       	ldi	r27, 0x3F	; 63
    2cfa:	8d ab       	std	Y+53, r24	; 0x35
    2cfc:	9e ab       	std	Y+54, r25	; 0x36
    2cfe:	af ab       	std	Y+55, r26	; 0x37
    2d00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d02:	6d a9       	ldd	r22, Y+53	; 0x35
    2d04:	7e a9       	ldd	r23, Y+54	; 0x36
    2d06:	8f a9       	ldd	r24, Y+55	; 0x37
    2d08:	98 ad       	ldd	r25, Y+56	; 0x38
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	4a ef       	ldi	r20, 0xFA	; 250
    2d10:	54 e4       	ldi	r21, 0x44	; 68
    2d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	89 ab       	std	Y+49, r24	; 0x31
    2d1c:	9a ab       	std	Y+50, r25	; 0x32
    2d1e:	ab ab       	std	Y+51, r26	; 0x33
    2d20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d22:	69 a9       	ldd	r22, Y+49	; 0x31
    2d24:	7a a9       	ldd	r23, Y+50	; 0x32
    2d26:	8b a9       	ldd	r24, Y+51	; 0x33
    2d28:	9c a9       	ldd	r25, Y+52	; 0x34
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e8       	ldi	r20, 0x80	; 128
    2d30:	5f e3       	ldi	r21, 0x3F	; 63
    2d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d36:	88 23       	and	r24, r24
    2d38:	2c f4       	brge	.+10     	; 0x2d44 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	98 ab       	std	Y+48, r25	; 0x30
    2d40:	8f a7       	std	Y+47, r24	; 0x2f
    2d42:	3f c0       	rjmp	.+126    	; 0x2dc2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2d44:	69 a9       	ldd	r22, Y+49	; 0x31
    2d46:	7a a9       	ldd	r23, Y+50	; 0x32
    2d48:	8b a9       	ldd	r24, Y+51	; 0x33
    2d4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	3f ef       	ldi	r19, 0xFF	; 255
    2d50:	4f e7       	ldi	r20, 0x7F	; 127
    2d52:	57 e4       	ldi	r21, 0x47	; 71
    2d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	4c f5       	brge	.+82     	; 0x2dae <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5c:	6d a9       	ldd	r22, Y+53	; 0x35
    2d5e:	7e a9       	ldd	r23, Y+54	; 0x36
    2d60:	8f a9       	ldd	r24, Y+55	; 0x37
    2d62:	98 ad       	ldd	r25, Y+56	; 0x38
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e2       	ldi	r20, 0x20	; 32
    2d6a:	51 e4       	ldi	r21, 0x41	; 65
    2d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	98 ab       	std	Y+48, r25	; 0x30
    2d82:	8f a7       	std	Y+47, r24	; 0x2f
    2d84:	0f c0       	rjmp	.+30     	; 0x2da4 <LCD_displayCharacter+0x56a>
    2d86:	88 ec       	ldi	r24, 0xC8	; 200
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9e a7       	std	Y+46, r25	; 0x2e
    2d8c:	8d a7       	std	Y+45, r24	; 0x2d
    2d8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d90:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <LCD_displayCharacter+0x558>
    2d96:	9e a7       	std	Y+46, r25	; 0x2e
    2d98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	98 ab       	std	Y+48, r25	; 0x30
    2da2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da6:	98 a9       	ldd	r25, Y+48	; 0x30
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	69 f7       	brne	.-38     	; 0x2d86 <LCD_displayCharacter+0x54c>
    2dac:	14 c0       	rjmp	.+40     	; 0x2dd6 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dae:	69 a9       	ldd	r22, Y+49	; 0x31
    2db0:	7a a9       	ldd	r23, Y+50	; 0x32
    2db2:	8b a9       	ldd	r24, Y+51	; 0x33
    2db4:	9c a9       	ldd	r25, Y+52	; 0x34
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	98 ab       	std	Y+48, r25	; 0x30
    2dc0:	8f a7       	std	Y+47, r24	; 0x2f
    2dc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dc4:	98 a9       	ldd	r25, Y+48	; 0x30
    2dc6:	9c a7       	std	Y+44, r25	; 0x2c
    2dc8:	8b a7       	std	Y+43, r24	; 0x2b
    2dca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <LCD_displayCharacter+0x594>
    2dd2:	9c a7       	std	Y+44, r25	; 0x2c
    2dd4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	61 e0       	ldi	r22, 0x01	; 1
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a0 e8       	ldi	r26, 0x80	; 128
    2de6:	bf e3       	ldi	r27, 0x3F	; 63
    2de8:	8f a3       	std	Y+39, r24	; 0x27
    2dea:	98 a7       	std	Y+40, r25	; 0x28
    2dec:	a9 a7       	std	Y+41, r26	; 0x29
    2dee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df0:	6f a1       	ldd	r22, Y+39	; 0x27
    2df2:	78 a5       	ldd	r23, Y+40	; 0x28
    2df4:	89 a5       	ldd	r24, Y+41	; 0x29
    2df6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	4a ef       	ldi	r20, 0xFA	; 250
    2dfe:	54 e4       	ldi	r21, 0x44	; 68
    2e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	8b a3       	std	Y+35, r24	; 0x23
    2e0a:	9c a3       	std	Y+36, r25	; 0x24
    2e0c:	ad a3       	std	Y+37, r26	; 0x25
    2e0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e10:	6b a1       	ldd	r22, Y+35	; 0x23
    2e12:	7c a1       	ldd	r23, Y+36	; 0x24
    2e14:	8d a1       	ldd	r24, Y+37	; 0x25
    2e16:	9e a1       	ldd	r25, Y+38	; 0x26
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	2c f4       	brge	.+10     	; 0x2e32 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9a a3       	std	Y+34, r25	; 0x22
    2e2e:	89 a3       	std	Y+33, r24	; 0x21
    2e30:	3f c0       	rjmp	.+126    	; 0x2eb0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2e32:	6b a1       	ldd	r22, Y+35	; 0x23
    2e34:	7c a1       	ldd	r23, Y+36	; 0x24
    2e36:	8d a1       	ldd	r24, Y+37	; 0x25
    2e38:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
    2e3e:	4f e7       	ldi	r20, 0x7F	; 127
    2e40:	57 e4       	ldi	r21, 0x47	; 71
    2e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e46:	18 16       	cp	r1, r24
    2e48:	4c f5       	brge	.+82     	; 0x2e9c <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e2       	ldi	r20, 0x20	; 32
    2e58:	51 e4       	ldi	r21, 0x41	; 65
    2e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	9a a3       	std	Y+34, r25	; 0x22
    2e70:	89 a3       	std	Y+33, r24	; 0x21
    2e72:	0f c0       	rjmp	.+30     	; 0x2e92 <LCD_displayCharacter+0x658>
    2e74:	88 ec       	ldi	r24, 0xC8	; 200
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	98 a3       	std	Y+32, r25	; 0x20
    2e7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2e7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_displayCharacter+0x646>
    2e84:	98 a3       	std	Y+32, r25	; 0x20
    2e86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e88:	89 a1       	ldd	r24, Y+33	; 0x21
    2e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	9a a3       	std	Y+34, r25	; 0x22
    2e90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e92:	89 a1       	ldd	r24, Y+33	; 0x21
    2e94:	9a a1       	ldd	r25, Y+34	; 0x22
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	69 f7       	brne	.-38     	; 0x2e74 <LCD_displayCharacter+0x63a>
    2e9a:	14 c0       	rjmp	.+40     	; 0x2ec4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	9a a3       	std	Y+34, r25	; 0x22
    2eae:	89 a3       	std	Y+33, r24	; 0x21
    2eb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2eb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2eb6:	8d 8f       	std	Y+29, r24	; 0x1d
    2eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_displayCharacter+0x682>
    2ec0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ed 59       	subi	r30, 0x9D	; 157
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	98 2f       	mov	r25, r24
    2ece:	91 70       	andi	r25, 0x01	; 1
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	62 e0       	ldi	r22, 0x02	; 2
    2ed4:	49 2f       	mov	r20, r25
    2ed6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2eda:	fe 01       	movw	r30, r28
    2edc:	ed 59       	subi	r30, 0x9D	; 157
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	80 81       	ld	r24, Z
    2ee2:	88 2f       	mov	r24, r24
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	82 70       	andi	r24, 0x02	; 2
    2ee8:	90 70       	andi	r25, 0x00	; 0
    2eea:	95 95       	asr	r25
    2eec:	87 95       	ror	r24
    2eee:	98 2f       	mov	r25, r24
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	63 e0       	ldi	r22, 0x03	; 3
    2ef4:	49 2f       	mov	r20, r25
    2ef6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2efa:	fe 01       	movw	r30, r28
    2efc:	ed 59       	subi	r30, 0x9D	; 157
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	88 2f       	mov	r24, r24
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	84 70       	andi	r24, 0x04	; 4
    2f08:	90 70       	andi	r25, 0x00	; 0
    2f0a:	95 95       	asr	r25
    2f0c:	87 95       	ror	r24
    2f0e:	95 95       	asr	r25
    2f10:	87 95       	ror	r24
    2f12:	98 2f       	mov	r25, r24
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	64 e0       	ldi	r22, 0x04	; 4
    2f18:	49 2f       	mov	r20, r25
    2f1a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 59       	subi	r30, 0x9D	; 157
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	88 2f       	mov	r24, r24
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	88 70       	andi	r24, 0x08	; 8
    2f2c:	90 70       	andi	r25, 0x00	; 0
    2f2e:	95 95       	asr	r25
    2f30:	87 95       	ror	r24
    2f32:	95 95       	asr	r25
    2f34:	87 95       	ror	r24
    2f36:	95 95       	asr	r25
    2f38:	87 95       	ror	r24
    2f3a:	98 2f       	mov	r25, r24
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	65 e0       	ldi	r22, 0x05	; 5
    2f40:	49 2f       	mov	r20, r25
    2f42:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a0 e8       	ldi	r26, 0x80	; 128
    2f4c:	bf e3       	ldi	r27, 0x3F	; 63
    2f4e:	89 8f       	std	Y+25, r24	; 0x19
    2f50:	9a 8f       	std	Y+26, r25	; 0x1a
    2f52:	ab 8f       	std	Y+27, r26	; 0x1b
    2f54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f56:	69 8d       	ldd	r22, Y+25	; 0x19
    2f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a ef       	ldi	r20, 0xFA	; 250
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8d 8b       	std	Y+21, r24	; 0x15
    2f70:	9e 8b       	std	Y+22, r25	; 0x16
    2f72:	af 8b       	std	Y+23, r26	; 0x17
    2f74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f76:	6d 89       	ldd	r22, Y+21	; 0x15
    2f78:	7e 89       	ldd	r23, Y+22	; 0x16
    2f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	40 e8       	ldi	r20, 0x80	; 128
    2f84:	5f e3       	ldi	r21, 0x3F	; 63
    2f86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f8a:	88 23       	and	r24, r24
    2f8c:	2c f4       	brge	.+10     	; 0x2f98 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9c 8b       	std	Y+20, r25	; 0x14
    2f94:	8b 8b       	std	Y+19, r24	; 0x13
    2f96:	3f c0       	rjmp	.+126    	; 0x3016 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2f98:	6d 89       	ldd	r22, Y+21	; 0x15
    2f9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	3f ef       	ldi	r19, 0xFF	; 255
    2fa4:	4f e7       	ldi	r20, 0x7F	; 127
    2fa6:	57 e4       	ldi	r21, 0x47	; 71
    2fa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fac:	18 16       	cp	r1, r24
    2fae:	4c f5       	brge	.+82     	; 0x3002 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb8:	20 e0       	ldi	r18, 0x00	; 0
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	40 e2       	ldi	r20, 0x20	; 32
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	9c 8b       	std	Y+20, r25	; 0x14
    2fd6:	8b 8b       	std	Y+19, r24	; 0x13
    2fd8:	0f c0       	rjmp	.+30     	; 0x2ff8 <LCD_displayCharacter+0x7be>
    2fda:	88 ec       	ldi	r24, 0xC8	; 200
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9a 8b       	std	Y+18, r25	; 0x12
    2fe0:	89 8b       	std	Y+17, r24	; 0x11
    2fe2:	89 89       	ldd	r24, Y+17	; 0x11
    2fe4:	9a 89       	ldd	r25, Y+18	; 0x12
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_displayCharacter+0x7ac>
    2fea:	9a 8b       	std	Y+18, r25	; 0x12
    2fec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	9c 8b       	std	Y+20, r25	; 0x14
    2ff6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffc:	00 97       	sbiw	r24, 0x00	; 0
    2ffe:	69 f7       	brne	.-38     	; 0x2fda <LCD_displayCharacter+0x7a0>
    3000:	14 c0       	rjmp	.+40     	; 0x302a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3002:	6d 89       	ldd	r22, Y+21	; 0x15
    3004:	7e 89       	ldd	r23, Y+22	; 0x16
    3006:	8f 89       	ldd	r24, Y+23	; 0x17
    3008:	98 8d       	ldd	r25, Y+24	; 0x18
    300a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	9c 8b       	std	Y+20, r25	; 0x14
    3014:	8b 8b       	std	Y+19, r24	; 0x13
    3016:	8b 89       	ldd	r24, Y+19	; 0x13
    3018:	9c 89       	ldd	r25, Y+20	; 0x14
    301a:	98 8b       	std	Y+16, r25	; 0x10
    301c:	8f 87       	std	Y+15, r24	; 0x0f
    301e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3020:	98 89       	ldd	r25, Y+16	; 0x10
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <LCD_displayCharacter+0x7e8>
    3026:	98 8b       	std	Y+16, r25	; 0x10
    3028:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e8       	ldi	r26, 0x80	; 128
    303a:	bf e3       	ldi	r27, 0x3F	; 63
    303c:	8b 87       	std	Y+11, r24	; 0x0b
    303e:	9c 87       	std	Y+12, r25	; 0x0c
    3040:	ad 87       	std	Y+13, r26	; 0x0d
    3042:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	6b 85       	ldd	r22, Y+11	; 0x0b
    3046:	7c 85       	ldd	r23, Y+12	; 0x0c
    3048:	8d 85       	ldd	r24, Y+13	; 0x0d
    304a:	9e 85       	ldd	r25, Y+14	; 0x0e
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a ef       	ldi	r20, 0xFA	; 250
    3052:	54 e4       	ldi	r21, 0x44	; 68
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8f 83       	std	Y+7, r24	; 0x07
    305e:	98 87       	std	Y+8, r25	; 0x08
    3060:	a9 87       	std	Y+9, r26	; 0x09
    3062:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3064:	6f 81       	ldd	r22, Y+7	; 0x07
    3066:	78 85       	ldd	r23, Y+8	; 0x08
    3068:	89 85       	ldd	r24, Y+9	; 0x09
    306a:	9a 85       	ldd	r25, Y+10	; 0x0a
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e8       	ldi	r20, 0x80	; 128
    3072:	5f e3       	ldi	r21, 0x3F	; 63
    3074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3078:	88 23       	and	r24, r24
    307a:	2c f4       	brge	.+10     	; 0x3086 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3086:	6f 81       	ldd	r22, Y+7	; 0x07
    3088:	78 85       	ldd	r23, Y+8	; 0x08
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	9a 85       	ldd	r25, Y+10	; 0x0a
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	3f ef       	ldi	r19, 0xFF	; 255
    3092:	4f e7       	ldi	r20, 0x7F	; 127
    3094:	57 e4       	ldi	r21, 0x47	; 71
    3096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    309a:	18 16       	cp	r1, r24
    309c:	4c f5       	brge	.+82     	; 0x30f0 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	6b 85       	ldd	r22, Y+11	; 0x0b
    30a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e2       	ldi	r20, 0x20	; 32
    30ac:	51 e4       	ldi	r21, 0x41	; 65
    30ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9e 83       	std	Y+6, r25	; 0x06
    30c4:	8d 83       	std	Y+5, r24	; 0x05
    30c6:	0f c0       	rjmp	.+30     	; 0x30e6 <LCD_displayCharacter+0x8ac>
    30c8:	88 ec       	ldi	r24, 0xC8	; 200
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	9c 83       	std	Y+4, r25	; 0x04
    30ce:	8b 83       	std	Y+3, r24	; 0x03
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <LCD_displayCharacter+0x89a>
    30d8:	9c 83       	std	Y+4, r25	; 0x04
    30da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	9e 83       	std	Y+6, r25	; 0x06
    30e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <LCD_displayCharacter+0x88e>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	6f 81       	ldd	r22, Y+7	; 0x07
    30f2:	78 85       	ldd	r23, Y+8	; 0x08
    30f4:	89 85       	ldd	r24, Y+9	; 0x09
    30f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9e 83       	std	Y+6, r25	; 0x06
    3102:	8d 83       	std	Y+5, r24	; 0x05
    3104:	8d 81       	ldd	r24, Y+5	; 0x05
    3106:	9e 81       	ldd	r25, Y+6	; 0x06
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	9a 81       	ldd	r25, Y+2	; 0x02
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <LCD_displayCharacter+0x8d6>
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3118:	cd 59       	subi	r28, 0x9D	; 157
    311a:	df 4f       	sbci	r29, 0xFF	; 255
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	08 95       	ret

00003130 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	00 d0       	rcall	.+0      	; 0x3136 <LCD_displayString+0x6>
    3136:	0f 92       	push	r0
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	9b 83       	std	Y+3, r25	; 0x03
    313e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3140:	19 82       	std	Y+1, r1	; 0x01
    3142:	0e c0       	rjmp	.+28     	; 0x3160 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3144:	89 81       	ldd	r24, Y+1	; 0x01
    3146:	28 2f       	mov	r18, r24
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	8a 81       	ldd	r24, Y+2	; 0x02
    314c:	9b 81       	ldd	r25, Y+3	; 0x03
    314e:	fc 01       	movw	r30, r24
    3150:	e2 0f       	add	r30, r18
    3152:	f3 1f       	adc	r31, r19
    3154:	80 81       	ld	r24, Z
    3156:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_displayCharacter>
		i++;
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	8f 5f       	subi	r24, 0xFF	; 255
    315e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	9b 81       	ldd	r25, Y+3	; 0x03
    316a:	fc 01       	movw	r30, r24
    316c:	e2 0f       	add	r30, r18
    316e:	f3 1f       	adc	r31, r19
    3170:	80 81       	ld	r24, Z
    3172:	88 23       	and	r24, r24
    3174:	39 f7       	brne	.-50     	; 0x3144 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	0f 90       	pop	r0
    317c:	cf 91       	pop	r28
    317e:	df 91       	pop	r29
    3180:	08 95       	ret

00003182 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3182:	df 93       	push	r29
    3184:	cf 93       	push	r28
    3186:	00 d0       	rcall	.+0      	; 0x3188 <LCD_moveCursor+0x6>
    3188:	00 d0       	rcall	.+0      	; 0x318a <LCD_moveCursor+0x8>
    318a:	0f 92       	push	r0
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	8a 83       	std	Y+2, r24	; 0x02
    3192:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	28 2f       	mov	r18, r24
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	3d 83       	std	Y+5, r19	; 0x05
    319c:	2c 83       	std	Y+4, r18	; 0x04
    319e:	8c 81       	ldd	r24, Y+4	; 0x04
    31a0:	9d 81       	ldd	r25, Y+5	; 0x05
    31a2:	81 30       	cpi	r24, 0x01	; 1
    31a4:	91 05       	cpc	r25, r1
    31a6:	c1 f0       	breq	.+48     	; 0x31d8 <LCD_moveCursor+0x56>
    31a8:	2c 81       	ldd	r18, Y+4	; 0x04
    31aa:	3d 81       	ldd	r19, Y+5	; 0x05
    31ac:	22 30       	cpi	r18, 0x02	; 2
    31ae:	31 05       	cpc	r19, r1
    31b0:	2c f4       	brge	.+10     	; 0x31bc <LCD_moveCursor+0x3a>
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	9d 81       	ldd	r25, Y+5	; 0x05
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	61 f0       	breq	.+24     	; 0x31d2 <LCD_moveCursor+0x50>
    31ba:	19 c0       	rjmp	.+50     	; 0x31ee <LCD_moveCursor+0x6c>
    31bc:	2c 81       	ldd	r18, Y+4	; 0x04
    31be:	3d 81       	ldd	r19, Y+5	; 0x05
    31c0:	22 30       	cpi	r18, 0x02	; 2
    31c2:	31 05       	cpc	r19, r1
    31c4:	69 f0       	breq	.+26     	; 0x31e0 <LCD_moveCursor+0x5e>
    31c6:	8c 81       	ldd	r24, Y+4	; 0x04
    31c8:	9d 81       	ldd	r25, Y+5	; 0x05
    31ca:	83 30       	cpi	r24, 0x03	; 3
    31cc:	91 05       	cpc	r25, r1
    31ce:	61 f0       	breq	.+24     	; 0x31e8 <LCD_moveCursor+0x66>
    31d0:	0e c0       	rjmp	.+28     	; 0x31ee <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    31d2:	8b 81       	ldd	r24, Y+3	; 0x03
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	0b c0       	rjmp	.+22     	; 0x31ee <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	80 5c       	subi	r24, 0xC0	; 192
    31dc:	89 83       	std	Y+1, r24	; 0x01
    31de:	07 c0       	rjmp	.+14     	; 0x31ee <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	80 5f       	subi	r24, 0xF0	; 240
    31e4:	89 83       	std	Y+1, r24	; 0x01
    31e6:	03 c0       	rjmp	.+6      	; 0x31ee <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	80 5b       	subi	r24, 0xB0	; 176
    31ec:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	80 68       	ori	r24, 0x80	; 128
    31f2:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
}
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	00 d0       	rcall	.+0      	; 0x320c <LCD_displayStringRowColumn+0x6>
    320c:	00 d0       	rcall	.+0      	; 0x320e <LCD_displayStringRowColumn+0x8>
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	89 83       	std	Y+1, r24	; 0x01
    3214:	6a 83       	std	Y+2, r22	; 0x02
    3216:	5c 83       	std	Y+4, r21	; 0x04
    3218:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	6a 81       	ldd	r22, Y+2	; 0x02
    321e:	0e 94 c1 18 	call	0x3182	; 0x3182 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3222:	8b 81       	ldd	r24, Y+3	; 0x03
    3224:	9c 81       	ldd	r25, Y+4	; 0x04
    3226:	0e 94 98 18 	call	0x3130	; 0x3130 <LCD_displayString>
}
    322a:	0f 90       	pop	r0
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	0f 90       	pop	r0
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	62 97       	sbiw	r28, 0x12	; 18
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	9a 8b       	std	Y+18, r25	; 0x12
    324e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3250:	89 89       	ldd	r24, Y+17	; 0x11
    3252:	9a 89       	ldd	r25, Y+18	; 0x12
    3254:	9e 01       	movw	r18, r28
    3256:	2f 5f       	subi	r18, 0xFF	; 255
    3258:	3f 4f       	sbci	r19, 0xFF	; 255
    325a:	b9 01       	movw	r22, r18
    325c:	4a e0       	ldi	r20, 0x0A	; 10
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <itoa>
   LCD_displayString(buff); /* Display the string */
    3264:	ce 01       	movw	r24, r28
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	0e 94 98 18 	call	0x3130	; 0x3130 <LCD_displayString>
}
    326c:	62 96       	adiw	r28, 0x12	; 18
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_sendCommand>
}
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	08 95       	ret

00003292 <LED_init>:
#include "led.h"

#include "../../mcal/atmega32_gpio.h"

void LED_init(LED* led)
{
    3292:	df 93       	push	r29
    3294:	cf 93       	push	r28
    3296:	00 d0       	rcall	.+0      	; 0x3298 <LED_init+0x6>
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(led->portID, led->pinID, PIN_OUTPUT);
    32a0:	e9 81       	ldd	r30, Y+1	; 0x01
    32a2:	fa 81       	ldd	r31, Y+2	; 0x02
    32a4:	80 81       	ld	r24, Z
    32a6:	e9 81       	ldd	r30, Y+1	; 0x01
    32a8:	fa 81       	ldd	r31, Y+2	; 0x02
    32aa:	91 81       	ldd	r25, Z+1	; 0x01
    32ac:	69 2f       	mov	r22, r25
    32ae:	41 e0       	ldi	r20, 0x01	; 1
    32b0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <LED_on>:
void LED_on(LED* led)
{
    32be:	df 93       	push	r29
    32c0:	cf 93       	push	r28
    32c2:	00 d0       	rcall	.+0      	; 0x32c4 <LED_on+0x6>
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(led->portID, led->pinID, LOGIC_HIGH);
    32cc:	e9 81       	ldd	r30, Y+1	; 0x01
    32ce:	fa 81       	ldd	r31, Y+2	; 0x02
    32d0:	80 81       	ld	r24, Z
    32d2:	e9 81       	ldd	r30, Y+1	; 0x01
    32d4:	fa 81       	ldd	r31, Y+2	; 0x02
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	69 2f       	mov	r22, r25
    32da:	41 e0       	ldi	r20, 0x01	; 1
    32dc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	08 95       	ret

000032ea <LED_off>:
void LED_off(LED* led)
{
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	00 d0       	rcall	.+0      	; 0x32f0 <LED_off+0x6>
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	9a 83       	std	Y+2, r25	; 0x02
    32f6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(led->portID, led->pinID, LOGIC_LOW);
    32f8:	e9 81       	ldd	r30, Y+1	; 0x01
    32fa:	fa 81       	ldd	r31, Y+2	; 0x02
    32fc:	80 81       	ld	r24, Z
    32fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3300:	fa 81       	ldd	r31, Y+2	; 0x02
    3302:	91 81       	ldd	r25, Z+1	; 0x01
    3304:	69 2f       	mov	r22, r25
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	08 95       	ret

00003316 <SOLENOID_init>:
#include "solenoid_lock.h"

#include "../../mcal/atmega32_gpio.h"

void SOLENOID_init(SolenoidLock* lock)
{
    3316:	df 93       	push	r29
    3318:	cf 93       	push	r28
    331a:	00 d0       	rcall	.+0      	; 0x331c <SOLENOID_init+0x6>
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(lock->portID, lock->pinID, PIN_OUTPUT);
    3324:	e9 81       	ldd	r30, Y+1	; 0x01
    3326:	fa 81       	ldd	r31, Y+2	; 0x02
    3328:	80 81       	ld	r24, Z
    332a:	e9 81       	ldd	r30, Y+1	; 0x01
    332c:	fa 81       	ldd	r31, Y+2	; 0x02
    332e:	91 81       	ldd	r25, Z+1	; 0x01
    3330:	69 2f       	mov	r22, r25
    3332:	41 e0       	ldi	r20, 0x01	; 1
    3334:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GPIO_setupPinDirection>
}
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <SOLENOID_on>:
void SOLENOID_on(SolenoidLock* lock)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	00 d0       	rcall	.+0      	; 0x3348 <SOLENOID_on+0x6>
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	9a 83       	std	Y+2, r25	; 0x02
    334e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(lock->portID, lock->pinID, LOGIC_HIGH);
    3350:	e9 81       	ldd	r30, Y+1	; 0x01
    3352:	fa 81       	ldd	r31, Y+2	; 0x02
    3354:	80 81       	ld	r24, Z
    3356:	e9 81       	ldd	r30, Y+1	; 0x01
    3358:	fa 81       	ldd	r31, Y+2	; 0x02
    335a:	91 81       	ldd	r25, Z+1	; 0x01
    335c:	69 2f       	mov	r22, r25
    335e:	41 e0       	ldi	r20, 0x01	; 1
    3360:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	cf 91       	pop	r28
    336a:	df 91       	pop	r29
    336c:	08 95       	ret

0000336e <SOLENOID_off>:
void SOLENOID_off(SolenoidLock* lock)
{
    336e:	df 93       	push	r29
    3370:	cf 93       	push	r28
    3372:	00 d0       	rcall	.+0      	; 0x3374 <SOLENOID_off+0x6>
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(lock->portID, lock->pinID, LOGIC_LOW);
    337c:	e9 81       	ldd	r30, Y+1	; 0x01
    337e:	fa 81       	ldd	r31, Y+2	; 0x02
    3380:	80 81       	ld	r24, Z
    3382:	e9 81       	ldd	r30, Y+1	; 0x01
    3384:	fa 81       	ldd	r31, Y+2	; 0x02
    3386:	91 81       	ldd	r25, Z+1	; 0x01
    3388:	69 2f       	mov	r22, r25
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <GPIO_writePin>
}
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <floodHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void floodHandler()
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
	if(WATER_read())
    33a2:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <WATER_read>
    33a6:	88 23       	and	r24, r24
    33a8:	79 f0       	breq	.+30     	; 0x33c8 <floodHandler+0x2e>
	{
		DCMOTOR_on(&g_waterPump2);
    33aa:	80 e9       	ldi	r24, 0x90	; 144
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DCMOTOR_on>
		g_threatFlag |= (1<<FLOOD_THREAT);
    33b2:	80 91 b4 00 	lds	r24, 0x00B4
    33b6:	84 60       	ori	r24, 0x04	; 4
    33b8:	80 93 b4 00 	sts	0x00B4, r24
		INTERRUPT_INT2_init(floodHandler, FALLING);
    33bc:	8d ec       	ldi	r24, 0xCD	; 205
    33be:	99 e1       	ldi	r25, 0x19	; 25
    33c0:	62 e0       	ldi	r22, 0x02	; 2
    33c2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <INTERRUPT_INT2_init>
    33c6:	0e c0       	rjmp	.+28     	; 0x33e4 <floodHandler+0x4a>
	}
	else
	{
		DCMOTOR_off(&g_waterPump2);
    33c8:	80 e9       	ldi	r24, 0x90	; 144
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <DCMOTOR_off>
		g_threatFlag &= ~(1<<FLOOD_THREAT);
    33d0:	80 91 b4 00 	lds	r24, 0x00B4
    33d4:	8b 7f       	andi	r24, 0xFB	; 251
    33d6:	80 93 b4 00 	sts	0x00B4, r24
		INTERRUPT_INT2_init(floodHandler, RISING);
    33da:	8d ec       	ldi	r24, 0xCD	; 205
    33dc:	99 e1       	ldi	r25, 0x19	; 25
    33de:	63 e0       	ldi	r22, 0x03	; 3
    33e0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <INTERRUPT_INT2_init>
	}
}
    33e4:	cf 91       	pop	r28
    33e6:	df 91       	pop	r29
    33e8:	08 95       	ret

000033ea <WATER_FLOOD_SYSTEM_Init>:

void WATER_FLOOD_SYSTEM_Init()
{
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Water Flood System */
	WATER_init();
    33f2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <WATER_init>
	INTERRUPT_INT2_init(floodHandler, RISING);
    33f6:	8d ec       	ldi	r24, 0xCD	; 205
    33f8:	99 e1       	ldi	r25, 0x19	; 25
    33fa:	63 e0       	ldi	r22, 0x03	; 3
    33fc:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <INTERRUPT_INT2_init>
	DCMOTOR_init(&g_waterPump2);
    3400:	80 e9       	ldi	r24, 0x90	; 144
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <DCMOTOR_init>
}
    3408:	cf 91       	pop	r28
    340a:	df 91       	pop	r29
    340c:	08 95       	ret

0000340e <LCDDelay>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void LCDDelay(uint8 seconds)
{
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	0f 92       	push	r0
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	89 83       	std	Y+1, r24	; 0x01
	g_lcdDelay = seconds;
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	80 93 b1 00 	sts	0x00B1, r24
	g_lcdDelayFlag = 1;
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	80 93 b2 00 	sts	0x00B2, r24
	TIMER2_on();
    3426:	0e 94 ad 0b 	call	0x175a	; 0x175a <TIMER2_on>
}
    342a:	0f 90       	pop	r0
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <doorLockInit>:
static void doorLockInit()
{
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    343a:	0e 94 3f 19 	call	0x327e	; 0x327e <LCD_clearScreen>
	LCD_displayString("Enter Pin:");
    343e:	80 e6       	ldi	r24, 0x60	; 96
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 98 18 	call	0x3130	; 0x3130 <LCD_displayString>
}
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <lcdDelayHandler>:
static void lcdDelayHandler()
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
	g_lcdTimerCount++;
    3454:	80 91 aa 00 	lds	r24, 0x00AA
    3458:	90 91 ab 00 	lds	r25, 0x00AB
    345c:	01 96       	adiw	r24, 0x01	; 1
    345e:	90 93 ab 00 	sts	0x00AB, r25
    3462:	80 93 aa 00 	sts	0x00AA, r24
	if(g_lcdTimerCount == g_lcdDelay*30)
    3466:	80 91 b1 00 	lds	r24, 0x00B1
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	c9 01       	movw	r24, r18
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	82 0f       	add	r24, r18
    3476:	93 1f       	adc	r25, r19
    3478:	9c 01       	movw	r18, r24
    347a:	22 0f       	add	r18, r18
    347c:	33 1f       	adc	r19, r19
    347e:	22 0f       	add	r18, r18
    3480:	33 1f       	adc	r19, r19
    3482:	82 0f       	add	r24, r18
    3484:	93 1f       	adc	r25, r19
    3486:	88 0f       	add	r24, r24
    3488:	99 1f       	adc	r25, r25
    348a:	9c 01       	movw	r18, r24
    348c:	80 91 aa 00 	lds	r24, 0x00AA
    3490:	90 91 ab 00 	lds	r25, 0x00AB
    3494:	28 17       	cp	r18, r24
    3496:	39 07       	cpc	r19, r25
    3498:	51 f4       	brne	.+20     	; 0x34ae <lcdDelayHandler+0x62>
	{
		TIMER2_off();
    349a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <TIMER2_off>
		g_lcdDelayFlag = 0;
    349e:	10 92 b2 00 	sts	0x00B2, r1
		g_lcdTimerCount = 0;
    34a2:	10 92 ab 00 	sts	0x00AB, r1
    34a6:	10 92 aa 00 	sts	0x00AA, r1
		doorLockInit();
    34aa:	0e 94 19 1a 	call	0x3432	; 0x3432 <doorLockInit>
	}
}
    34ae:	cf 91       	pop	r28
    34b0:	df 91       	pop	r29
    34b2:	08 95       	ret

000034b4 <pinCheck>:
static void pinCheck()
{
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	00 d0       	rcall	.+0      	; 0x34ba <pinCheck+0x6>
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
	uint8 i, isValid = 1;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < 4; i++)
    34c2:	1a 82       	std	Y+2, r1	; 0x02
    34c4:	14 c0       	rjmp	.+40     	; 0x34ee <pinCheck+0x3a>
	{
		if(g_givenPin[i] != g_actualPin[i]) isValid = 0;
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	88 2f       	mov	r24, r24
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	fc 01       	movw	r30, r24
    34ce:	e4 55       	subi	r30, 0x54	; 84
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	20 81       	ld	r18, Z
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	fc 01       	movw	r30, r24
    34dc:	eb 54       	subi	r30, 0x4B	; 75
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	28 17       	cp	r18, r24
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <pinCheck+0x34>
    34e6:	19 82       	std	Y+1, r1	; 0x01
	}
}
static void pinCheck()
{
	uint8 i, isValid = 1;
	for(i = 0; i < 4; i++)
    34e8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ea:	8f 5f       	subi	r24, 0xFF	; 255
    34ec:	8a 83       	std	Y+2, r24	; 0x02
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	84 30       	cpi	r24, 0x04	; 4
    34f2:	48 f3       	brcs	.-46     	; 0x34c6 <pinCheck+0x12>
	{
		if(g_givenPin[i] != g_actualPin[i]) isValid = 0;
	}
	LCD_clearScreen();
    34f4:	0e 94 3f 19 	call	0x327e	; 0x327e <LCD_clearScreen>
	if(isValid)
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	88 23       	and	r24, r24
    34fc:	49 f0       	breq	.+18     	; 0x3510 <pinCheck+0x5c>
	{
		LCD_displayString("ACCESS GRANTED");
    34fe:	8b e6       	ldi	r24, 0x6B	; 107
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	0e 94 98 18 	call	0x3130	; 0x3130 <LCD_displayString>
		SOLENOID_off(&g_lock);
    3506:	82 e9       	ldi	r24, 0x92	; 146
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	0e 94 b7 19 	call	0x336e	; 0x336e <SOLENOID_off>
    350e:	04 c0       	rjmp	.+8      	; 0x3518 <pinCheck+0x64>
	}
	else
	{
		LCD_displayString("ACCESS DENIED");
    3510:	8a e7       	ldi	r24, 0x7A	; 122
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	0e 94 98 18 	call	0x3130	; 0x3130 <LCD_displayString>
	}
	LCDDelay(2);
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	0e 94 07 1a 	call	0x340e	; 0x340e <LCDDelay>
	g_pinCount = 0;
    351e:	10 92 b0 00 	sts	0x00B0, r1
}
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <inputKey>:
static void inputKey(uint8 key)
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	2f 97       	sbiw	r28, 0x0f	; 15
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	8f 87       	std	Y+15, r24	; 0x0f
	if(key >= 0 && key <= 9)
    3542:	8f 85       	ldd	r24, Y+15	; 0x0f
    3544:	8a 30       	cpi	r24, 0x0A	; 10
    3546:	b0 f4       	brcc	.+44     	; 0x3574 <inputKey+0x48>
	{
		LCD_displayCharacter('*');
    3548:	8a e2       	ldi	r24, 0x2A	; 42
    354a:	0e 94 1d 14 	call	0x283a	; 0x283a <LCD_displayCharacter>
		g_givenPin[g_pinCount++] = key;
    354e:	20 91 b0 00 	lds	r18, 0x00B0
    3552:	82 2f       	mov	r24, r18
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	fc 01       	movw	r30, r24
    3558:	e4 55       	subi	r30, 0x54	; 84
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	8f 85       	ldd	r24, Y+15	; 0x0f
    355e:	80 83       	st	Z, r24
    3560:	82 2f       	mov	r24, r18
    3562:	8f 5f       	subi	r24, 0xFF	; 255
    3564:	80 93 b0 00 	sts	0x00B0, r24
		if(g_pinCount == 4) pinCheck();
    3568:	80 91 b0 00 	lds	r24, 0x00B0
    356c:	84 30       	cpi	r24, 0x04	; 4
    356e:	11 f4       	brne	.+4      	; 0x3574 <inputKey+0x48>
    3570:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <pinCheck>
    3574:	80 e0       	ldi	r24, 0x00	; 0
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	a6 e9       	ldi	r26, 0x96	; 150
    357a:	b3 e4       	ldi	r27, 0x43	; 67
    357c:	8b 87       	std	Y+11, r24	; 0x0b
    357e:	9c 87       	std	Y+12, r25	; 0x0c
    3580:	ad 87       	std	Y+13, r26	; 0x0d
    3582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3584:	6b 85       	ldd	r22, Y+11	; 0x0b
    3586:	7c 85       	ldd	r23, Y+12	; 0x0c
    3588:	8d 85       	ldd	r24, Y+13	; 0x0d
    358a:	9e 85       	ldd	r25, Y+14	; 0x0e
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	4a ef       	ldi	r20, 0xFA	; 250
    3592:	54 e4       	ldi	r21, 0x44	; 68
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	8f 83       	std	Y+7, r24	; 0x07
    359e:	98 87       	std	Y+8, r25	; 0x08
    35a0:	a9 87       	std	Y+9, r26	; 0x09
    35a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a4:	6f 81       	ldd	r22, Y+7	; 0x07
    35a6:	78 85       	ldd	r23, Y+8	; 0x08
    35a8:	89 85       	ldd	r24, Y+9	; 0x09
    35aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	40 e8       	ldi	r20, 0x80	; 128
    35b2:	5f e3       	ldi	r21, 0x3F	; 63
    35b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b8:	88 23       	and	r24, r24
    35ba:	2c f4       	brge	.+10     	; 0x35c6 <inputKey+0x9a>
		__ticks = 1;
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	3f c0       	rjmp	.+126    	; 0x3644 <inputKey+0x118>
	else if (__tmp > 65535)
    35c6:	6f 81       	ldd	r22, Y+7	; 0x07
    35c8:	78 85       	ldd	r23, Y+8	; 0x08
    35ca:	89 85       	ldd	r24, Y+9	; 0x09
    35cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	3f ef       	ldi	r19, 0xFF	; 255
    35d2:	4f e7       	ldi	r20, 0x7F	; 127
    35d4:	57 e4       	ldi	r21, 0x47	; 71
    35d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35da:	18 16       	cp	r1, r24
    35dc:	4c f5       	brge	.+82     	; 0x3630 <inputKey+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35de:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	51 e4       	ldi	r21, 0x41	; 65
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	bc 01       	movw	r22, r24
    35f8:	cd 01       	movw	r24, r26
    35fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9e 83       	std	Y+6, r25	; 0x06
    3604:	8d 83       	std	Y+5, r24	; 0x05
    3606:	0f c0       	rjmp	.+30     	; 0x3626 <inputKey+0xfa>
    3608:	88 ec       	ldi	r24, 0xC8	; 200
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	9c 83       	std	Y+4, r25	; 0x04
    360e:	8b 83       	std	Y+3, r24	; 0x03
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	9c 81       	ldd	r25, Y+4	; 0x04
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <inputKey+0xe8>
    3618:	9c 83       	std	Y+4, r25	; 0x04
    361a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361c:	8d 81       	ldd	r24, Y+5	; 0x05
    361e:	9e 81       	ldd	r25, Y+6	; 0x06
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3626:	8d 81       	ldd	r24, Y+5	; 0x05
    3628:	9e 81       	ldd	r25, Y+6	; 0x06
    362a:	00 97       	sbiw	r24, 0x00	; 0
    362c:	69 f7       	brne	.-38     	; 0x3608 <inputKey+0xdc>
    362e:	14 c0       	rjmp	.+40     	; 0x3658 <inputKey+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3630:	6f 81       	ldd	r22, Y+7	; 0x07
    3632:	78 85       	ldd	r23, Y+8	; 0x08
    3634:	89 85       	ldd	r24, Y+9	; 0x09
    3636:	9a 85       	ldd	r25, Y+10	; 0x0a
    3638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	9e 83       	std	Y+6, r25	; 0x06
    3642:	8d 83       	std	Y+5, r24	; 0x05
    3644:	8d 81       	ldd	r24, Y+5	; 0x05
    3646:	9e 81       	ldd	r25, Y+6	; 0x06
    3648:	9a 83       	std	Y+2, r25	; 0x02
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	01 97       	sbiw	r24, 0x01	; 1
    3652:	f1 f7       	brne	.-4      	; 0x3650 <inputKey+0x124>
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(300);
}
    3658:	2f 96       	adiw	r28, 0x0f	; 15
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <pinInit>:
static void pinInit()
{
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	0f 92       	push	r0
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	if(EEPROM_read(0x000))
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 d3 05 	call	0xba6	; 0xba6 <EEPROM_read>
    3680:	88 23       	and	r24, r24
    3682:	a9 f0       	breq	.+42     	; 0x36ae <pinInit+0x44>
	{
		for(i = 1; i <= 4; i++)
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	89 83       	std	Y+1, r24	; 0x01
    3688:	0f c0       	rjmp	.+30     	; 0x36a8 <pinInit+0x3e>
		{
			g_actualPin[i] = EEPROM_read(i);
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	08 2f       	mov	r16, r24
    368e:	10 e0       	ldi	r17, 0x00	; 0
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	88 2f       	mov	r24, r24
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	0e 94 d3 05 	call	0xba6	; 0xba6 <EEPROM_read>
    369a:	f8 01       	movw	r30, r16
    369c:	eb 54       	subi	r30, 0x4B	; 75
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 83       	st	Z, r24
static void pinInit()
{
	uint8 i;
	if(EEPROM_read(0x000))
	{
		for(i = 1; i <= 4; i++)
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	8f 5f       	subi	r24, 0xFF	; 255
    36a6:	89 83       	std	Y+1, r24	; 0x01
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	85 30       	cpi	r24, 0x05	; 5
    36ac:	70 f3       	brcs	.-36     	; 0x368a <pinInit+0x20>
		{
			g_actualPin[i] = EEPROM_read(i);
		}
	}
}
    36ae:	0f 90       	pop	r0
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	1f 91       	pop	r17
    36b6:	0f 91       	pop	r16
    36b8:	08 95       	ret

000036ba <SMART_DOOR_LOCK_SYSTEM_Init>:
void SMART_DOOR_LOCK_SYSTEM_Init()
{
    36ba:	df 93       	push	r29
    36bc:	cf 93       	push	r28
    36be:	cd b7       	in	r28, 0x3d	; 61
    36c0:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Door Lock System */
	LCD_init();
    36c2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <LCD_init>
	KEYPAD_init();
    36c6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <KEYPAD_init>
	SOLENOID_init(&g_lock);
    36ca:	82 e9       	ldi	r24, 0x92	; 146
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	0e 94 8b 19 	call	0x3316	; 0x3316 <SOLENOID_init>
	SOLENOID_on(&g_lock);
    36d2:	82 e9       	ldi	r24, 0x92	; 146
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	0e 94 a1 19 	call	0x3342	; 0x3342 <SOLENOID_on>
	pinInit();
    36da:	0e 94 35 1b 	call	0x366a	; 0x366a <pinInit>
	doorLockInit();
    36de:	0e 94 19 1a 	call	0x3432	; 0x3432 <doorLockInit>

	/* Initialize Timer2 */
	TIMER2_init(TMR2_1024);
    36e2:	87 e0       	ldi	r24, 0x07	; 7
    36e4:	0e 94 93 0b 	call	0x1726	; 0x1726 <TIMER2_init>
	TIMER2_setCallback(lcdDelayHandler);
    36e8:	86 e2       	ldi	r24, 0x26	; 38
    36ea:	9a e1       	ldi	r25, 0x1A	; 26
    36ec:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <TIMER2_setCallback>
	TIMER2_interruptEnable();
    36f0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <TIMER2_interruptEnable>
}
    36f4:	cf 91       	pop	r28
    36f6:	df 91       	pop	r29
    36f8:	08 95       	ret

000036fa <SMART_DOOR_LOCK_SYSTEM_Listener>:

void SMART_DOOR_LOCK_SYSTEM_Listener()
{
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	0f 92       	push	r0
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
	if(!g_lcdDelayFlag)
    3704:	80 91 b2 00 	lds	r24, 0x00B2
    3708:	88 23       	and	r24, r24
    370a:	49 f4       	brne	.+18     	; 0x371e <SMART_DOOR_LOCK_SYSTEM_Listener+0x24>
	{
		uint8 key = KEYPAD_getPressedKey();
    370c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <KEYPAD_getPressedKey>
    3710:	89 83       	std	Y+1, r24	; 0x01
		if(key != KEYPAD_NO_PRESS) inputKey(key);
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	80 32       	cpi	r24, 0x20	; 32
    3716:	19 f0       	breq	.+6      	; 0x371e <SMART_DOOR_LOCK_SYSTEM_Listener+0x24>
    3718:	89 81       	ldd	r24, Y+1	; 0x01
    371a:	0e 94 96 1a 	call	0x352c	; 0x352c <inputKey>
	}
}
    371e:	0f 90       	pop	r0
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <motionHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void motionHandler()
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
	if(PIR_read())
    372e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <PIR_read>
    3732:	88 23       	and	r24, r24
    3734:	31 f0       	breq	.+12     	; 0x3742 <motionHandler+0x1c>
	{
		g_threatFlag |= (1<<MOTION_THREAT);
    3736:	80 91 b4 00 	lds	r24, 0x00B4
    373a:	88 60       	ori	r24, 0x08	; 8
    373c:	80 93 b4 00 	sts	0x00B4, r24
    3740:	05 c0       	rjmp	.+10     	; 0x374c <motionHandler+0x26>
	}
	else
	{
		g_threatFlag &= ~(1<<MOTION_THREAT);
    3742:	80 91 b4 00 	lds	r24, 0x00B4
    3746:	87 7f       	andi	r24, 0xF7	; 247
    3748:	80 93 b4 00 	sts	0x00B4, r24
	}
}
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <MOTION_DETECTION_SYSTEM_Init>:

void MOTION_DETECTION_SYSTEM_Init()
{
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Motion Detection System */
	PIR_init();
    375a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <PIR_init>
}
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <MOTION_DETECTION_SYSTEM_Listener>:

void MOTION_DETECTION_SYSTEM_Listener()
{
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
	motionHandler();
    376c:	0e 94 93 1b 	call	0x3726	; 0x3726 <motionHandler>
}
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <gasHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void gasHandler()
{
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
	if(MQ9_read())
    377e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <MQ9_read>
    3782:	88 23       	and	r24, r24
    3784:	b9 f0       	breq	.+46     	; 0x37b4 <gasHandler+0x3e>
	{
		if(!(g_threatFlag & (1<<FIRE_THREAT)))DCMOTOR_on(&g_fan);
    3786:	80 91 b4 00 	lds	r24, 0x00B4
    378a:	88 2f       	mov	r24, r24
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	81 70       	andi	r24, 0x01	; 1
    3790:	90 70       	andi	r25, 0x00	; 0
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	29 f4       	brne	.+10     	; 0x37a0 <gasHandler+0x2a>
    3796:	84 e9       	ldi	r24, 0x94	; 148
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DCMOTOR_on>
    379e:	04 c0       	rjmp	.+8      	; 0x37a8 <gasHandler+0x32>
		else DCMOTOR_off(&g_fan);
    37a0:	84 e9       	ldi	r24, 0x94	; 148
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <DCMOTOR_off>
		g_threatFlag |= (1<<GAS_THREAT);
    37a8:	80 91 b4 00 	lds	r24, 0x00B4
    37ac:	82 60       	ori	r24, 0x02	; 2
    37ae:	80 93 b4 00 	sts	0x00B4, r24
    37b2:	09 c0       	rjmp	.+18     	; 0x37c6 <gasHandler+0x50>
	}
	else
	{
		DCMOTOR_off(&g_fan);
    37b4:	84 e9       	ldi	r24, 0x94	; 148
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <DCMOTOR_off>
		g_threatFlag &= ~(1<<GAS_THREAT);
    37bc:	80 91 b4 00 	lds	r24, 0x00B4
    37c0:	8d 7f       	andi	r24, 0xFD	; 253
    37c2:	80 93 b4 00 	sts	0x00B4, r24
	}
}
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <GAS_SYSTEM_Init>:

void GAS_SYSTEM_Init()
{
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Gas System */
	MQ9_init();
    37d4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <MQ9_init>
	INTERRUPT_INT1_init(gasHandler, CHANGE);
    37d8:	8b eb       	ldi	r24, 0xBB	; 187
    37da:	9b e1       	ldi	r25, 0x1B	; 27
    37dc:	61 e0       	ldi	r22, 0x01	; 1
    37de:	0e 94 2a 0a 	call	0x1454	; 0x1454 <INTERRUPT_INT1_init>
	DCMOTOR_init(&g_fan);
    37e2:	84 e9       	ldi	r24, 0x94	; 148
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <DCMOTOR_init>
}
    37ea:	cf 91       	pop	r28
    37ec:	df 91       	pop	r29
    37ee:	08 95       	ret

000037f0 <fireHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void fireHandler()
{
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
	if(FLAME_read())
    37f8:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <FLAME_read>
    37fc:	88 23       	and	r24, r24
    37fe:	51 f0       	breq	.+20     	; 0x3814 <fireHandler+0x24>
	{
		DCMOTOR_on(&g_waterPump1);
    3800:	86 e9       	ldi	r24, 0x96	; 150
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <DCMOTOR_on>
		g_threatFlag |= (1<<FIRE_THREAT);
    3808:	80 91 b4 00 	lds	r24, 0x00B4
    380c:	81 60       	ori	r24, 0x01	; 1
    380e:	80 93 b4 00 	sts	0x00B4, r24
    3812:	09 c0       	rjmp	.+18     	; 0x3826 <fireHandler+0x36>
	}
	else
	{
		DCMOTOR_off(&g_waterPump1);
    3814:	86 e9       	ldi	r24, 0x96	; 150
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <DCMOTOR_off>
		g_threatFlag &= ~(1<<FIRE_THREAT);
    381c:	80 91 b4 00 	lds	r24, 0x00B4
    3820:	8e 7f       	andi	r24, 0xFE	; 254
    3822:	80 93 b4 00 	sts	0x00B4, r24
	}
	gasHandler();
    3826:	0e 94 bb 1b 	call	0x3776	; 0x3776 <gasHandler>
}
    382a:	cf 91       	pop	r28
    382c:	df 91       	pop	r29
    382e:	08 95       	ret

00003830 <FIRE_SYSTEM_Init>:

void FIRE_SYSTEM_Init()
{
    3830:	df 93       	push	r29
    3832:	cf 93       	push	r28
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Fire System */
	FLAME_init();
    3838:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <FLAME_init>
	INTERRUPT_INT0_init(fireHandler, CHANGE);
    383c:	88 ef       	ldi	r24, 0xF8	; 248
    383e:	9b e1       	ldi	r25, 0x1B	; 27
    3840:	61 e0       	ldi	r22, 0x01	; 1
    3842:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <INTERRUPT_INT0_init>
	DCMOTOR_init(&g_waterPump1);
    3846:	86 e9       	ldi	r24, 0x96	; 150
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <DCMOTOR_init>
}
    384e:	cf 91       	pop	r28
    3850:	df 91       	pop	r29
    3852:	08 95       	ret

00003854 <alarmHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void alarmHandler()
{
    3854:	df 93       	push	r29
    3856:	cf 93       	push	r28
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
	if(g_alarmTimerCount == 10)
    385c:	80 91 b3 00 	lds	r24, 0x00B3
    3860:	8a 30       	cpi	r24, 0x0A	; 10
    3862:	49 f4       	brne	.+18     	; 0x3876 <alarmHandler+0x22>
	{
		LED_on(&g_alarmLED);
    3864:	8a e9       	ldi	r24, 0x9A	; 154
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	0e 94 5f 19 	call	0x32be	; 0x32be <LED_on>
		BUZZER_on(&g_alarmBuzzer);
    386c:	88 e9       	ldi	r24, 0x98	; 152
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <BUZZER_on>
    3874:	0e c0       	rjmp	.+28     	; 0x3892 <alarmHandler+0x3e>
	}
	else if(g_alarmTimerCount == 20)
    3876:	80 91 b3 00 	lds	r24, 0x00B3
    387a:	84 31       	cpi	r24, 0x14	; 20
    387c:	51 f4       	brne	.+20     	; 0x3892 <alarmHandler+0x3e>
	{
		LED_off(&g_alarmLED);
    387e:	8a e9       	ldi	r24, 0x9A	; 154
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	0e 94 75 19 	call	0x32ea	; 0x32ea <LED_off>
		BUZZER_off(&g_alarmBuzzer);
    3886:	88 e9       	ldi	r24, 0x98	; 152
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <BUZZER_off>
		g_alarmTimerCount = 0;
    388e:	10 92 b3 00 	sts	0x00B3, r1
	}
	g_alarmTimerCount++;
    3892:	80 91 b3 00 	lds	r24, 0x00B3
    3896:	8f 5f       	subi	r24, 0xFF	; 255
    3898:	80 93 b3 00 	sts	0x00B3, r24
}
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <alarmOn>:
static void alarmOn()
{
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
	TIMER0_on();
    38aa:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TIMER0_on>
}
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	08 95       	ret

000038b4 <alarmOff>:

static void alarmOff()
{
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
	TIMER0_off();
    38bc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <TIMER0_off>
	LED_off(&g_alarmLED);
    38c0:	8a e9       	ldi	r24, 0x9A	; 154
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	0e 94 75 19 	call	0x32ea	; 0x32ea <LED_off>
	BUZZER_off(&g_alarmBuzzer);
    38c8:	88 e9       	ldi	r24, 0x98	; 152
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <BUZZER_off>
	g_alarmTimerCount = 0;
    38d0:	10 92 b3 00 	sts	0x00B3, r1
}
    38d4:	cf 91       	pop	r28
    38d6:	df 91       	pop	r29
    38d8:	08 95       	ret

000038da <ALARM_SYSTEM_Init>:

void ALARM_SYSTEM_Init()
{
    38da:	df 93       	push	r29
    38dc:	cf 93       	push	r28
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Timer0 */
	TIMER0_init(TMR0_1024);
    38e2:	85 e0       	ldi	r24, 0x05	; 5
    38e4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <TIMER0_init>
	TIMER0_setCallback(alarmHandler);
    38e8:	8a e2       	ldi	r24, 0x2A	; 42
    38ea:	9c e1       	ldi	r25, 0x1C	; 28
    38ec:	0e 94 40 0b 	call	0x1680	; 0x1680 <TIMER0_setCallback>
	TIMER0_interruptEnable();
    38f0:	0e 94 32 0b 	call	0x1664	; 0x1664 <TIMER0_interruptEnable>

	/* Initialize Alarm System */
	BUZZER_init(&g_alarmBuzzer);
    38f4:	88 e9       	ldi	r24, 0x98	; 152
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <BUZZER_init>
	LED_init(&g_alarmLED);
    38fc:	8a e9       	ldi	r24, 0x9A	; 154
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	0e 94 49 19 	call	0x3292	; 0x3292 <LED_init>
}
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret

0000390a <ALARM_SYSTEM_Listener>:

void ALARM_SYSTEM_Listener()
{
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
	if(g_threatFlag) alarmOn();
    3912:	80 91 b4 00 	lds	r24, 0x00B4
    3916:	88 23       	and	r24, r24
    3918:	19 f0       	breq	.+6      	; 0x3920 <ALARM_SYSTEM_Listener+0x16>
    391a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <alarmOn>
    391e:	02 c0       	rjmp	.+4      	; 0x3924 <ALARM_SYSTEM_Listener+0x1a>
	else alarmOff();
    3920:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <alarmOff>
}
    3924:	cf 91       	pop	r28
    3926:	df 91       	pop	r29
    3928:	08 95       	ret

0000392a <main>:

/*******************************************************************************
 *                          Main Functions                              	   *
 *******************************************************************************/
int main(void)
{
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
	ALARM_SYSTEM_Init();
    3932:	0e 94 6d 1c 	call	0x38da	; 0x38da <ALARM_SYSTEM_Init>
	FIRE_SYSTEM_Init();
    3936:	0e 94 18 1c 	call	0x3830	; 0x3830 <FIRE_SYSTEM_Init>
	GAS_SYSTEM_Init();
    393a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <GAS_SYSTEM_Init>
	WATER_FLOOD_SYSTEM_Init();
    393e:	0e 94 f5 19 	call	0x33ea	; 0x33ea <WATER_FLOOD_SYSTEM_Init>
	MOTION_DETECTION_SYSTEM_Init();
    3942:	0e 94 a9 1b 	call	0x3752	; 0x3752 <MOTION_DETECTION_SYSTEM_Init>
	SMART_DOOR_LOCK_SYSTEM_Init();
    3946:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <SMART_DOOR_LOCK_SYSTEM_Init>

	/* Enable Global Interrupt */
	INTERRUPT_enable();
    394a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <INTERRUPT_enable>

	/* Testing LED */
	LED_init(&g_testLED);
    394e:	8c e9       	ldi	r24, 0x9C	; 156
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	0e 94 49 19 	call	0x3292	; 0x3292 <LED_init>

	while(1)
	{
		SMART_DOOR_LOCK_SYSTEM_Listener();
    3956:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <SMART_DOOR_LOCK_SYSTEM_Listener>
		MOTION_DETECTION_SYSTEM_Listener();
    395a:	0e 94 b2 1b 	call	0x3764	; 0x3764 <MOTION_DETECTION_SYSTEM_Listener>
		ALARM_SYSTEM_Listener();
    395e:	0e 94 85 1c 	call	0x390a	; 0x390a <ALARM_SYSTEM_Listener>
    3962:	f9 cf       	rjmp	.-14     	; 0x3956 <main+0x2c>

00003964 <__udivmodsi4>:
    3964:	a1 e2       	ldi	r26, 0x21	; 33
    3966:	1a 2e       	mov	r1, r26
    3968:	aa 1b       	sub	r26, r26
    396a:	bb 1b       	sub	r27, r27
    396c:	fd 01       	movw	r30, r26
    396e:	0d c0       	rjmp	.+26     	; 0x398a <__udivmodsi4_ep>

00003970 <__udivmodsi4_loop>:
    3970:	aa 1f       	adc	r26, r26
    3972:	bb 1f       	adc	r27, r27
    3974:	ee 1f       	adc	r30, r30
    3976:	ff 1f       	adc	r31, r31
    3978:	a2 17       	cp	r26, r18
    397a:	b3 07       	cpc	r27, r19
    397c:	e4 07       	cpc	r30, r20
    397e:	f5 07       	cpc	r31, r21
    3980:	20 f0       	brcs	.+8      	; 0x398a <__udivmodsi4_ep>
    3982:	a2 1b       	sub	r26, r18
    3984:	b3 0b       	sbc	r27, r19
    3986:	e4 0b       	sbc	r30, r20
    3988:	f5 0b       	sbc	r31, r21

0000398a <__udivmodsi4_ep>:
    398a:	66 1f       	adc	r22, r22
    398c:	77 1f       	adc	r23, r23
    398e:	88 1f       	adc	r24, r24
    3990:	99 1f       	adc	r25, r25
    3992:	1a 94       	dec	r1
    3994:	69 f7       	brne	.-38     	; 0x3970 <__udivmodsi4_loop>
    3996:	60 95       	com	r22
    3998:	70 95       	com	r23
    399a:	80 95       	com	r24
    399c:	90 95       	com	r25
    399e:	9b 01       	movw	r18, r22
    39a0:	ac 01       	movw	r20, r24
    39a2:	bd 01       	movw	r22, r26
    39a4:	cf 01       	movw	r24, r30
    39a6:	08 95       	ret

000039a8 <__prologue_saves__>:
    39a8:	2f 92       	push	r2
    39aa:	3f 92       	push	r3
    39ac:	4f 92       	push	r4
    39ae:	5f 92       	push	r5
    39b0:	6f 92       	push	r6
    39b2:	7f 92       	push	r7
    39b4:	8f 92       	push	r8
    39b6:	9f 92       	push	r9
    39b8:	af 92       	push	r10
    39ba:	bf 92       	push	r11
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	ca 1b       	sub	r28, r26
    39d2:	db 0b       	sbc	r29, r27
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	09 94       	ijmp

000039e0 <__epilogue_restores__>:
    39e0:	2a 88       	ldd	r2, Y+18	; 0x12
    39e2:	39 88       	ldd	r3, Y+17	; 0x11
    39e4:	48 88       	ldd	r4, Y+16	; 0x10
    39e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    39e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    39ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    39f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    39f2:	b9 84       	ldd	r11, Y+9	; 0x09
    39f4:	c8 84       	ldd	r12, Y+8	; 0x08
    39f6:	df 80       	ldd	r13, Y+7	; 0x07
    39f8:	ee 80       	ldd	r14, Y+6	; 0x06
    39fa:	fd 80       	ldd	r15, Y+5	; 0x05
    39fc:	0c 81       	ldd	r16, Y+4	; 0x04
    39fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3a00:	aa 81       	ldd	r26, Y+2	; 0x02
    3a02:	b9 81       	ldd	r27, Y+1	; 0x01
    3a04:	ce 0f       	add	r28, r30
    3a06:	d1 1d       	adc	r29, r1
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	ed 01       	movw	r28, r26
    3a14:	08 95       	ret

00003a16 <itoa>:
    3a16:	fb 01       	movw	r30, r22
    3a18:	9f 01       	movw	r18, r30
    3a1a:	e8 94       	clt
    3a1c:	42 30       	cpi	r20, 0x02	; 2
    3a1e:	c4 f0       	brlt	.+48     	; 0x3a50 <itoa+0x3a>
    3a20:	45 32       	cpi	r20, 0x25	; 37
    3a22:	b4 f4       	brge	.+44     	; 0x3a50 <itoa+0x3a>
    3a24:	4a 30       	cpi	r20, 0x0A	; 10
    3a26:	29 f4       	brne	.+10     	; 0x3a32 <itoa+0x1c>
    3a28:	97 fb       	bst	r25, 7
    3a2a:	1e f4       	brtc	.+6      	; 0x3a32 <itoa+0x1c>
    3a2c:	90 95       	com	r25
    3a2e:	81 95       	neg	r24
    3a30:	9f 4f       	sbci	r25, 0xFF	; 255
    3a32:	64 2f       	mov	r22, r20
    3a34:	77 27       	eor	r23, r23
    3a36:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <__udivmodhi4>
    3a3a:	80 5d       	subi	r24, 0xD0	; 208
    3a3c:	8a 33       	cpi	r24, 0x3A	; 58
    3a3e:	0c f0       	brlt	.+2      	; 0x3a42 <itoa+0x2c>
    3a40:	89 5d       	subi	r24, 0xD9	; 217
    3a42:	81 93       	st	Z+, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	a1 f7       	brne	.-24     	; 0x3a32 <itoa+0x1c>
    3a4a:	16 f4       	brtc	.+4      	; 0x3a50 <itoa+0x3a>
    3a4c:	5d e2       	ldi	r21, 0x2D	; 45
    3a4e:	51 93       	st	Z+, r21
    3a50:	10 82       	st	Z, r1
    3a52:	c9 01       	movw	r24, r18
    3a54:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <strrev>

00003a58 <strrev>:
    3a58:	dc 01       	movw	r26, r24
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	67 2f       	mov	r22, r23
    3a5e:	71 91       	ld	r23, Z+
    3a60:	77 23       	and	r23, r23
    3a62:	e1 f7       	brne	.-8      	; 0x3a5c <strrev+0x4>
    3a64:	32 97       	sbiw	r30, 0x02	; 2
    3a66:	04 c0       	rjmp	.+8      	; 0x3a70 <strrev+0x18>
    3a68:	7c 91       	ld	r23, X
    3a6a:	6d 93       	st	X+, r22
    3a6c:	70 83       	st	Z, r23
    3a6e:	62 91       	ld	r22, -Z
    3a70:	ae 17       	cp	r26, r30
    3a72:	bf 07       	cpc	r27, r31
    3a74:	c8 f3       	brcs	.-14     	; 0x3a68 <strrev+0x10>
    3a76:	08 95       	ret

00003a78 <__udivmodhi4>:
    3a78:	aa 1b       	sub	r26, r26
    3a7a:	bb 1b       	sub	r27, r27
    3a7c:	51 e1       	ldi	r21, 0x11	; 17
    3a7e:	07 c0       	rjmp	.+14     	; 0x3a8e <__udivmodhi4_ep>

00003a80 <__udivmodhi4_loop>:
    3a80:	aa 1f       	adc	r26, r26
    3a82:	bb 1f       	adc	r27, r27
    3a84:	a6 17       	cp	r26, r22
    3a86:	b7 07       	cpc	r27, r23
    3a88:	10 f0       	brcs	.+4      	; 0x3a8e <__udivmodhi4_ep>
    3a8a:	a6 1b       	sub	r26, r22
    3a8c:	b7 0b       	sbc	r27, r23

00003a8e <__udivmodhi4_ep>:
    3a8e:	88 1f       	adc	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	5a 95       	dec	r21
    3a94:	a9 f7       	brne	.-22     	; 0x3a80 <__udivmodhi4_loop>
    3a96:	80 95       	com	r24
    3a98:	90 95       	com	r25
    3a9a:	bc 01       	movw	r22, r24
    3a9c:	cd 01       	movw	r24, r26
    3a9e:	08 95       	ret

00003aa0 <_exit>:
    3aa0:	f8 94       	cli

00003aa2 <__stop_program>:
    3aa2:	ff cf       	rjmp	.-2      	; 0x3aa2 <__stop_program>
