
Home_Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ed2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a6  00800060  00004ed2  00004f66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800206  00800206  0000510c  2**0
                  ALLOC
  3 .stab         000066b4  00000000  00000000  0000510c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000385b  00000000  00000000  0000b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f01b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f1bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000117b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000141ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014b38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_1>
       8:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__vector_2>
       c:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_3>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_5>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 82 0f 	jmp	0x1f04	; 0x1f04 <__vector_13>
      38:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__vector_14>
      3c:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <__vector_15>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	12 e0       	ldi	r17, 0x02	; 2
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e2 ed       	ldi	r30, 0xD2	; 210
     162:	fe e4       	ldi	r31, 0x4E	; 78
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a6 30       	cpi	r26, 0x06	; 6
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	a6 e0       	ldi	r26, 0x06	; 6
     174:	b2 e0       	ldi	r27, 0x02	; 2
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ad 32       	cpi	r26, 0x2D	; 45
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 53 24 	call	0x48a6	; 0x48a6 <main>
     184:	0c 94 67 27 	jmp	0x4ece	; 0x4ece <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a9 ee       	ldi	r26, 0xE9	; 233
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	89 ee       	ldi	r24, 0xE9	; 233
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	69 ee       	ldi	r22, 0xE9	; 233
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 a0 24 	jmp	0x4940	; 0x4940 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 bc 24 	jmp	0x4978	; 0x4978 <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 98 24 	jmp	0x4930	; 0x4930 <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	ef 50       	subi	r30, 0x0F	; 15
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <PERFORMANCE_Init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void PERFORMANCE_Init()
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
     f30:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_init>
	TIMER1_init(TMR1_1);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <TIMER1_init>
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <PERFORMANCE_Start>:
void PERFORMANCE_Start()
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	TIMER1_on();
     f48:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <TIMER1_on>
}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <PERFORMANCE_Stop>:
void PERFORMANCE_Stop()
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	TIMER1_off();
     f5a:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <TIMER1_off>
}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <PERFORMANCE_Measure>:
void PERFORMANCE_Measure()
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <PERFORMANCE_Measure+0x6>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <PERFORMANCE_Measure+0x8>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <PERFORMANCE_Measure+0xa>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	uint16 timer =  TIMER1_read();
     f72:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <TIMER1_read>
     f76:	9e 83       	std	Y+6, r25	; 0x06
     f78:	8d 83       	std	Y+5, r24	; 0x05
	float32 performance = timer / 1.6;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	cc 01       	movw	r24, r24
     f80:	a0 e0       	ldi	r26, 0x00	; 0
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	2d ec       	ldi	r18, 0xCD	; 205
     f96:	3c ec       	ldi	r19, 0xCC	; 204
     f98:	4c ec       	ldi	r20, 0xCC	; 204
     f9a:	5f e3       	ldi	r21, 0x3F	; 63
     f9c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	ab 83       	std	Y+3, r26	; 0x03
     faa:	bc 83       	std	Y+4, r27	; 0x04
	LCD_clearScreen();
     fac:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <LCD_clearScreen>
	LCD_floatToString(performance);
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	ab 81       	ldd	r26, Y+3	; 0x03
     fb6:	bc 81       	ldd	r27, Y+4	; 0x04
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <LCD_floatToString>
	TIMER1_write(0);
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <TIMER1_write>
}
     fc8:	26 96       	adiw	r28, 0x06	; 6
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <EEPROM_write>:
#include "atmega32_eeprom.h"

#include <avr/io.h>

void EEPROM_write(uint16 uiAddress, uint8 ucData)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <EEPROM_write+0x6>
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	6b 83       	std	Y+3, r22	; 0x03
	while(EECR & (1<<EEWE)); 				/* Wait for completion of previous write */
     fec:	ec e3       	ldi	r30, 0x3C	; 60
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	82 70       	andi	r24, 0x02	; 2
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	b9 f7       	brne	.-18     	; 0xfec <EEPROM_write+0x12>

	/* Set up address and data registers */
	EEAR = uiAddress;
     ffe:	ee e3       	ldi	r30, 0x3E	; 62
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	80 83       	st	Z, r24
	EEDR = ucData;
    100a:	ed e3       	ldi	r30, 0x3D	; 61
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	80 83       	st	Z, r24

	EECR |= (1<<EEMWE);						/* Write logical one to EEMWE */
    1012:	ac e3       	ldi	r26, 0x3C	; 60
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ec e3       	ldi	r30, 0x3C	; 60
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	84 60       	ori	r24, 0x04	; 4
    101e:	8c 93       	st	X, r24
	EECR |= (1<<EEWE);						/* Start eeprom write by setting EEWE */
    1020:	ac e3       	ldi	r26, 0x3C	; 60
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ec e3       	ldi	r30, 0x3C	; 60
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	8c 93       	st	X, r24
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <EEPROM_read>:

uint8 EEPROM_read(uint16 uiAddress)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <EEPROM_read+0x6>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
	while(EECR & (1<<EEWE));				/* Wait for completion of previous write */
    1048:	ec e3       	ldi	r30, 0x3C	; 60
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	82 70       	andi	r24, 0x02	; 2
    1054:	90 70       	andi	r25, 0x00	; 0
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	b9 f7       	brne	.-18     	; 0x1048 <EEPROM_read+0xe>
	EEAR = uiAddress;						/* Set up address register */
    105a:	ee e3       	ldi	r30, 0x3E	; 62
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	9a 81       	ldd	r25, Y+2	; 0x02
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
	EECR |= (1<<EERE);						/* Start eeprom read by writing EERE */
    1066:	ac e3       	ldi	r26, 0x3C	; 60
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ec e3       	ldi	r30, 0x3C	; 60
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	81 60       	ori	r24, 0x01	; 1
    1072:	8c 93       	st	X, r24
	return EEDR;							/* Return data from data register */
    1074:	ed e3       	ldi	r30, 0x3D	; 61
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <GPIO_setupPinDirection>:
/*
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <GPIO_setupPinDirection+0x6>
    108a:	00 d0       	rcall	.+0      	; 0x108c <GPIO_setupPinDirection+0x8>
    108c:	0f 92       	push	r0
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	6a 83       	std	Y+2, r22	; 0x02
    1096:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <GPIO_setupPinDirection+0x1c>
    109e:	d5 c0       	rjmp	.+426    	; 0x124a <GPIO_setupPinDirection+0x1c6>
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <GPIO_setupPinDirection+0x24>
    10a6:	d1 c0       	rjmp	.+418    	; 0x124a <GPIO_setupPinDirection+0x1c6>
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3d 83       	std	Y+5, r19	; 0x05
    10b0:	2c 83       	std	Y+4, r18	; 0x04
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	9d 81       	ldd	r25, Y+5	; 0x05
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	91 05       	cpc	r25, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <GPIO_setupPinDirection+0x3a>
    10bc:	43 c0       	rjmp	.+134    	; 0x1144 <GPIO_setupPinDirection+0xc0>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	2c f4       	brge	.+10     	; 0x10d2 <GPIO_setupPinDirection+0x4e>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	71 f0       	breq	.+28     	; 0x10ec <GPIO_setupPinDirection+0x68>
    10d0:	bc c0       	rjmp	.+376    	; 0x124a <GPIO_setupPinDirection+0x1c6>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <GPIO_setupPinDirection+0x5a>
    10dc:	5f c0       	rjmp	.+190    	; 0x119c <GPIO_setupPinDirection+0x118>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <GPIO_setupPinDirection+0x66>
    10e8:	85 c0       	rjmp	.+266    	; 0x11f4 <GPIO_setupPinDirection+0x170>
    10ea:	af c0       	rjmp	.+350    	; 0x124a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRA,pin_num);
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	a1 f4       	brne	.+40     	; 0x111a <GPIO_setupPinDirection+0x96>
    10f2:	aa e3       	ldi	r26, 0x3A	; 58
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ea e3       	ldi	r30, 0x3A	; 58
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <GPIO_setupPinDirection+0x8c>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <GPIO_setupPinDirection+0x88>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	98 c0       	rjmp	.+304    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRA,pin_num);
    111a:	aa e3       	ldi	r26, 0x3A	; 58
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ea e3       	ldi	r30, 0x3A	; 58
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GPIO_setupPinDirection+0xb4>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GPIO_setupPinDirection+0xb0>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	83 c0       	rjmp	.+262    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRB,pin_num);
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	a1 f4       	brne	.+40     	; 0x1172 <GPIO_setupPinDirection+0xee>
    114a:	a7 e3       	ldi	r26, 0x37	; 55
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e7 e3       	ldi	r30, 0x37	; 55
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_setupPinDirection+0xe4>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_setupPinDirection+0xe0>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	6c c0       	rjmp	.+216    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRB,pin_num);
    1172:	a7 e3       	ldi	r26, 0x37	; 55
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e7 e3       	ldi	r30, 0x37	; 55
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_setupPinDirection+0x10c>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_setupPinDirection+0x108>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	57 c0       	rjmp	.+174    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRC,pin_num);
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	a1 f4       	brne	.+40     	; 0x11ca <GPIO_setupPinDirection+0x146>
    11a2:	a4 e3       	ldi	r26, 0x34	; 52
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e4 e3       	ldi	r30, 0x34	; 52
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_setupPinDirection+0x13c>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_setupPinDirection+0x138>
    11c4:	84 2b       	or	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	40 c0       	rjmp	.+128    	; 0x124a <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRC,pin_num);
    11ca:	a4 e3       	ldi	r26, 0x34	; 52
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e4 e3       	ldi	r30, 0x34	; 52
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_setupPinDirection+0x164>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_setupPinDirection+0x160>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	2b c0       	rjmp	.+86     	; 0x124a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRD,pin_num);
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	a1 f4       	brne	.+40     	; 0x1222 <GPIO_setupPinDirection+0x19e>
    11fa:	a1 e3       	ldi	r26, 0x31	; 49
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_setupPinDirection+0x194>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_setupPinDirection+0x190>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	14 c0       	rjmp	.+40     	; 0x124a <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRD,pin_num);
    1222:	a1 e3       	ldi	r26, 0x31	; 49
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e1 e3       	ldi	r30, 0x31	; 49
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_setupPinDirection+0x1bc>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_setupPinDirection+0x1b8>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
			break;
		}
	}
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <GPIO_writePin+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <GPIO_writePin+0x8>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	89 83       	std	Y+1, r24	; 0x01
    126a:	6a 83       	std	Y+2, r22	; 0x02
    126c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	88 30       	cpi	r24, 0x08	; 8
    1272:	08 f0       	brcs	.+2      	; 0x1276 <GPIO_writePin+0x1c>
    1274:	e4 c0       	rjmp	.+456    	; 0x143e <GPIO_writePin+0x1e4>
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	08 f0       	brcs	.+2      	; 0x127e <GPIO_writePin+0x24>
    127c:	e0 c0       	rjmp	.+448    	; 0x143e <GPIO_writePin+0x1e4>
	{
		/* Set up the pin value as required */
		switch (port_num)
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	3d 83       	std	Y+5, r19	; 0x05
    1286:	2c 83       	std	Y+4, r18	; 0x04
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	9d 81       	ldd	r25, Y+5	; 0x05
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	91 05       	cpc	r25, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <GPIO_writePin+0x3a>
    1292:	47 c0       	rjmp	.+142    	; 0x1322 <GPIO_writePin+0xc8>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <GPIO_writePin+0x4e>
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	9d 81       	ldd	r25, Y+5	; 0x05
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <GPIO_writePin+0x68>
    12a6:	cb c0       	rjmp	.+406    	; 0x143e <GPIO_writePin+0x1e4>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <GPIO_writePin+0x5a>
    12b2:	67 c0       	rjmp	.+206    	; 0x1382 <GPIO_writePin+0x128>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <GPIO_writePin+0x66>
    12be:	91 c0       	rjmp	.+290    	; 0x13e2 <GPIO_writePin+0x188>
    12c0:	be c0       	rjmp	.+380    	; 0x143e <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTA, pin_num);
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	88 23       	and	r24, r24
    12c6:	a9 f4       	brne	.+42     	; 0x12f2 <GPIO_writePin+0x98>
    12c8:	ab e3       	ldi	r26, 0x3B	; 59
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_writePin+0x8c>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_writePin+0x88>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	a6 c0       	rjmp	.+332    	; 0x143e <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTA, pin_num);
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	09 f0       	breq	.+2      	; 0x12fa <GPIO_writePin+0xa0>
    12f8:	a2 c0       	rjmp	.+324    	; 0x143e <GPIO_writePin+0x1e4>
    12fa:	ab e3       	ldi	r26, 0x3B	; 59
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	eb e3       	ldi	r30, 0x3B	; 59
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <GPIO_writePin+0xbe>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <GPIO_writePin+0xba>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	8e c0       	rjmp	.+284    	; 0x143e <GPIO_writePin+0x1e4>
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTB, pin_num);
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	88 23       	and	r24, r24
    1326:	a9 f4       	brne	.+42     	; 0x1352 <GPIO_writePin+0xf8>
    1328:	a8 e3       	ldi	r26, 0x38	; 56
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e8 e3       	ldi	r30, 0x38	; 56
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <GPIO_writePin+0xec>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <GPIO_writePin+0xe8>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	76 c0       	rjmp	.+236    	; 0x143e <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTB, pin_num);
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	09 f0       	breq	.+2      	; 0x135a <GPIO_writePin+0x100>
    1358:	72 c0       	rjmp	.+228    	; 0x143e <GPIO_writePin+0x1e4>
    135a:	a8 e3       	ldi	r26, 0x38	; 56
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e8 e3       	ldi	r30, 0x38	; 56
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <GPIO_writePin+0x11e>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <GPIO_writePin+0x11a>
    137c:	84 2b       	or	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	5e c0       	rjmp	.+188    	; 0x143e <GPIO_writePin+0x1e4>
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTC, pin_num);
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	88 23       	and	r24, r24
    1386:	a9 f4       	brne	.+42     	; 0x13b2 <GPIO_writePin+0x158>
    1388:	a5 e3       	ldi	r26, 0x35	; 53
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e5 e3       	ldi	r30, 0x35	; 53
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_writePin+0x14c>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_writePin+0x148>
    13aa:	80 95       	com	r24
    13ac:	84 23       	and	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	46 c0       	rjmp	.+140    	; 0x143e <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTC, pin_num);
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	09 f0       	breq	.+2      	; 0x13ba <GPIO_writePin+0x160>
    13b8:	42 c0       	rjmp	.+132    	; 0x143e <GPIO_writePin+0x1e4>
    13ba:	a5 e3       	ldi	r26, 0x35	; 53
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e3       	ldi	r30, 0x35	; 53
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <GPIO_writePin+0x17e>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <GPIO_writePin+0x17a>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	2e c0       	rjmp	.+92     	; 0x143e <GPIO_writePin+0x1e4>
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTD, pin_num);
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 23       	and	r24, r24
    13e6:	a9 f4       	brne	.+42     	; 0x1412 <GPIO_writePin+0x1b8>
    13e8:	a2 e3       	ldi	r26, 0x32	; 50
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e2 e3       	ldi	r30, 0x32	; 50
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_writePin+0x1ac>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_writePin+0x1a8>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	16 c0       	rjmp	.+44     	; 0x143e <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTD, pin_num);
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	99 f4       	brne	.+38     	; 0x143e <GPIO_writePin+0x1e4>
    1418:	a2 e3       	ldi	r26, 0x32	; 50
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e3       	ldi	r30, 0x32	; 50
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <GPIO_writePin+0x1dc>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <GPIO_writePin+0x1d8>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
			break;
		}
	}
}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <GPIO_readPin>:
/*
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	29 97       	sbiw	r28, 0x09	; 9
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	88 30       	cpi	r24, 0x08	; 8
    146a:	08 f0       	brcs	.+2      	; 0x146e <GPIO_readPin+0x20>
    146c:	8d c0       	rjmp	.+282    	; 0x1588 <GPIO_readPin+0x13a>
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	08 f0       	brcs	.+2      	; 0x1476 <GPIO_readPin+0x28>
    1474:	89 c0       	rjmp	.+274    	; 0x1588 <GPIO_readPin+0x13a>
	{
		/* Return the value of the desired pin as required */
		switch (port_num)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	39 87       	std	Y+9, r19	; 0x09
    147e:	28 87       	std	Y+8, r18	; 0x08
    1480:	48 85       	ldd	r20, Y+8	; 0x08
    1482:	59 85       	ldd	r21, Y+9	; 0x09
    1484:	41 30       	cpi	r20, 0x01	; 1
    1486:	51 05       	cpc	r21, r1
    1488:	89 f1       	breq	.+98     	; 0x14ec <GPIO_readPin+0x9e>
    148a:	88 85       	ldd	r24, Y+8	; 0x08
    148c:	99 85       	ldd	r25, Y+9	; 0x09
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	91 05       	cpc	r25, r1
    1492:	34 f4       	brge	.+12     	; 0x14a0 <GPIO_readPin+0x52>
    1494:	28 85       	ldd	r18, Y+8	; 0x08
    1496:	39 85       	ldd	r19, Y+9	; 0x09
    1498:	21 15       	cp	r18, r1
    149a:	31 05       	cpc	r19, r1
    149c:	69 f0       	breq	.+26     	; 0x14b8 <GPIO_readPin+0x6a>
    149e:	74 c0       	rjmp	.+232    	; 0x1588 <GPIO_readPin+0x13a>
    14a0:	48 85       	ldd	r20, Y+8	; 0x08
    14a2:	59 85       	ldd	r21, Y+9	; 0x09
    14a4:	42 30       	cpi	r20, 0x02	; 2
    14a6:	51 05       	cpc	r21, r1
    14a8:	d9 f1       	breq	.+118    	; 0x1520 <GPIO_readPin+0xd2>
    14aa:	88 85       	ldd	r24, Y+8	; 0x08
    14ac:	99 85       	ldd	r25, Y+9	; 0x09
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <GPIO_readPin+0x68>
    14b4:	4f c0       	rjmp	.+158    	; 0x1554 <GPIO_readPin+0x106>
    14b6:	68 c0       	rjmp	.+208    	; 0x1588 <GPIO_readPin+0x13a>
		{
		case PORTA_ID:
			return (BIT_IS_SET(PINA, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    14b8:	e9 e3       	ldi	r30, 0x39	; 57
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a9 01       	movw	r20, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <GPIO_readPin+0x82>
    14cc:	55 95       	asr	r21
    14ce:	47 95       	ror	r20
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <GPIO_readPin+0x7e>
    14d4:	ca 01       	movw	r24, r20
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	88 23       	and	r24, r24
    14dc:	19 f0       	breq	.+6      	; 0x14e4 <GPIO_readPin+0x96>
    14de:	51 e0       	ldi	r21, 0x01	; 1
    14e0:	5e 83       	std	Y+6, r21	; 0x06
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <GPIO_readPin+0x98>
    14e4:	1e 82       	std	Y+6, r1	; 0x06
    14e6:	8e 81       	ldd	r24, Y+6	; 0x06
    14e8:	8f 83       	std	Y+7, r24	; 0x07
    14ea:	4f c0       	rjmp	.+158    	; 0x158a <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    14ec:	e6 e3       	ldi	r30, 0x36	; 54
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <GPIO_readPin+0xb6>
    1500:	55 95       	asr	r21
    1502:	47 95       	ror	r20
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <GPIO_readPin+0xb2>
    1508:	ca 01       	movw	r24, r20
    150a:	81 70       	andi	r24, 0x01	; 1
    150c:	90 70       	andi	r25, 0x00	; 0
    150e:	88 23       	and	r24, r24
    1510:	19 f0       	breq	.+6      	; 0x1518 <GPIO_readPin+0xca>
    1512:	51 e0       	ldi	r21, 0x01	; 1
    1514:	5d 83       	std	Y+5, r21	; 0x05
    1516:	01 c0       	rjmp	.+2      	; 0x151a <GPIO_readPin+0xcc>
    1518:	1d 82       	std	Y+5, r1	; 0x05
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	8f 83       	std	Y+7, r24	; 0x07
    151e:	35 c0       	rjmp	.+106    	; 0x158a <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1520:	e3 e3       	ldi	r30, 0x33	; 51
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	a9 01       	movw	r20, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <GPIO_readPin+0xea>
    1534:	55 95       	asr	r21
    1536:	47 95       	ror	r20
    1538:	8a 95       	dec	r24
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <GPIO_readPin+0xe6>
    153c:	ca 01       	movw	r24, r20
    153e:	81 70       	andi	r24, 0x01	; 1
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	88 23       	and	r24, r24
    1544:	19 f0       	breq	.+6      	; 0x154c <GPIO_readPin+0xfe>
    1546:	51 e0       	ldi	r21, 0x01	; 1
    1548:	5c 83       	std	Y+4, r21	; 0x04
    154a:	01 c0       	rjmp	.+2      	; 0x154e <GPIO_readPin+0x100>
    154c:	1c 82       	std	Y+4, r1	; 0x04
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	8f 83       	std	Y+7, r24	; 0x07
    1552:	1b c0       	rjmp	.+54     	; 0x158a <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1554:	e0 e3       	ldi	r30, 0x30	; 48
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a9 01       	movw	r20, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_readPin+0x11e>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	8a 95       	dec	r24
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_readPin+0x11a>
    1570:	ca 01       	movw	r24, r20
    1572:	81 70       	andi	r24, 0x01	; 1
    1574:	90 70       	andi	r25, 0x00	; 0
    1576:	88 23       	and	r24, r24
    1578:	19 f0       	breq	.+6      	; 0x1580 <GPIO_readPin+0x132>
    157a:	51 e0       	ldi	r21, 0x01	; 1
    157c:	5b 83       	std	Y+3, r21	; 0x03
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <GPIO_readPin+0x134>
    1580:	1b 82       	std	Y+3, r1	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	8f 83       	std	Y+7, r24	; 0x07
    1586:	01 c0       	rjmp	.+2      	; 0x158a <GPIO_readPin+0x13c>
			break;
		}
	}
	return LOGIC_LOW;
    1588:	1f 82       	std	Y+7, r1	; 0x07
    158a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    158c:	29 96       	adiw	r28, 0x09	; 9
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <GPIO_setupPortDirection+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <GPIO_setupPortDirection+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	84 30       	cpi	r24, 0x04	; 4
    15b2:	90 f5       	brcc	.+100    	; 0x1618 <GPIO_setupPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port_num)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3c 83       	std	Y+4, r19	; 0x04
    15bc:	2b 83       	std	Y+3, r18	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	d1 f0       	breq	.+52     	; 0x15fc <GPIO_setupPortDirection+0x5e>
    15c8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ca:	3c 81       	ldd	r19, Y+4	; 0x04
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	2c f4       	brge	.+10     	; 0x15dc <GPIO_setupPortDirection+0x3e>
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <GPIO_setupPortDirection+0x54>
    15da:	1e c0       	rjmp	.+60     	; 0x1618 <GPIO_setupPortDirection+0x7a>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	81 f0       	breq	.+32     	; 0x1606 <GPIO_setupPortDirection+0x68>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	91 05       	cpc	r25, r1
    15ee:	81 f0       	breq	.+32     	; 0x1610 <GPIO_setupPortDirection+0x72>
    15f0:	13 c0       	rjmp	.+38     	; 0x1618 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15f2:	ea e3       	ldi	r30, 0x3A	; 58
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	80 83       	st	Z, r24
    15fa:	0e c0       	rjmp	.+28     	; 0x1618 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15fc:	e7 e3       	ldi	r30, 0x37	; 55
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	80 83       	st	Z, r24
    1604:	09 c0       	rjmp	.+18     	; 0x1618 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1606:	e4 e3       	ldi	r30, 0x34	; 52
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	80 83       	st	Z, r24
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1610:	e1 e3       	ldi	r30, 0x31	; 49
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	80 83       	st	Z, r24
			break;
		}
	}
}
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <GPIO_writePort+0x6>
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_writePort+0x8>
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	84 30       	cpi	r24, 0x04	; 4
    163a:	90 f5       	brcc	.+100    	; 0x16a0 <GPIO_writePort+0x7a>
	{
		/* Setup the port value as required */
		switch(port_num)
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	3c 83       	std	Y+4, r19	; 0x04
    1644:	2b 83       	std	Y+3, r18	; 0x03
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	91 05       	cpc	r25, r1
    164e:	d1 f0       	breq	.+52     	; 0x1684 <GPIO_writePort+0x5e>
    1650:	2b 81       	ldd	r18, Y+3	; 0x03
    1652:	3c 81       	ldd	r19, Y+4	; 0x04
    1654:	22 30       	cpi	r18, 0x02	; 2
    1656:	31 05       	cpc	r19, r1
    1658:	2c f4       	brge	.+10     	; 0x1664 <GPIO_writePort+0x3e>
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	61 f0       	breq	.+24     	; 0x167a <GPIO_writePort+0x54>
    1662:	1e c0       	rjmp	.+60     	; 0x16a0 <GPIO_writePort+0x7a>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	81 f0       	breq	.+32     	; 0x168e <GPIO_writePort+0x68>
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	83 30       	cpi	r24, 0x03	; 3
    1674:	91 05       	cpc	r25, r1
    1676:	81 f0       	breq	.+32     	; 0x1698 <GPIO_writePort+0x72>
    1678:	13 c0       	rjmp	.+38     	; 0x16a0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    167a:	eb e3       	ldi	r30, 0x3B	; 59
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	80 83       	st	Z, r24
    1682:	0e c0       	rjmp	.+28     	; 0x16a0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	80 83       	st	Z, r24
    168c:	09 c0       	rjmp	.+18     	; 0x16a0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    168e:	e5 e3       	ldi	r30, 0x35	; 53
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1698:	e2 e3       	ldi	r30, 0x32	; 50
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
			break;
		}
	}
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <GPIO_readPort>:
/*
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <GPIO_readPort+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <GPIO_readPort+0x8>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
	if(port_num < NUM_OF_PORTS)
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	98 f5       	brcc	.+102    	; 0x1728 <GPIO_readPort+0x7a>
	{
		/* Return the value of the desired port as required */
		switch(port_num)
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3c 83       	std	Y+4, r19	; 0x04
    16ca:	2b 83       	std	Y+3, r18	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	91 05       	cpc	r25, r1
    16d4:	d1 f0       	breq	.+52     	; 0x170a <GPIO_readPort+0x5c>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	2c f4       	brge	.+10     	; 0x16ea <GPIO_readPort+0x3c>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	61 f0       	breq	.+24     	; 0x1700 <GPIO_readPort+0x52>
    16e8:	1f c0       	rjmp	.+62     	; 0x1728 <GPIO_readPort+0x7a>
    16ea:	2b 81       	ldd	r18, Y+3	; 0x03
    16ec:	3c 81       	ldd	r19, Y+4	; 0x04
    16ee:	22 30       	cpi	r18, 0x02	; 2
    16f0:	31 05       	cpc	r19, r1
    16f2:	81 f0       	breq	.+32     	; 0x1714 <GPIO_readPort+0x66>
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	81 f0       	breq	.+32     	; 0x171e <GPIO_readPort+0x70>
    16fe:	14 c0       	rjmp	.+40     	; 0x1728 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    1700:	e9 e3       	ldi	r30, 0x39	; 57
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	90 81       	ld	r25, Z
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	10 c0       	rjmp	.+32     	; 0x172a <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    170a:	e6 e3       	ldi	r30, 0x36	; 54
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	20 81       	ld	r18, Z
    1710:	2a 83       	std	Y+2, r18	; 0x02
    1712:	0b c0       	rjmp	.+22     	; 0x172a <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    1714:	e3 e3       	ldi	r30, 0x33	; 51
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	30 81       	ld	r19, Z
    171a:	3a 83       	std	Y+2, r19	; 0x02
    171c:	06 c0       	rjmp	.+12     	; 0x172a <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    171e:	e0 e3       	ldi	r30, 0x30	; 48
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	8a 83       	std	Y+2, r24	; 0x02
    1726:	01 c0       	rjmp	.+2      	; 0x172a <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    1728:	1a 82       	std	Y+2, r1	; 0x02
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <__vector_1>:

/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(INT0_vect)
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	2f 93       	push	r18
    1746:	3f 93       	push	r19
    1748:	4f 93       	push	r20
    174a:	5f 93       	push	r21
    174c:	6f 93       	push	r22
    174e:	7f 93       	push	r23
    1750:	8f 93       	push	r24
    1752:	9f 93       	push	r25
    1754:	af 93       	push	r26
    1756:	bf 93       	push	r27
    1758:	ef 93       	push	r30
    175a:	ff 93       	push	r31
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt0 != NULL_PTR)
    1764:	80 91 06 02 	lds	r24, 0x0206
    1768:	90 91 07 02 	lds	r25, 0x0207
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	29 f0       	breq	.+10     	; 0x177a <__vector_1+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1770:	e0 91 06 02 	lds	r30, 0x0206
    1774:	f0 91 07 02 	lds	r31, 0x0207
    1778:	09 95       	icall
		}
}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	ff 91       	pop	r31
    1780:	ef 91       	pop	r30
    1782:	bf 91       	pop	r27
    1784:	af 91       	pop	r26
    1786:	9f 91       	pop	r25
    1788:	8f 91       	pop	r24
    178a:	7f 91       	pop	r23
    178c:	6f 91       	pop	r22
    178e:	5f 91       	pop	r21
    1790:	4f 91       	pop	r20
    1792:	3f 91       	pop	r19
    1794:	2f 91       	pop	r18
    1796:	0f 90       	pop	r0
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	0f 90       	pop	r0
    179c:	1f 90       	pop	r1
    179e:	18 95       	reti

000017a0 <__vector_2>:

ISR(INT1_vect)
{
    17a0:	1f 92       	push	r1
    17a2:	0f 92       	push	r0
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	0f 92       	push	r0
    17a8:	11 24       	eor	r1, r1
    17aa:	2f 93       	push	r18
    17ac:	3f 93       	push	r19
    17ae:	4f 93       	push	r20
    17b0:	5f 93       	push	r21
    17b2:	6f 93       	push	r22
    17b4:	7f 93       	push	r23
    17b6:	8f 93       	push	r24
    17b8:	9f 93       	push	r25
    17ba:	af 93       	push	r26
    17bc:	bf 93       	push	r27
    17be:	ef 93       	push	r30
    17c0:	ff 93       	push	r31
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt1 != NULL_PTR)
    17ca:	80 91 08 02 	lds	r24, 0x0208
    17ce:	90 91 09 02 	lds	r25, 0x0209
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	29 f0       	breq	.+10     	; 0x17e0 <__vector_2+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    17d6:	e0 91 08 02 	lds	r30, 0x0208
    17da:	f0 91 09 02 	lds	r31, 0x0209
    17de:	09 95       	icall
		}
}
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_3>:

ISR(INT2_vect)
{
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	2f 93       	push	r18
    1812:	3f 93       	push	r19
    1814:	4f 93       	push	r20
    1816:	5f 93       	push	r21
    1818:	6f 93       	push	r22
    181a:	7f 93       	push	r23
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
    1820:	af 93       	push	r26
    1822:	bf 93       	push	r27
    1824:	ef 93       	push	r30
    1826:	ff 93       	push	r31
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrInt2 != NULL_PTR)
    1830:	80 91 0a 02 	lds	r24, 0x020A
    1834:	90 91 0b 02 	lds	r25, 0x020B
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	29 f0       	breq	.+10     	; 0x1846 <__vector_3+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrInt2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    183c:	e0 91 0a 02 	lds	r30, 0x020A
    1840:	f0 91 0b 02 	lds	r31, 0x020B
    1844:	09 95       	icall
		}
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	bf 91       	pop	r27
    1850:	af 91       	pop	r26
    1852:	9f 91       	pop	r25
    1854:	8f 91       	pop	r24
    1856:	7f 91       	pop	r23
    1858:	6f 91       	pop	r22
    185a:	5f 91       	pop	r21
    185c:	4f 91       	pop	r20
    185e:	3f 91       	pop	r19
    1860:	2f 91       	pop	r18
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <INTERRUPT_enable>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void INTERRUPT_enable()
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);					/* Enable Global Interrupts */
    1874:	af e5       	ldi	r26, 0x5F	; 95
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ef e5       	ldi	r30, 0x5F	; 95
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 68       	ori	r24, 0x80	; 128
    1880:	8c 93       	st	X, r24
}
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <INTERRUPT_INT0_init>:
void INTERRUPT_INT0_init(void(*a_ptr)(void), InterruptSense sense)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <INTERRUPT_INT0_init+0x6>
    188e:	0f 92       	push	r0
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
    189a:	83 e0       	ldi	r24, 0x03	; 3
    189c:	62 e0       	ldi	r22, 0x02	; 2
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GICR |= (1<<INT0);
    18a4:	ab e5       	ldi	r26, 0x5B	; 91
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	eb e5       	ldi	r30, 0x5B	; 91
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 64       	ori	r24, 0x40	; 64
    18b0:	8c 93       	st	X, r24
	MCUCR &= 0xFC;
    18b2:	a5 e5       	ldi	r26, 0x55	; 85
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e5       	ldi	r30, 0x55	; 85
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	8c 7f       	andi	r24, 0xFC	; 252
    18be:	8c 93       	st	X, r24
	MCUCR |= (sense<<ISC00);
    18c0:	a5 e5       	ldi	r26, 0x55	; 85
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e5 e5       	ldi	r30, 0x55	; 85
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	90 81       	ld	r25, Z
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	89 2b       	or	r24, r25
    18ce:	8c 93       	st	X, r24
	g_callBackPtrInt0 = a_ptr;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	90 93 07 02 	sts	0x0207, r25
    18d8:	80 93 06 02 	sts	0x0206, r24
}
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <INTERRUPT_INT1_init>:
void INTERRUPT_INT1_init(void(*a_ptr)(void), InterruptSense sense)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <INTERRUPT_INT1_init+0x6>
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	63 e0       	ldi	r22, 0x03	; 3
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GICR |= (1<<INT1);
    1904:	ab e5       	ldi	r26, 0x5B	; 91
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	eb e5       	ldi	r30, 0x5B	; 91
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 68       	ori	r24, 0x80	; 128
    1910:	8c 93       	st	X, r24
	MCUCR &= 0xF3;
    1912:	a5 e5       	ldi	r26, 0x55	; 85
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e5       	ldi	r30, 0x55	; 85
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	83 7f       	andi	r24, 0xF3	; 243
    191e:	8c 93       	st	X, r24
	MCUCR |= (sense<<ISC10);
    1920:	a5 e5       	ldi	r26, 0x55	; 85
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e5       	ldi	r30, 0x55	; 85
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	28 2f       	mov	r18, r24
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	82 2b       	or	r24, r18
    193c:	8c 93       	st	X, r24
	g_callBackPtrInt1 = a_ptr;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	90 93 09 02 	sts	0x0209, r25
    1946:	80 93 08 02 	sts	0x0208, r24
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <INTERRUPT_INT2_init>:
void INTERRUPT_INT2_init(void(*a_ptr)(void), InterruptSense sense)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <INTERRUPT_INT2_init+0x6>
    195c:	0f 92       	push	r0
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GICR |= (1<<INT2);
    1972:	ab e5       	ldi	r26, 0x5B	; 91
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	eb e5       	ldi	r30, 0x5B	; 91
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 62       	ori	r24, 0x20	; 32
    197e:	8c 93       	st	X, r24
	sense &= ~(1<<1);
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	8d 7f       	andi	r24, 0xFD	; 253
    1984:	8b 83       	std	Y+3, r24	; 0x03
	MCUCSR =(MCUCSR & ~(1<<ISC2))|(sense<<ISC2);
    1986:	a4 e5       	ldi	r26, 0x54	; 84
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e4 e5       	ldi	r30, 0x54	; 84
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	28 2f       	mov	r18, r24
    1992:	2f 7b       	andi	r18, 0xBF	; 191
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	00 24       	eor	r0, r0
    199c:	96 95       	lsr	r25
    199e:	87 95       	ror	r24
    19a0:	07 94       	ror	r0
    19a2:	96 95       	lsr	r25
    19a4:	87 95       	ror	r24
    19a6:	07 94       	ror	r0
    19a8:	98 2f       	mov	r25, r24
    19aa:	80 2d       	mov	r24, r0
    19ac:	82 2b       	or	r24, r18
    19ae:	8c 93       	st	X, r24
	g_callBackPtrInt2 = a_ptr;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	90 93 0b 02 	sts	0x020B, r25
    19b8:	80 93 0a 02 	sts	0x020A, r24
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <INTERRUPT_disable>:
void INTERRUPT_disable()
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	SREG &= ~(1<<7);					/* Disable Global Interrupts */
    19d0:	af e5       	ldi	r26, 0x5F	; 95
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ef e5       	ldi	r30, 0x5F	; 95
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	8f 77       	andi	r24, 0x7F	; 127
    19dc:	8c 93       	st	X, r24
}
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <__vector_11>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    19e4:	1f 92       	push	r1
    19e6:	0f 92       	push	r0
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	0f 92       	push	r0
    19ec:	11 24       	eor	r1, r1
    19ee:	2f 93       	push	r18
    19f0:	3f 93       	push	r19
    19f2:	4f 93       	push	r20
    19f4:	5f 93       	push	r21
    19f6:	6f 93       	push	r22
    19f8:	7f 93       	push	r23
    19fa:	8f 93       	push	r24
    19fc:	9f 93       	push	r25
    19fe:	af 93       	push	r26
    1a00:	bf 93       	push	r27
    1a02:	ef 93       	push	r30
    1a04:	ff 93       	push	r31
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOVF0 != NULL_PTR)
    1a0e:	80 91 0c 02 	lds	r24, 0x020C
    1a12:	90 91 0d 02 	lds	r25, 0x020D
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOVF0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a1a:	e0 91 0c 02 	lds	r30, 0x020C
    1a1e:	f0 91 0d 02 	lds	r31, 0x020D
    1a22:	09 95       	icall
	}
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <TIMER0_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER0_init(TIMER0_CLK clk)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	0f 92       	push	r0
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = 0;
    1a56:	e3 e5       	ldi	r30, 0x53	; 83
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	10 82       	st	Z, r1
	TCCR0 |= (1<<FOC0);
    1a5c:	a3 e5       	ldi	r26, 0x53	; 83
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e3 e5       	ldi	r30, 0x53	; 83
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 93       	st	X, r24
	g_clock = clk;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	80 93 0e 02 	sts	0x020E, r24
	TCNT0 = 0;
    1a70:	e2 e5       	ldi	r30, 0x52	; 82
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	10 82       	st	Z, r1
}
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <TIMER0_on>:

void TIMER0_on()
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;
    1a86:	a3 e5       	ldi	r26, 0x53	; 83
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e3 e5       	ldi	r30, 0x53	; 83
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	88 7f       	andi	r24, 0xF8	; 248
    1a92:	8c 93       	st	X, r24
	TCCR0 |= (g_clock<<CS00);
    1a94:	a3 e5       	ldi	r26, 0x53	; 83
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e3 e5       	ldi	r30, 0x53	; 83
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	90 81       	ld	r25, Z
    1a9e:	80 91 0e 02 	lds	r24, 0x020E
    1aa2:	89 2b       	or	r24, r25
    1aa4:	8c 93       	st	X, r24
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <TIMER0_off>:

void TIMER0_off()
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0xF8;
    1ab4:	a3 e5       	ldi	r26, 0x53	; 83
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e3 e5       	ldi	r30, 0x53	; 83
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 7f       	andi	r24, 0xF8	; 248
    1ac0:	8c 93       	st	X, r24
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <TIMER0_read>:

uint8 TIMER0_read()
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1ad0:	e2 e5       	ldi	r30, 0x52	; 82
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
}
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <TIMER0_write>:

void TIMER0_write(uint8 time)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = time;
    1ae8:	e2 e5       	ldi	r30, 0x52	; 82
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	80 83       	st	Z, r24
}
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <TIMER0_interruptEnable>:

void TIMER0_interruptEnable()
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);
    1b00:	a9 e5       	ldi	r26, 0x59	; 89
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e9 e5       	ldi	r30, 0x59	; 89
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	81 60       	ori	r24, 0x01	; 1
    1b0c:	8c 93       	st	X, r24
}
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <TIMER0_setCallback>:

void TIMER0_setCallback(void(*a_ptr)(void))
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <TIMER0_setCallback+0x6>
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrOVF0 = a_ptr;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	90 93 0d 02 	sts	0x020D, r25
    1b2a:	80 93 0c 02 	sts	0x020C, r24
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <TIMER0_interruptDisable>:

void TIMER0_interruptDisable()
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE0);
    1b40:	a9 e5       	ldi	r26, 0x59	; 89
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e9 e5       	ldi	r30, 0x59	; 89
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8e 7f       	andi	r24, 0xFE	; 254
    1b4c:	8c 93       	st	X, r24
}
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <__vector_9>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    1b54:	1f 92       	push	r1
    1b56:	0f 92       	push	r0
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	0f 92       	push	r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	2f 93       	push	r18
    1b60:	3f 93       	push	r19
    1b62:	4f 93       	push	r20
    1b64:	5f 93       	push	r21
    1b66:	6f 93       	push	r22
    1b68:	7f 93       	push	r23
    1b6a:	8f 93       	push	r24
    1b6c:	9f 93       	push	r25
    1b6e:	af 93       	push	r26
    1b70:	bf 93       	push	r27
    1b72:	ef 93       	push	r30
    1b74:	ff 93       	push	r31
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOVF1 != NULL_PTR)
    1b7e:	80 91 0f 02 	lds	r24, 0x020F
    1b82:	90 91 10 02 	lds	r25, 0x0210
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOVF1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b8a:	e0 91 0f 02 	lds	r30, 0x020F
    1b8e:	f0 91 10 02 	lds	r31, 0x0210
    1b92:	09 95       	icall
	}
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	ff 91       	pop	r31
    1b9a:	ef 91       	pop	r30
    1b9c:	bf 91       	pop	r27
    1b9e:	af 91       	pop	r26
    1ba0:	9f 91       	pop	r25
    1ba2:	8f 91       	pop	r24
    1ba4:	7f 91       	pop	r23
    1ba6:	6f 91       	pop	r22
    1ba8:	5f 91       	pop	r21
    1baa:	4f 91       	pop	r20
    1bac:	3f 91       	pop	r19
    1bae:	2f 91       	pop	r18
    1bb0:	0f 90       	pop	r0
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	0f 90       	pop	r0
    1bb6:	1f 90       	pop	r1
    1bb8:	18 95       	reti

00001bba <TIMER1_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER1_init(TIMER1_CLK clk)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	0f 92       	push	r0
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = 0;
    1bc6:	ef e4       	ldi	r30, 0x4F	; 79
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	10 82       	st	Z, r1
	TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
    1bcc:	af e4       	ldi	r26, 0x4F	; 79
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	ef e4       	ldi	r30, 0x4F	; 79
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8c 60       	ori	r24, 0x0C	; 12
    1bd8:	8c 93       	st	X, r24
	g_clock = clk;
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	80 93 11 02 	sts	0x0211, r24
	TCNT1 = 0;
    1be0:	ec e4       	ldi	r30, 0x4C	; 76
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	11 82       	std	Z+1, r1	; 0x01
    1be6:	10 82       	st	Z, r1
}
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <TIMER1_on>:

void TIMER1_on()
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0xF8;
    1bf8:	ae e4       	ldi	r26, 0x4E	; 78
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	ee e4       	ldi	r30, 0x4E	; 78
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	88 7f       	andi	r24, 0xF8	; 248
    1c04:	8c 93       	st	X, r24
	TCCR1B = (g_clock << CS10);
    1c06:	ee e4       	ldi	r30, 0x4E	; 78
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 91 11 02 	lds	r24, 0x0211
    1c0e:	80 83       	st	Z, r24
}
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <TIMER1_off>:

void TIMER1_off()
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0xF8;
    1c1e:	ae e4       	ldi	r26, 0x4E	; 78
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	ee e4       	ldi	r30, 0x4E	; 78
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 7f       	andi	r24, 0xF8	; 248
    1c2a:	8c 93       	st	X, r24
}
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <TIMER1_read>:

uint16 TIMER1_read()
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1c3a:	ec e4       	ldi	r30, 0x4C	; 76
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <TIMER1_write>:

void TIMER1_write(uint16 time)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <TIMER1_write+0x6>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = time;
    1c56:	ec e4       	ldi	r30, 0x4C	; 76
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <TIMER1_interruptEnable>:

void TIMER1_interruptEnable()
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE1);
    1c74:	a9 e5       	ldi	r26, 0x59	; 89
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e9 e5       	ldi	r30, 0x59	; 89
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	84 60       	ori	r24, 0x04	; 4
    1c80:	8c 93       	st	X, r24
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <TIMER1_setCallback>:

void TIMER1_setCallback(void(*a_ptr)(void))
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <TIMER1_setCallback+0x6>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	9a 83       	std	Y+2, r25	; 0x02
    1c94:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrOVF1 = a_ptr;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	90 93 10 02 	sts	0x0210, r25
    1c9e:	80 93 0f 02 	sts	0x020F, r24
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <TIMER1_interruptDisable>:

void TIMER1_interruptDisable()
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE1);
    1cb4:	a9 e5       	ldi	r26, 0x59	; 89
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e9 e5       	ldi	r30, 0x59	; 89
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8b 7f       	andi	r24, 0xFB	; 251
    1cc0:	8c 93       	st	X, r24
}
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <__vector_5>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(TIMER2_OVF_vect)
{
    1cc8:	1f 92       	push	r1
    1cca:	0f 92       	push	r0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	0f 92       	push	r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	2f 93       	push	r18
    1cd4:	3f 93       	push	r19
    1cd6:	4f 93       	push	r20
    1cd8:	5f 93       	push	r21
    1cda:	6f 93       	push	r22
    1cdc:	7f 93       	push	r23
    1cde:	8f 93       	push	r24
    1ce0:	9f 93       	push	r25
    1ce2:	af 93       	push	r26
    1ce4:	bf 93       	push	r27
    1ce6:	ef 93       	push	r30
    1ce8:	ff 93       	push	r31
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrOVF2 != NULL_PTR)
    1cf2:	80 91 12 02 	lds	r24, 0x0212
    1cf6:	90 91 13 02 	lds	r25, 0x0213
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	29 f0       	breq	.+10     	; 0x1d08 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrOVF2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1cfe:	e0 91 12 02 	lds	r30, 0x0212
    1d02:	f0 91 13 02 	lds	r31, 0x0213
    1d06:	09 95       	icall
	}
}
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	ff 91       	pop	r31
    1d0e:	ef 91       	pop	r30
    1d10:	bf 91       	pop	r27
    1d12:	af 91       	pop	r26
    1d14:	9f 91       	pop	r25
    1d16:	8f 91       	pop	r24
    1d18:	7f 91       	pop	r23
    1d1a:	6f 91       	pop	r22
    1d1c:	5f 91       	pop	r21
    1d1e:	4f 91       	pop	r20
    1d20:	3f 91       	pop	r19
    1d22:	2f 91       	pop	r18
    1d24:	0f 90       	pop	r0
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	0f 90       	pop	r0
    1d2a:	1f 90       	pop	r1
    1d2c:	18 95       	reti

00001d2e <TIMER2_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void TIMER2_init(TIMER2_CLK clk)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 = 0;
    1d3a:	e5 e4       	ldi	r30, 0x45	; 69
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	10 82       	st	Z, r1
	TCCR2 |= (1<<FOC2);
    1d40:	a5 e4       	ldi	r26, 0x45	; 69
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e5 e4       	ldi	r30, 0x45	; 69
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	80 68       	ori	r24, 0x80	; 128
    1d4c:	8c 93       	st	X, r24
	g_clock = clk;
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	80 93 14 02 	sts	0x0214, r24
	TCNT2 = 0;
    1d54:	e4 e4       	ldi	r30, 0x44	; 68
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	10 82       	st	Z, r1
}
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <TIMER2_on>:

void TIMER2_on()
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0xF8;
    1d6a:	a5 e4       	ldi	r26, 0x45	; 69
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e5 e4       	ldi	r30, 0x45	; 69
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	88 7f       	andi	r24, 0xF8	; 248
    1d76:	8c 93       	st	X, r24
	TCCR2 |= (g_clock<<CS20);
    1d78:	a5 e4       	ldi	r26, 0x45	; 69
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e5 e4       	ldi	r30, 0x45	; 69
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	90 81       	ld	r25, Z
    1d82:	80 91 14 02 	lds	r24, 0x0214
    1d86:	89 2b       	or	r24, r25
    1d88:	8c 93       	st	X, r24
}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <TIMER2_off>:

void TIMER2_off()
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0xF8;
    1d98:	a5 e4       	ldi	r26, 0x45	; 69
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e5 e4       	ldi	r30, 0x45	; 69
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	88 7f       	andi	r24, 0xF8	; 248
    1da4:	8c 93       	st	X, r24
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <TIMER2_read>:

uint8 TIMER2_read()
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    1db4:	e4 e4       	ldi	r30, 0x44	; 68
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
}
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <TIMER2_write>:

void TIMER2_write(uint8 time)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	0f 92       	push	r0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = time;
    1dcc:	e4 e4       	ldi	r30, 0x44	; 68
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	80 83       	st	Z, r24
}
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <TIMER2_interruptEnable>:

void TIMER2_interruptEnable()
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE2);
    1de4:	a9 e5       	ldi	r26, 0x59	; 89
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e9 e5       	ldi	r30, 0x59	; 89
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	80 64       	ori	r24, 0x40	; 64
    1df0:	8c 93       	st	X, r24
}
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <TIMER2_setCallback>:

void TIMER2_setCallback(void(*a_ptr)(void))
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <TIMER2_setCallback+0x6>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrOVF2 = a_ptr;
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0a:	90 93 13 02 	sts	0x0213, r25
    1e0e:	80 93 12 02 	sts	0x0212, r24
}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <TIMER2_interruptDisable>:

void TIMER2_interruptDisable()
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1<<TOIE2);
    1e24:	a9 e5       	ldi	r26, 0x59	; 89
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e9 e5       	ldi	r30, 0x59	; 89
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8f 7b       	andi	r24, 0xBF	; 191
    1e30:	8c 93       	st	X, r24
}
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <__vector_14>:

/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/
ISR(USART_UDRE_vect)
{
    1e38:	1f 92       	push	r1
    1e3a:	0f 92       	push	r0
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	0f 92       	push	r0
    1e40:	11 24       	eor	r1, r1
    1e42:	2f 93       	push	r18
    1e44:	3f 93       	push	r19
    1e46:	4f 93       	push	r20
    1e48:	5f 93       	push	r21
    1e4a:	6f 93       	push	r22
    1e4c:	7f 93       	push	r23
    1e4e:	8f 93       	push	r24
    1e50:	9f 93       	push	r25
    1e52:	af 93       	push	r26
    1e54:	bf 93       	push	r27
    1e56:	ef 93       	push	r30
    1e58:	ff 93       	push	r31
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrUDR != NULL_PTR)
    1e62:	80 91 15 02 	lds	r24, 0x0215
    1e66:	90 91 16 02 	lds	r25, 0x0216
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	29 f0       	breq	.+10     	; 0x1e78 <__vector_14+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrUDR)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1e6e:	e0 91 15 02 	lds	r30, 0x0215
    1e72:	f0 91 16 02 	lds	r31, 0x0216
    1e76:	09 95       	icall
		}
}
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	ff 91       	pop	r31
    1e7e:	ef 91       	pop	r30
    1e80:	bf 91       	pop	r27
    1e82:	af 91       	pop	r26
    1e84:	9f 91       	pop	r25
    1e86:	8f 91       	pop	r24
    1e88:	7f 91       	pop	r23
    1e8a:	6f 91       	pop	r22
    1e8c:	5f 91       	pop	r21
    1e8e:	4f 91       	pop	r20
    1e90:	3f 91       	pop	r19
    1e92:	2f 91       	pop	r18
    1e94:	0f 90       	pop	r0
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	0f 90       	pop	r0
    1e9a:	1f 90       	pop	r1
    1e9c:	18 95       	reti

00001e9e <__vector_15>:

ISR(USART_TXC_vect)
{
    1e9e:	1f 92       	push	r1
    1ea0:	0f 92       	push	r0
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	0f 92       	push	r0
    1ea6:	11 24       	eor	r1, r1
    1ea8:	2f 93       	push	r18
    1eaa:	3f 93       	push	r19
    1eac:	4f 93       	push	r20
    1eae:	5f 93       	push	r21
    1eb0:	6f 93       	push	r22
    1eb2:	7f 93       	push	r23
    1eb4:	8f 93       	push	r24
    1eb6:	9f 93       	push	r25
    1eb8:	af 93       	push	r26
    1eba:	bf 93       	push	r27
    1ebc:	ef 93       	push	r30
    1ebe:	ff 93       	push	r31
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTX != NULL_PTR)
    1ec8:	80 91 17 02 	lds	r24, 0x0217
    1ecc:	90 91 18 02 	lds	r25, 0x0218
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	29 f0       	breq	.+10     	; 0x1ede <__vector_15+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrTX)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ed4:	e0 91 17 02 	lds	r30, 0x0217
    1ed8:	f0 91 18 02 	lds	r31, 0x0218
    1edc:	09 95       	icall
		}
}
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	ff 91       	pop	r31
    1ee4:	ef 91       	pop	r30
    1ee6:	bf 91       	pop	r27
    1ee8:	af 91       	pop	r26
    1eea:	9f 91       	pop	r25
    1eec:	8f 91       	pop	r24
    1eee:	7f 91       	pop	r23
    1ef0:	6f 91       	pop	r22
    1ef2:	5f 91       	pop	r21
    1ef4:	4f 91       	pop	r20
    1ef6:	3f 91       	pop	r19
    1ef8:	2f 91       	pop	r18
    1efa:	0f 90       	pop	r0
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	0f 90       	pop	r0
    1f00:	1f 90       	pop	r1
    1f02:	18 95       	reti

00001f04 <__vector_13>:

ISR(USART_RXC_vect)
{
    1f04:	1f 92       	push	r1
    1f06:	0f 92       	push	r0
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	0f 92       	push	r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	2f 93       	push	r18
    1f10:	3f 93       	push	r19
    1f12:	4f 93       	push	r20
    1f14:	5f 93       	push	r21
    1f16:	6f 93       	push	r22
    1f18:	7f 93       	push	r23
    1f1a:	8f 93       	push	r24
    1f1c:	9f 93       	push	r25
    1f1e:	af 93       	push	r26
    1f20:	bf 93       	push	r27
    1f22:	ef 93       	push	r30
    1f24:	ff 93       	push	r31
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrRX != NULL_PTR)
    1f2e:	80 91 19 02 	lds	r24, 0x0219
    1f32:	90 91 1a 02 	lds	r25, 0x021A
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	29 f0       	breq	.+10     	; 0x1f44 <__vector_13+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtrRX)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f3a:	e0 91 19 02 	lds	r30, 0x0219
    1f3e:	f0 91 1a 02 	lds	r31, 0x021A
    1f42:	09 95       	icall
		}
}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	ff 91       	pop	r31
    1f4a:	ef 91       	pop	r30
    1f4c:	bf 91       	pop	r27
    1f4e:	af 91       	pop	r26
    1f50:	9f 91       	pop	r25
    1f52:	8f 91       	pop	r24
    1f54:	7f 91       	pop	r23
    1f56:	6f 91       	pop	r22
    1f58:	5f 91       	pop	r21
    1f5a:	4f 91       	pop	r20
    1f5c:	3f 91       	pop	r19
    1f5e:	2f 91       	pop	r18
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	0f 90       	pop	r0
    1f66:	1f 90       	pop	r1
    1f68:	18 95       	reti

00001f6a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config_Ptr)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <UART_init+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <UART_init+0x8>
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1f7a:	1a 82       	std	Y+2, r1	; 0x02
    1f7c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1f7e:	eb e2       	ldi	r30, 0x2B	; 43
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used as we are not using 9-bit mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1f86:	ea e2       	ldi	r30, 0x2A	; 42
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	88 e1       	ldi	r24, 0x18	; 24
    1f8c:	80 83       	st	Z, r24
	 * UPM1:0  = configure parity as desired
	 * USBS    = configure stop bits as desired
	 * UCSZ1:0 = configure bit data as desired
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) ;
    1f8e:	e0 e4       	ldi	r30, 0x40	; 64
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 e8       	ldi	r24, 0x80	; 128
    1f94:	80 83       	st	Z, r24
	UCSRC = (UCSRC&0xCF)|((config_Ptr->parity)<<UPM0);
    1f96:	a0 e4       	ldi	r26, 0x40	; 64
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e0 e4       	ldi	r30, 0x40	; 64
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	2f 7c       	andi	r18, 0xCF	; 207
    1fa4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fa6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fa8:	81 81       	ldd	r24, Z+1	; 0x01
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	82 95       	swap	r24
    1fb0:	92 95       	swap	r25
    1fb2:	90 7f       	andi	r25, 0xF0	; 240
    1fb4:	98 27       	eor	r25, r24
    1fb6:	80 7f       	andi	r24, 0xF0	; 240
    1fb8:	98 27       	eor	r25, r24
    1fba:	82 2b       	or	r24, r18
    1fbc:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF7)|((config_Ptr->stop_bit)<<USBS);
    1fbe:	a0 e4       	ldi	r26, 0x40	; 64
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e0 e4       	ldi	r30, 0x40	; 64
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	28 2f       	mov	r18, r24
    1fca:	27 7f       	andi	r18, 0xF7	; 247
    1fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fce:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	82 2b       	or	r24, r18
    1fe4:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF9)|((config_Ptr->bit_data)<<UCSZ0);
    1fe6:	a0 e4       	ldi	r26, 0x40	; 64
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e0 e4       	ldi	r30, 0x40	; 64
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	29 7f       	andi	r18, 0xF9	; 249
    1ff4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	82 2b       	or	r24, r18
    2004:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config_Ptr->baud_rate * 8UL))) - 1);
    2006:	eb 81       	ldd	r30, Y+3	; 0x03
    2008:	fc 81       	ldd	r31, Y+4	; 0x04
    200a:	83 81       	ldd	r24, Z+3	; 0x03
    200c:	94 81       	ldd	r25, Z+4	; 0x04
    200e:	a5 81       	ldd	r26, Z+5	; 0x05
    2010:	b6 81       	ldd	r27, Z+6	; 0x06
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	aa 1f       	adc	r26, r26
    2018:	bb 1f       	adc	r27, r27
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	aa 1f       	adc	r26, r26
    2020:	bb 1f       	adc	r27, r27
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	aa 1f       	adc	r26, r26
    2028:	bb 1f       	adc	r27, r27
    202a:	9c 01       	movw	r18, r24
    202c:	ad 01       	movw	r20, r26
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	94 e2       	ldi	r25, 0x24	; 36
    2032:	a4 ef       	ldi	r26, 0xF4	; 244
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__udivmodsi4>
    203e:	da 01       	movw	r26, r20
    2040:	c9 01       	movw	r24, r18
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9a 83       	std	Y+2, r25	; 0x02
    2046:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2048:	e0 e4       	ldi	r30, 0x40	; 64
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	89 2f       	mov	r24, r25
    2052:	99 27       	eor	r25, r25
    2054:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2056:	e9 e2       	ldi	r30, 0x29	; 41
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	80 83       	st	Z, r24
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	0f 92       	push	r0
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    2078:	eb e2       	ldi	r30, 0x2B	; 43
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	80 72       	andi	r24, 0x20	; 32
    2084:	90 70       	andi	r25, 0x00	; 0
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	b9 f3       	breq	.-18     	; 0x2078 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    208a:	ec e2       	ldi	r30, 0x2C	; 44
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)); // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    20a2:	eb e2       	ldi	r30, 0x2B	; 43
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	88 23       	and	r24, r24
    20aa:	dc f7       	brge	.-10     	; 0x20a2 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    20ac:	ec e2       	ldi	r30, 0x2C	; 44
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
}
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <UART_sendString+0x6>
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	9b 83       	std	Y+3, r25	; 0x03
    20c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20c8:	19 82       	std	Y+1, r1	; 0x01
    20ca:	0e c0       	rjmp	.+28     	; 0x20e8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	9b 81       	ldd	r25, Y+3	; 0x03
    20d6:	fc 01       	movw	r30, r24
    20d8:	e2 0f       	add	r30, r18
    20da:	f3 1f       	adc	r31, r19
    20dc:	80 81       	ld	r24, Z
    20de:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
		i++;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	fc 01       	movw	r30, r24
    20f4:	e2 0f       	add	r30, r18
    20f6:	f3 1f       	adc	r31, r19
    20f8:	80 81       	ld	r24, Z
    20fa:	88 23       	and	r24, r24
    20fc:	39 f7       	brne	.-50     	; 0x20cc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <UART_receiveString+0xa>
    2114:	0f 92       	push	r0
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9b 83       	std	Y+3, r25	; 0x03
    211c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    211e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	8c 01       	movw	r16, r24
    212c:	02 0f       	add	r16, r18
    212e:	13 1f       	adc	r17, r19
    2130:	0e 94 4d 10 	call	0x209a	; 0x209a <UART_receiveByte>
    2134:	f8 01       	movw	r30, r16
    2136:	80 83       	st	Z, r24
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	8f 5f       	subi	r24, 0xFF	; 255
    213e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	9b 81       	ldd	r25, Y+3	; 0x03
    214a:	8c 01       	movw	r16, r24
    214c:	02 0f       	add	r16, r18
    214e:	13 1f       	adc	r17, r19
    2150:	0e 94 4d 10 	call	0x209a	; 0x209a <UART_receiveByte>
    2154:	f8 01       	movw	r30, r16
    2156:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	fc 01       	movw	r30, r24
    2164:	e2 0f       	add	r30, r18
    2166:	f3 1f       	adc	r31, r19
    2168:	80 81       	ld	r24, Z
    216a:	83 32       	cpi	r24, 0x23	; 35
    216c:	31 f7       	brne	.-52     	; 0x213a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	fc 01       	movw	r30, r24
    217a:	e2 0f       	add	r30, r18
    217c:	f3 1f       	adc	r31, r19
    217e:	10 82       	st	Z, r1
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <UART_sendData>:

void UART_sendData(const uint8 *pData, uint32 uSize)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	2a 97       	sbiw	r28, 0x0a	; 10
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
    21a8:	4f 83       	std	Y+7, r20	; 0x07
    21aa:	58 87       	std	Y+8, r21	; 0x08
    21ac:	69 87       	std	Y+9, r22	; 0x09
    21ae:	7a 87       	std	Y+10, r23	; 0x0a
    uint32 uCounter;
    for(uCounter = 0; uCounter < uSize; uCounter++)
    21b0:	19 82       	std	Y+1, r1	; 0x01
    21b2:	1a 82       	std	Y+2, r1	; 0x02
    21b4:	1b 82       	std	Y+3, r1	; 0x03
    21b6:	1c 82       	std	Y+4, r1	; 0x04
    21b8:	15 c0       	rjmp	.+42     	; 0x21e4 <UART_sendData+0x54>
    {
        UART_sendByte(pData[uCounter]);
    21ba:	29 81       	ldd	r18, Y+1	; 0x01
    21bc:	3a 81       	ldd	r19, Y+2	; 0x02
    21be:	8d 81       	ldd	r24, Y+5	; 0x05
    21c0:	9e 81       	ldd	r25, Y+6	; 0x06
    21c2:	fc 01       	movw	r30, r24
    21c4:	e2 0f       	add	r30, r18
    21c6:	f3 1f       	adc	r31, r19
    21c8:	80 81       	ld	r24, Z
    21ca:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
}

void UART_sendData(const uint8 *pData, uint32 uSize)
{
    uint32 uCounter;
    for(uCounter = 0; uCounter < uSize; uCounter++)
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	ab 81       	ldd	r26, Y+3	; 0x03
    21d4:	bc 81       	ldd	r27, Y+4	; 0x04
    21d6:	01 96       	adiw	r24, 0x01	; 1
    21d8:	a1 1d       	adc	r26, r1
    21da:	b1 1d       	adc	r27, r1
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	ab 83       	std	Y+3, r26	; 0x03
    21e2:	bc 83       	std	Y+4, r27	; 0x04
    21e4:	29 81       	ldd	r18, Y+1	; 0x01
    21e6:	3a 81       	ldd	r19, Y+2	; 0x02
    21e8:	4b 81       	ldd	r20, Y+3	; 0x03
    21ea:	5c 81       	ldd	r21, Y+4	; 0x04
    21ec:	8f 81       	ldd	r24, Y+7	; 0x07
    21ee:	98 85       	ldd	r25, Y+8	; 0x08
    21f0:	a9 85       	ldd	r26, Y+9	; 0x09
    21f2:	ba 85       	ldd	r27, Y+10	; 0x0a
    21f4:	28 17       	cp	r18, r24
    21f6:	39 07       	cpc	r19, r25
    21f8:	4a 07       	cpc	r20, r26
    21fa:	5b 07       	cpc	r21, r27
    21fc:	f0 f2       	brcs	.-68     	; 0x21ba <UART_sendData+0x2a>
    {
        UART_sendByte(pData[uCounter]);
    }
}
    21fe:	2a 96       	adiw	r28, 0x0a	; 10
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <UART_receiveData>:

void UART_receiveData(uint8 *pData, uint32 uSize)
{
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	2a 97       	sbiw	r28, 0x0a	; 10
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	4f 83       	std	Y+7, r20	; 0x07
    222e:	58 87       	std	Y+8, r21	; 0x08
    2230:	69 87       	std	Y+9, r22	; 0x09
    2232:	7a 87       	std	Y+10, r23	; 0x0a
    uint32 uCounter;
    for(uCounter = 0; uCounter < uSize; uCounter++)
    2234:	19 82       	std	Y+1, r1	; 0x01
    2236:	1a 82       	std	Y+2, r1	; 0x02
    2238:	1b 82       	std	Y+3, r1	; 0x03
    223a:	1c 82       	std	Y+4, r1	; 0x04
    223c:	16 c0       	rjmp	.+44     	; 0x226a <UART_receiveData+0x5a>
    {
        pData[uCounter] = UART_receiveByte();
    223e:	29 81       	ldd	r18, Y+1	; 0x01
    2240:	3a 81       	ldd	r19, Y+2	; 0x02
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	8c 01       	movw	r16, r24
    2248:	02 0f       	add	r16, r18
    224a:	13 1f       	adc	r17, r19
    224c:	0e 94 4d 10 	call	0x209a	; 0x209a <UART_receiveByte>
    2250:	f8 01       	movw	r30, r16
    2252:	80 83       	st	Z, r24
}

void UART_receiveData(uint8 *pData, uint32 uSize)
{
    uint32 uCounter;
    for(uCounter = 0; uCounter < uSize; uCounter++)
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	ab 81       	ldd	r26, Y+3	; 0x03
    225a:	bc 81       	ldd	r27, Y+4	; 0x04
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	a1 1d       	adc	r26, r1
    2260:	b1 1d       	adc	r27, r1
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	ab 83       	std	Y+3, r26	; 0x03
    2268:	bc 83       	std	Y+4, r27	; 0x04
    226a:	29 81       	ldd	r18, Y+1	; 0x01
    226c:	3a 81       	ldd	r19, Y+2	; 0x02
    226e:	4b 81       	ldd	r20, Y+3	; 0x03
    2270:	5c 81       	ldd	r21, Y+4	; 0x04
    2272:	8f 81       	ldd	r24, Y+7	; 0x07
    2274:	98 85       	ldd	r25, Y+8	; 0x08
    2276:	a9 85       	ldd	r26, Y+9	; 0x09
    2278:	ba 85       	ldd	r27, Y+10	; 0x0a
    227a:	28 17       	cp	r18, r24
    227c:	39 07       	cpc	r19, r25
    227e:	4a 07       	cpc	r20, r26
    2280:	5b 07       	cpc	r21, r27
    2282:	e8 f2       	brcs	.-70     	; 0x223e <UART_receiveData+0x2e>
    {
        pData[uCounter] = UART_receiveByte();
    }
}
    2284:	2a 96       	adiw	r28, 0x0a	; 10
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	08 95       	ret

0000229a <UART_interruptEnable>:

void UART_interruptEnable(IntEn intType)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	0f 92       	push	r0
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	89 83       	std	Y+1, r24	; 0x01
	UCSRB &= 0x1F;
    22a6:	aa e2       	ldi	r26, 0x2A	; 42
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	ea e2       	ldi	r30, 0x2A	; 42
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8f 71       	andi	r24, 0x1F	; 31
    22b2:	8c 93       	st	X, r24
	UCSRB |= (intType << UDRIE);
    22b4:	aa e2       	ldi	r26, 0x2A	; 42
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	ea e2       	ldi	r30, 0x2A	; 42
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	28 2f       	mov	r18, r24
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	82 95       	swap	r24
    22cc:	92 95       	swap	r25
    22ce:	90 7f       	andi	r25, 0xF0	; 240
    22d0:	98 27       	eor	r25, r24
    22d2:	80 7f       	andi	r24, 0xF0	; 240
    22d4:	98 27       	eor	r25, r24
    22d6:	82 2b       	or	r24, r18
    22d8:	8c 93       	st	X, r24
}
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <UART_setCallBackUDR>:

void UART_setCallBackUDR(void(*a_ptr)(void))
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <UART_setCallBackUDR+0x6>
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrUDR = a_ptr;
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	90 93 16 02 	sts	0x0216, r25
    22f8:	80 93 15 02 	sts	0x0215, r24
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <UART_setCallBackTX>:

void UART_setCallBackTX(void(*a_ptr)(void))
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <UART_setCallBackTX+0x6>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTX = a_ptr;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	9a 81       	ldd	r25, Y+2	; 0x02
    2318:	90 93 18 02 	sts	0x0218, r25
    231c:	80 93 17 02 	sts	0x0217, r24
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <UART_setCallBackRX>:

void UART_setCallBackRX(void(*a_ptr)(void))
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <UART_setCallBackRX+0x6>
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrRX = a_ptr;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	90 93 1a 02 	sts	0x021A, r25
    2340:	80 93 19 02 	sts	0x0219, r24
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <FLAME_init>:

#include "flame_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void FLAME_init()
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(FLAME_PORTID, FLAME_PINID, PIN_INPUT);
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	62 e0       	ldi	r22, 0x02	; 2
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
}
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <FLAME_read>:
uint8 FLAME_read()
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(FLAME_PORTID, FLAME_PINID);
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	62 e0       	ldi	r22, 0x02	; 2
    2372:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_readPin>
}
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <MQ9_init>:

#include "mq9_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void MQ9_init()
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MQ9_PORTID, MQ9_PINID, PIN_INPUT);
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	63 e0       	ldi	r22, 0x03	; 3
    2388:	40 e0       	ldi	r20, 0x00	; 0
    238a:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
}
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <MQ9_read>:
uint8 MQ9_read()
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(MQ9_PORTID, MQ9_PINID);
    239c:	83 e0       	ldi	r24, 0x03	; 3
    239e:	63 e0       	ldi	r22, 0x03	; 3
    23a0:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_readPin>
}
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <PIR_init>:

#include "pir_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void PIR_init()
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORTID, PIR_PINID, PIN_INPUT);
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	63 e0       	ldi	r22, 0x03	; 3
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
}
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <PIR_read>:
uint8 PIR_read()
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORTID, PIR_PINID);
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	63 e0       	ldi	r22, 0x03	; 3
    23ce:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_readPin>
}
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <WATER_init>:

#include "water_sensor.h"
#include "../../mcal/atmega32_gpio.h"

void WATER_init()
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(WATER_PORTID, WATER_PINID, PIN_INPUT);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
}
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <WATER_read>:
uint8 WATER_read()
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(WATER_PORTID, WATER_PINID);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	62 e0       	ldi	r22, 0x02	; 2
    23fc:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_readPin>
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <BUZZER_init>:
#include "buzzer.h"

#include "../../mcal/atmega32_gpio.h"

void BUZZER_init(Buzzer* buzzer)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <BUZZER_init+0x6>
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	9a 83       	std	Y+2, r25	; 0x02
    2412:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(buzzer->portID, buzzer->pinID, PIN_OUTPUT);
    2414:	e9 81       	ldd	r30, Y+1	; 0x01
    2416:	fa 81       	ldd	r31, Y+2	; 0x02
    2418:	80 81       	ld	r24, Z
    241a:	e9 81       	ldd	r30, Y+1	; 0x01
    241c:	fa 81       	ldd	r31, Y+2	; 0x02
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	69 2f       	mov	r22, r25
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <BUZZER_on>:
void BUZZER_on(Buzzer* buzzer)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	00 d0       	rcall	.+0      	; 0x2438 <BUZZER_on+0x6>
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(buzzer->portID, buzzer->pinID, LOGIC_HIGH);
    2440:	e9 81       	ldd	r30, Y+1	; 0x01
    2442:	fa 81       	ldd	r31, Y+2	; 0x02
    2444:	80 81       	ld	r24, Z
    2446:	e9 81       	ldd	r30, Y+1	; 0x01
    2448:	fa 81       	ldd	r31, Y+2	; 0x02
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	69 2f       	mov	r22, r25
    244e:	41 e0       	ldi	r20, 0x01	; 1
    2450:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <BUZZER_off>:
void BUZZER_off(Buzzer* buzzer)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	00 d0       	rcall	.+0      	; 0x2464 <BUZZER_off+0x6>
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(buzzer->portID, buzzer->pinID, LOGIC_LOW);
    246c:	e9 81       	ldd	r30, Y+1	; 0x01
    246e:	fa 81       	ldd	r31, Y+2	; 0x02
    2470:	80 81       	ld	r24, Z
    2472:	e9 81       	ldd	r30, Y+1	; 0x01
    2474:	fa 81       	ldd	r31, Y+2	; 0x02
    2476:	91 81       	ldd	r25, Z+1	; 0x01
    2478:	69 2f       	mov	r22, r25
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <DCMOTOR_init>:
#include "dc_motor.h"

#include "../../mcal/atmega32_gpio.h"

void DCMOTOR_init(DCMotor* motor)
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	00 d0       	rcall	.+0      	; 0x2490 <DCMOTOR_init+0x6>
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(motor->portID, motor->pinID, PIN_OUTPUT);
    2498:	e9 81       	ldd	r30, Y+1	; 0x01
    249a:	fa 81       	ldd	r31, Y+2	; 0x02
    249c:	80 81       	ld	r24, Z
    249e:	e9 81       	ldd	r30, Y+1	; 0x01
    24a0:	fa 81       	ldd	r31, Y+2	; 0x02
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	69 2f       	mov	r22, r25
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <DCMOTOR_on>:
void DCMOTOR_on(DCMotor* motor)
{
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <DCMOTOR_on+0x6>
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	9a 83       	std	Y+2, r25	; 0x02
    24c2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(motor->portID, motor->pinID, LOGIC_HIGH);
    24c4:	e9 81       	ldd	r30, Y+1	; 0x01
    24c6:	fa 81       	ldd	r31, Y+2	; 0x02
    24c8:	80 81       	ld	r24, Z
    24ca:	e9 81       	ldd	r30, Y+1	; 0x01
    24cc:	fa 81       	ldd	r31, Y+2	; 0x02
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	69 2f       	mov	r22, r25
    24d2:	41 e0       	ldi	r20, 0x01	; 1
    24d4:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <DCMOTOR_off>:
void DCMOTOR_off(DCMotor* motor)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <DCMOTOR_off+0x6>
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	9a 83       	std	Y+2, r25	; 0x02
    24ee:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(motor->portID, motor->pinID, LOGIC_LOW);
    24f0:	e9 81       	ldd	r30, Y+1	; 0x01
    24f2:	fa 81       	ldd	r31, Y+2	; 0x02
    24f4:	80 81       	ld	r24, Z
    24f6:	e9 81       	ldd	r30, Y+1	; 0x01
    24f8:	fa 81       	ldd	r31, Y+2	; 0x02
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	69 2f       	mov	r22, r25
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <KEYPAD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KEYPAD_init(void)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    252a:	82 e0       	ldi	r24, 0x02	; 2
    252c:	62 e0       	ldi	r22, 0x02	; 2
    252e:	41 e0       	ldi	r20, 0x01	; 1
    2530:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	63 e0       	ldi	r22, 0x03	; 3
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    253e:	82 e0       	ldi	r24, 0x02	; 2
    2540:	64 e0       	ldi	r22, 0x04	; 4
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	65 e0       	ldi	r22, 0x05	; 5
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	66 e0       	ldi	r22, 0x06	; 6
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
}
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <KEYPAD_getPressedKey>:

uint8 KEYPAD_getPressedKey(void)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	61 97       	sbiw	r28, 0x11	; 17
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2576:	1f 86       	std	Y+15, r1	; 0x0f
    2578:	a0 c0       	rjmp	.+320    	; 0x26ba <KEYPAD_getPressedKey+0x158>
	{
		/* Set/Clear the row output pin */
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	6f 85       	ldd	r22, Y+15	; 0x0f
    257e:	41 e0       	ldi	r20, 0x01	; 1
    2580:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
		for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2584:	18 8a       	std	Y+16, r1	; 0x10
    2586:	1c c0       	rjmp	.+56     	; 0x25c0 <KEYPAD_getPressedKey+0x5e>
		{
			/* Check if the switch is pressed in this column */
			if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2588:	88 89       	ldd	r24, Y+16	; 0x10
    258a:	98 2f       	mov	r25, r24
    258c:	9c 5f       	subi	r25, 0xFC	; 252
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	69 2f       	mov	r22, r25
    2592:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_readPin>
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	81 f4       	brne	.+32     	; 0x25ba <KEYPAD_getPressedKey+0x58>
			{
#if (KEYPAD_NUM_COLS == 3)
#ifdef STANDARD_KEYPAD
				return ((row*KEYPAD_NUM_COLS)+col+1);
#else
				return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    259a:	8f 85       	ldd	r24, Y+15	; 0x0f
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	c9 01       	movw	r24, r18
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	82 0f       	add	r24, r18
    25a8:	93 1f       	adc	r25, r19
    25aa:	98 2f       	mov	r25, r24
    25ac:	88 89       	ldd	r24, Y+16	; 0x10
    25ae:	89 0f       	add	r24, r25
    25b0:	8f 5f       	subi	r24, 0xFF	; 255
    25b2:	0e 94 6d 13 	call	0x26da	; 0x26da <KEYPAD_4x3_adjustKeyNumber>
    25b6:	89 8b       	std	Y+17, r24	; 0x11
    25b8:	86 c0       	rjmp	.+268    	; 0x26c6 <KEYPAD_getPressedKey+0x164>
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
	{
		/* Set/Clear the row output pin */
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
		for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    25ba:	88 89       	ldd	r24, Y+16	; 0x10
    25bc:	8f 5f       	subi	r24, 0xFF	; 255
    25be:	88 8b       	std	Y+16, r24	; 0x10
    25c0:	88 89       	ldd	r24, Y+16	; 0x10
    25c2:	83 30       	cpi	r24, 0x03	; 3
    25c4:	08 f3       	brcs	.-62     	; 0x2588 <KEYPAD_getPressedKey+0x26>
#endif
			}
		}
		//		_delay_ms(5000);
		//		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    25c6:	82 e0       	ldi	r24, 0x02	; 2
    25c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e2       	ldi	r26, 0x20	; 32
    25d6:	b1 e4       	ldi	r27, 0x41	; 65
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	55 e4       	ldi	r21, 0x45	; 69
    25f0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <KEYPAD_getPressedKey+0xc0>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <KEYPAD_getPressedKey+0x13e>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <KEYPAD_getPressedKey+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <KEYPAD_getPressedKey+0x120>
    2664:	80 e9       	ldi	r24, 0x90	; 144
    2666:	91 e0       	ldi	r25, 0x01	; 1
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <KEYPAD_getPressedKey+0x10e>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <KEYPAD_getPressedKey+0x102>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <KEYPAD_getPressedKey+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <KEYPAD_getPressedKey+0x14a>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
}

uint8 KEYPAD_getPressedKey(void)
{
	uint8 col,row;
	for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    26b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	8f 87       	std	Y+15, r24	; 0x0f
    26ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    26bc:	84 30       	cpi	r24, 0x04	; 4
    26be:	08 f4       	brcc	.+2      	; 0x26c2 <KEYPAD_getPressedKey+0x160>
    26c0:	5c cf       	rjmp	.-328    	; 0x257a <KEYPAD_getPressedKey+0x18>
		//		_delay_ms(5000);
		//		GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
	}
	return KEYPAD_NO_PRESS;
    26c2:	80 e2       	ldi	r24, 0x20	; 32
    26c4:	89 8b       	std	Y+17, r24	; 0x11
    26c6:	89 89       	ldd	r24, Y+17	; 0x11
}
    26c8:	61 96       	adiw	r28, 0x11	; 17
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <KEYPAD_4x3_adjustKeyNumber+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <KEYPAD_4x3_adjustKeyNumber+0x8>
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    26e8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	3c 83       	std	Y+4, r19	; 0x04
    26f2:	2b 83       	std	Y+3, r18	; 0x03
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	8a 30       	cpi	r24, 0x0A	; 10
    26fa:	91 05       	cpc	r25, r1
    26fc:	81 f0       	breq	.+32     	; 0x271e <KEYPAD_4x3_adjustKeyNumber+0x44>
    26fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2700:	3c 81       	ldd	r19, Y+4	; 0x04
    2702:	2a 30       	cpi	r18, 0x0A	; 10
    2704:	31 05       	cpc	r19, r1
    2706:	9c f0       	brlt	.+38     	; 0x272e <KEYPAD_4x3_adjustKeyNumber+0x54>
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	8b 30       	cpi	r24, 0x0B	; 11
    270e:	91 05       	cpc	r25, r1
    2710:	49 f0       	breq	.+18     	; 0x2724 <KEYPAD_4x3_adjustKeyNumber+0x4a>
    2712:	2b 81       	ldd	r18, Y+3	; 0x03
    2714:	3c 81       	ldd	r19, Y+4	; 0x04
    2716:	2c 30       	cpi	r18, 0x0C	; 12
    2718:	31 05       	cpc	r19, r1
    271a:	31 f0       	breq	.+12     	; 0x2728 <KEYPAD_4x3_adjustKeyNumber+0x4e>
    271c:	08 c0       	rjmp	.+16     	; 0x272e <KEYPAD_4x3_adjustKeyNumber+0x54>
	{
	case 10: keypad_button = '*'; // ASCII Code of *
    271e:	8a e2       	ldi	r24, 0x2A	; 42
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	07 c0       	rjmp	.+14     	; 0x2732 <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	case 11: keypad_button = 0;
    2724:	19 82       	std	Y+1, r1	; 0x01
    2726:	05 c0       	rjmp	.+10     	; 0x2732 <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	case 12: keypad_button = '#'; // ASCII Code of #
    2728:	83 e2       	ldi	r24, 0x23	; 35
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <KEYPAD_4x3_adjustKeyNumber+0x58>
	break;
	default: keypad_button = button_number;
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    2732:	89 81       	ldd	r24, Y+1	; 0x01
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	2e 97       	sbiw	r28, 0x0e	; 14
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	de bf       	out	0x3e, r29	; 62
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 ea       	ldi	r26, 0xA0	; 160
    2770:	b1 e4       	ldi	r27, 0x41	; 65
    2772:	8b 87       	std	Y+11, r24	; 0x0b
    2774:	9c 87       	std	Y+12, r25	; 0x0c
    2776:	ad 87       	std	Y+13, r26	; 0x0d
    2778:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	6b 85       	ldd	r22, Y+11	; 0x0b
    277c:	7c 85       	ldd	r23, Y+12	; 0x0c
    277e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2780:	9e 85       	ldd	r25, Y+14	; 0x0e
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	55 e4       	ldi	r21, 0x45	; 69
    278a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8f 83       	std	Y+7, r24	; 0x07
    2794:	98 87       	std	Y+8, r25	; 0x08
    2796:	a9 87       	std	Y+9, r26	; 0x09
    2798:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <LCD_init+0x7a>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
    27ba:	3f c0       	rjmp	.+126    	; 0x283a <LCD_init+0xf8>
	else if (__tmp > 65535)
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	4c f5       	brge	.+82     	; 0x2826 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27da:	9e 85       	ldd	r25, Y+14	; 0x0e
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9e 83       	std	Y+6, r25	; 0x06
    27fa:	8d 83       	std	Y+5, r24	; 0x05
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <LCD_init+0xda>
    27fe:	80 e9       	ldi	r24, 0x90	; 144
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_init+0xc8>
    280e:	9c 83       	std	Y+4, r25	; 0x04
    2810:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <LCD_init+0xbc>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	6f 81       	ldd	r22, Y+7	; 0x07
    2828:	78 85       	ldd	r23, Y+8	; 0x08
    282a:	89 85       	ldd	r24, Y+9	; 0x09
    282c:	9a 85       	ldd	r25, Y+10	; 0x0a
    282e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	8d 83       	std	Y+5, r24	; 0x05
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	9a 83       	std	Y+2, r25	; 0x02
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_init+0x104>
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	62 e0       	ldi	r22, 0x02	; 2
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	63 e0       	ldi	r22, 0x03	; 3
    285c:	41 e0       	ldi	r20, 0x01	; 1
    285e:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	64 e0       	ldi	r22, 0x04	; 4
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	65 e0       	ldi	r22, 0x05	; 5
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2876:	83 e3       	ldi	r24, 0x33	; 51
    2878:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    287c:	82 e3       	ldi	r24, 0x32	; 50
    287e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2882:	88 e2       	ldi	r24, 0x28	; 40
    2884:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2888:	8c e0       	ldi	r24, 0x0C	; 12
    288a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_sendCommand>
}
    2894:	2e 96       	adiw	r28, 0x0e	; 14
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	de bf       	out	0x3e, r29	; 62
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	cd bf       	out	0x3d, r28	; 61
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	c3 56       	subi	r28, 0x63	; 99
    28b4:	d0 40       	sbci	r29, 0x00	; 0
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	fe 01       	movw	r30, r28
    28c2:	ed 59       	subi	r30, 0x9D	; 157
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    28d2:	fe 01       	movw	r30, r28
    28d4:	e1 5a       	subi	r30, 0xA1	; 161
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e8       	ldi	r26, 0x80	; 128
    28de:	bf e3       	ldi	r27, 0x3F	; 63
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	8e 01       	movw	r16, r28
    28ea:	05 5a       	subi	r16, 0xA5	; 165
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e1 5a       	subi	r30, 0xA1	; 161
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a e7       	ldi	r20, 0x7A	; 122
    2902:	55 e4       	ldi	r21, 0x45	; 69
    2904:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2916:	fe 01       	movw	r30, r28
    2918:	e5 5a       	subi	r30, 0xA5	; 165
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	44 f4       	brge	.+16     	; 0x2944 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2934:	fe 01       	movw	r30, r28
    2936:	e7 5a       	subi	r30, 0xA7	; 167
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	80 83       	st	Z, r24
    2942:	64 c0       	rjmp	.+200    	; 0x2a0c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2944:	fe 01       	movw	r30, r28
    2946:	e5 5a       	subi	r30, 0xA5	; 165
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	0c f0       	brlt	.+2      	; 0x2964 <LCD_sendCommand+0xbe>
    2962:	43 c0       	rjmp	.+134    	; 0x29ea <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2964:	fe 01       	movw	r30, r28
    2966:	e1 5a       	subi	r30, 0xA1	; 161
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8e 01       	movw	r16, r28
    2984:	07 5a       	subi	r16, 0xA7	; 167
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	f8 01       	movw	r30, r16
    2996:	91 83       	std	Z+1, r25	; 0x01
    2998:	80 83       	st	Z, r24
    299a:	1f c0       	rjmp	.+62     	; 0x29da <LCD_sendCommand+0x134>
    299c:	fe 01       	movw	r30, r28
    299e:	e9 5a       	subi	r30, 0xA9	; 169
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 e9       	ldi	r24, 0x90	; 144
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	fe 01       	movw	r30, r28
    29ac:	e9 5a       	subi	r30, 0xA9	; 169
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	80 81       	ld	r24, Z
    29b2:	91 81       	ldd	r25, Z+1	; 0x01
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_sendCommand+0x10e>
    29b8:	fe 01       	movw	r30, r28
    29ba:	e9 5a       	subi	r30, 0xA9	; 169
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	de 01       	movw	r26, r28
    29c4:	a7 5a       	subi	r26, 0xA7	; 167
    29c6:	bf 4f       	sbci	r27, 0xFF	; 255
    29c8:	fe 01       	movw	r30, r28
    29ca:	e7 5a       	subi	r30, 0xA7	; 167
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	11 96       	adiw	r26, 0x01	; 1
    29d6:	9c 93       	st	X, r25
    29d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	fe 01       	movw	r30, r28
    29dc:	e7 5a       	subi	r30, 0xA7	; 167
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	d1 f6       	brne	.-76     	; 0x299c <LCD_sendCommand+0xf6>
    29e8:	27 c0       	rjmp	.+78     	; 0x2a38 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	8e 01       	movw	r16, r28
    29ec:	07 5a       	subi	r16, 0xA7	; 167
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e5 5a       	subi	r30, 0xA5	; 165
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	de 01       	movw	r26, r28
    2a0e:	ab 5a       	subi	r26, 0xAB	; 171
    2a10:	bf 4f       	sbci	r27, 0xFF	; 255
    2a12:	fe 01       	movw	r30, r28
    2a14:	e7 5a       	subi	r30, 0xA7	; 167
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	8d 93       	st	X+, r24
    2a1e:	9c 93       	st	X, r25
    2a20:	fe 01       	movw	r30, r28
    2a22:	eb 5a       	subi	r30, 0xAB	; 171
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <LCD_sendCommand+0x184>
    2a2e:	fe 01       	movw	r30, r28
    2a30:	eb 5a       	subi	r30, 0xAB	; 171
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    2a42:	fe 01       	movw	r30, r28
    2a44:	ef 5a       	subi	r30, 0xAF	; 175
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 e8       	ldi	r26, 0x80	; 128
    2a4e:	bf e3       	ldi	r27, 0x3F	; 63
    2a50:	80 83       	st	Z, r24
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	a2 83       	std	Z+2, r26	; 0x02
    2a56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a58:	8e 01       	movw	r16, r28
    2a5a:	03 5b       	subi	r16, 0xB3	; 179
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ef 5a       	subi	r30, 0xAF	; 175
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	4a e7       	ldi	r20, 0x7A	; 122
    2a72:	55 e4       	ldi	r21, 0x45	; 69
    2a74:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	80 83       	st	Z, r24
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	a2 83       	std	Z+2, r26	; 0x02
    2a84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a86:	fe 01       	movw	r30, r28
    2a88:	e3 5b       	subi	r30, 0xB3	; 179
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e8       	ldi	r20, 0x80	; 128
    2a9a:	5f e3       	ldi	r21, 0x3F	; 63
    2a9c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2aa0:	88 23       	and	r24, r24
    2aa2:	44 f4       	brge	.+16     	; 0x2ab4 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e5 5b       	subi	r30, 0xB5	; 181
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	80 83       	st	Z, r24
    2ab2:	64 c0       	rjmp	.+200    	; 0x2b7c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e3 5b       	subi	r30, 0xB3	; 179
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	3f ef       	ldi	r19, 0xFF	; 255
    2ac6:	4f e7       	ldi	r20, 0x7F	; 127
    2ac8:	57 e4       	ldi	r21, 0x47	; 71
    2aca:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ace:	18 16       	cp	r1, r24
    2ad0:	0c f0       	brlt	.+2      	; 0x2ad4 <LCD_sendCommand+0x22e>
    2ad2:	43 c0       	rjmp	.+134    	; 0x2b5a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ef 5a       	subi	r30, 0xAF	; 175
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	82 81       	ldd	r24, Z+2	; 0x02
    2ae0:	93 81       	ldd	r25, Z+3	; 0x03
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e2       	ldi	r20, 0x20	; 32
    2ae8:	51 e4       	ldi	r21, 0x41	; 65
    2aea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	8e 01       	movw	r16, r28
    2af4:	05 5b       	subi	r16, 0xB5	; 181
    2af6:	1f 4f       	sbci	r17, 0xFF	; 255
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	f8 01       	movw	r30, r16
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	1f c0       	rjmp	.+62     	; 0x2b4a <LCD_sendCommand+0x2a4>
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e7 5b       	subi	r30, 0xB7	; 183
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 e9       	ldi	r24, 0x90	; 144
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e7 5b       	subi	r30, 0xB7	; 183
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <LCD_sendCommand+0x27e>
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e7 5b       	subi	r30, 0xB7	; 183
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b32:	de 01       	movw	r26, r28
    2b34:	a5 5b       	subi	r26, 0xB5	; 181
    2b36:	bf 4f       	sbci	r27, 0xFF	; 255
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e5 5b       	subi	r30, 0xB5	; 181
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	91 81       	ldd	r25, Z+1	; 0x01
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	11 96       	adiw	r26, 0x01	; 1
    2b46:	9c 93       	st	X, r25
    2b48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e5 5b       	subi	r30, 0xB5	; 181
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	d1 f6       	brne	.-76     	; 0x2b0c <LCD_sendCommand+0x266>
    2b58:	27 c0       	rjmp	.+78     	; 0x2ba8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	8e 01       	movw	r16, r28
    2b5c:	05 5b       	subi	r16, 0xB5	; 181
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	fe 01       	movw	r30, r28
    2b62:	e3 5b       	subi	r30, 0xB3	; 179
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	60 81       	ld	r22, Z
    2b68:	71 81       	ldd	r23, Z+1	; 0x01
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	f8 01       	movw	r30, r16
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	de 01       	movw	r26, r28
    2b7e:	a9 5b       	subi	r26, 0xB9	; 185
    2b80:	bf 4f       	sbci	r27, 0xFF	; 255
    2b82:	fe 01       	movw	r30, r28
    2b84:	e5 5b       	subi	r30, 0xB5	; 181
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	8d 93       	st	X+, r24
    2b8e:	9c 93       	st	X, r25
    2b90:	fe 01       	movw	r30, r28
    2b92:	e9 5b       	subi	r30, 0xB9	; 185
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <LCD_sendCommand+0x2f4>
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e9 5b       	subi	r30, 0xB9	; 185
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ed 59       	subi	r30, 0x9D	; 157
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	88 2f       	mov	r24, r24
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	80 71       	andi	r24, 0x10	; 16
    2bb6:	90 70       	andi	r25, 0x00	; 0
    2bb8:	95 95       	asr	r25
    2bba:	87 95       	ror	r24
    2bbc:	95 95       	asr	r25
    2bbe:	87 95       	ror	r24
    2bc0:	95 95       	asr	r25
    2bc2:	87 95       	ror	r24
    2bc4:	95 95       	asr	r25
    2bc6:	87 95       	ror	r24
    2bc8:	98 2f       	mov	r25, r24
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	62 e0       	ldi	r22, 0x02	; 2
    2bce:	49 2f       	mov	r20, r25
    2bd0:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	ed 59       	subi	r30, 0x9D	; 157
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	80 72       	andi	r24, 0x20	; 32
    2be2:	90 70       	andi	r25, 0x00	; 0
    2be4:	95 95       	asr	r25
    2be6:	87 95       	ror	r24
    2be8:	95 95       	asr	r25
    2bea:	87 95       	ror	r24
    2bec:	95 95       	asr	r25
    2bee:	87 95       	ror	r24
    2bf0:	95 95       	asr	r25
    2bf2:	87 95       	ror	r24
    2bf4:	95 95       	asr	r25
    2bf6:	87 95       	ror	r24
    2bf8:	98 2f       	mov	r25, r24
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	63 e0       	ldi	r22, 0x03	; 3
    2bfe:	49 2f       	mov	r20, r25
    2c00:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2c04:	fe 01       	movw	r30, r28
    2c06:	ed 59       	subi	r30, 0x9D	; 157
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	80 74       	andi	r24, 0x40	; 64
    2c12:	90 70       	andi	r25, 0x00	; 0
    2c14:	08 2e       	mov	r0, r24
    2c16:	89 2f       	mov	r24, r25
    2c18:	00 0c       	add	r0, r0
    2c1a:	88 1f       	adc	r24, r24
    2c1c:	99 0b       	sbc	r25, r25
    2c1e:	00 0c       	add	r0, r0
    2c20:	88 1f       	adc	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	98 2f       	mov	r25, r24
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	64 e0       	ldi	r22, 0x04	; 4
    2c2a:	49 2f       	mov	r20, r25
    2c2c:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2c30:	fe 01       	movw	r30, r28
    2c32:	ed 59       	subi	r30, 0x9D	; 157
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	98 2f       	mov	r25, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	99 27       	eor	r25, r25
    2c3e:	99 1f       	adc	r25, r25
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	65 e0       	ldi	r22, 0x05	; 5
    2c44:	49 2f       	mov	r20, r25
    2c46:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	ed 5b       	subi	r30, 0xBD	; 189
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	a0 e8       	ldi	r26, 0x80	; 128
    2c56:	bf e3       	ldi	r27, 0x3F	; 63
    2c58:	80 83       	st	Z, r24
    2c5a:	91 83       	std	Z+1, r25	; 0x01
    2c5c:	a2 83       	std	Z+2, r26	; 0x02
    2c5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c60:	8e 01       	movw	r16, r28
    2c62:	01 5c       	subi	r16, 0xC1	; 193
    2c64:	1f 4f       	sbci	r17, 0xFF	; 255
    2c66:	fe 01       	movw	r30, r28
    2c68:	ed 5b       	subi	r30, 0xBD	; 189
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	4a e7       	ldi	r20, 0x7A	; 122
    2c7a:	55 e4       	ldi	r21, 0x45	; 69
    2c7c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	f8 01       	movw	r30, r16
    2c86:	80 83       	st	Z, r24
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	a2 83       	std	Z+2, r26	; 0x02
    2c8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ff 96       	adiw	r30, 0x3f	; 63
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9e af       	std	Y+62, r25	; 0x3e
    2cb0:	8d af       	std	Y+61, r24	; 0x3d
    2cb2:	46 c0       	rjmp	.+140    	; 0x2d40 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ff 96       	adiw	r30, 0x3f	; 63
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	3f ef       	ldi	r19, 0xFF	; 255
    2cc4:	4f e7       	ldi	r20, 0x7F	; 127
    2cc6:	57 e4       	ldi	r21, 0x47	; 71
    2cc8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	64 f5       	brge	.+88     	; 0x2d28 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	ed 5b       	subi	r30, 0xBD	; 189
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	82 81       	ldd	r24, Z+2	; 0x02
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e2       	ldi	r20, 0x20	; 32
    2ce4:	51 e4       	ldi	r21, 0x41	; 65
    2ce6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	bc 01       	movw	r22, r24
    2cf0:	cd 01       	movw	r24, r26
    2cf2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9e af       	std	Y+62, r25	; 0x3e
    2cfc:	8d af       	std	Y+61, r24	; 0x3d
    2cfe:	0f c0       	rjmp	.+30     	; 0x2d1e <LCD_sendCommand+0x478>
    2d00:	80 e9       	ldi	r24, 0x90	; 144
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	9c af       	std	Y+60, r25	; 0x3c
    2d06:	8b af       	std	Y+59, r24	; 0x3b
    2d08:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <LCD_sendCommand+0x466>
    2d10:	9c af       	std	Y+60, r25	; 0x3c
    2d12:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d14:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d16:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	9e af       	std	Y+62, r25	; 0x3e
    2d1c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	69 f7       	brne	.-38     	; 0x2d00 <LCD_sendCommand+0x45a>
    2d26:	16 c0       	rjmp	.+44     	; 0x2d54 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ff 96       	adiw	r30, 0x3f	; 63
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9e af       	std	Y+62, r25	; 0x3e
    2d3e:	8d af       	std	Y+61, r24	; 0x3d
    2d40:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d42:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d44:	9a af       	std	Y+58, r25	; 0x3a
    2d46:	89 af       	std	Y+57, r24	; 0x39
    2d48:	89 ad       	ldd	r24, Y+57	; 0x39
    2d4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <LCD_sendCommand+0x4a6>
    2d50:	9a af       	std	Y+58, r25	; 0x3a
    2d52:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	a0 e8       	ldi	r26, 0x80	; 128
    2d64:	bf e3       	ldi	r27, 0x3F	; 63
    2d66:	8d ab       	std	Y+53, r24	; 0x35
    2d68:	9e ab       	std	Y+54, r25	; 0x36
    2d6a:	af ab       	std	Y+55, r26	; 0x37
    2d6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6e:	6d a9       	ldd	r22, Y+53	; 0x35
    2d70:	7e a9       	ldd	r23, Y+54	; 0x36
    2d72:	8f a9       	ldd	r24, Y+55	; 0x37
    2d74:	98 ad       	ldd	r25, Y+56	; 0x38
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	4a e7       	ldi	r20, 0x7A	; 122
    2d7c:	55 e4       	ldi	r21, 0x45	; 69
    2d7e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	89 ab       	std	Y+49, r24	; 0x31
    2d88:	9a ab       	std	Y+50, r25	; 0x32
    2d8a:	ab ab       	std	Y+51, r26	; 0x33
    2d8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d8e:	69 a9       	ldd	r22, Y+49	; 0x31
    2d90:	7a a9       	ldd	r23, Y+50	; 0x32
    2d92:	8b a9       	ldd	r24, Y+51	; 0x33
    2d94:	9c a9       	ldd	r25, Y+52	; 0x34
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	2c f4       	brge	.+10     	; 0x2db0 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	98 ab       	std	Y+48, r25	; 0x30
    2dac:	8f a7       	std	Y+47, r24	; 0x2f
    2dae:	3f c0       	rjmp	.+126    	; 0x2e2e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2db0:	69 a9       	ldd	r22, Y+49	; 0x31
    2db2:	7a a9       	ldd	r23, Y+50	; 0x32
    2db4:	8b a9       	ldd	r24, Y+51	; 0x33
    2db6:	9c a9       	ldd	r25, Y+52	; 0x34
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	4c f5       	brge	.+82     	; 0x2e1a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dca:	7e a9       	ldd	r23, Y+54	; 0x36
    2dcc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dce:	98 ad       	ldd	r25, Y+56	; 0x38
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e2       	ldi	r20, 0x20	; 32
    2dd6:	51 e4       	ldi	r21, 0x41	; 65
    2dd8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	bc 01       	movw	r22, r24
    2de2:	cd 01       	movw	r24, r26
    2de4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	98 ab       	std	Y+48, r25	; 0x30
    2dee:	8f a7       	std	Y+47, r24	; 0x2f
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <LCD_sendCommand+0x56a>
    2df2:	80 e9       	ldi	r24, 0x90	; 144
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	9e a7       	std	Y+46, r25	; 0x2e
    2df8:	8d a7       	std	Y+45, r24	; 0x2d
    2dfa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dfc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	f1 f7       	brne	.-4      	; 0x2dfe <LCD_sendCommand+0x558>
    2e02:	9e a7       	std	Y+46, r25	; 0x2e
    2e04:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e08:	98 a9       	ldd	r25, Y+48	; 0x30
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	98 ab       	std	Y+48, r25	; 0x30
    2e0e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e12:	98 a9       	ldd	r25, Y+48	; 0x30
    2e14:	00 97       	sbiw	r24, 0x00	; 0
    2e16:	69 f7       	brne	.-38     	; 0x2df2 <LCD_sendCommand+0x54c>
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e1c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e1e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e20:	9c a9       	ldd	r25, Y+52	; 0x34
    2e22:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	98 ab       	std	Y+48, r25	; 0x30
    2e2c:	8f a7       	std	Y+47, r24	; 0x2f
    2e2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e30:	98 a9       	ldd	r25, Y+48	; 0x30
    2e32:	9c a7       	std	Y+44, r25	; 0x2c
    2e34:	8b a7       	std	Y+43, r24	; 0x2b
    2e36:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e38:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <LCD_sendCommand+0x594>
    2e3e:	9c a7       	std	Y+44, r25	; 0x2c
    2e40:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	61 e0       	ldi	r22, 0x01	; 1
    2e46:	41 e0       	ldi	r20, 0x01	; 1
    2e48:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a0 e8       	ldi	r26, 0x80	; 128
    2e52:	bf e3       	ldi	r27, 0x3F	; 63
    2e54:	8f a3       	std	Y+39, r24	; 0x27
    2e56:	98 a7       	std	Y+40, r25	; 0x28
    2e58:	a9 a7       	std	Y+41, r26	; 0x29
    2e5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e60:	89 a5       	ldd	r24, Y+41	; 0x29
    2e62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a e7       	ldi	r20, 0x7A	; 122
    2e6a:	55 e4       	ldi	r21, 0x45	; 69
    2e6c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	8b a3       	std	Y+35, r24	; 0x23
    2e76:	9c a3       	std	Y+36, r25	; 0x24
    2e78:	ad a3       	std	Y+37, r26	; 0x25
    2e7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e7c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e80:	8d a1       	ldd	r24, Y+37	; 0x25
    2e82:	9e a1       	ldd	r25, Y+38	; 0x26
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	9a a3       	std	Y+34, r25	; 0x22
    2e9a:	89 a3       	std	Y+33, r24	; 0x21
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eba:	89 a5       	ldd	r24, Y+41	; 0x29
    2ebc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	9a a3       	std	Y+34, r25	; 0x22
    2edc:	89 a3       	std	Y+33, r24	; 0x21
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <LCD_sendCommand+0x658>
    2ee0:	80 e9       	ldi	r24, 0x90	; 144
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	98 a3       	std	Y+32, r25	; 0x20
    2ee6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eea:	98 a1       	ldd	r25, Y+32	; 0x20
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <LCD_sendCommand+0x646>
    2ef0:	98 a3       	std	Y+32, r25	; 0x20
    2ef2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	9a a3       	std	Y+34, r25	; 0x22
    2efc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	89 a1       	ldd	r24, Y+33	; 0x21
    2f00:	9a a1       	ldd	r25, Y+34	; 0x22
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <LCD_sendCommand+0x63a>
    2f06:	14 c0       	rjmp	.+40     	; 0x2f30 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f10:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9a a3       	std	Y+34, r25	; 0x22
    2f1a:	89 a3       	std	Y+33, r24	; 0x21
    2f1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f20:	9e 8f       	std	Y+30, r25	; 0x1e
    2f22:	8d 8f       	std	Y+29, r24	; 0x1d
    2f24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_sendCommand+0x682>
    2f2c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2f30:	fe 01       	movw	r30, r28
    2f32:	ed 59       	subi	r30, 0x9D	; 157
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 81       	ld	r24, Z
    2f38:	98 2f       	mov	r25, r24
    2f3a:	91 70       	andi	r25, 0x01	; 1
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	62 e0       	ldi	r22, 0x02	; 2
    2f40:	49 2f       	mov	r20, r25
    2f42:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2f46:	fe 01       	movw	r30, r28
    2f48:	ed 59       	subi	r30, 0x9D	; 157
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 81       	ld	r24, Z
    2f4e:	88 2f       	mov	r24, r24
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	82 70       	andi	r24, 0x02	; 2
    2f54:	90 70       	andi	r25, 0x00	; 0
    2f56:	95 95       	asr	r25
    2f58:	87 95       	ror	r24
    2f5a:	98 2f       	mov	r25, r24
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	63 e0       	ldi	r22, 0x03	; 3
    2f60:	49 2f       	mov	r20, r25
    2f62:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2f66:	fe 01       	movw	r30, r28
    2f68:	ed 59       	subi	r30, 0x9D	; 157
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	80 81       	ld	r24, Z
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	84 70       	andi	r24, 0x04	; 4
    2f74:	90 70       	andi	r25, 0x00	; 0
    2f76:	95 95       	asr	r25
    2f78:	87 95       	ror	r24
    2f7a:	95 95       	asr	r25
    2f7c:	87 95       	ror	r24
    2f7e:	98 2f       	mov	r25, r24
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	64 e0       	ldi	r22, 0x04	; 4
    2f84:	49 2f       	mov	r20, r25
    2f86:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ed 59       	subi	r30, 0x9D	; 157
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	80 81       	ld	r24, Z
    2f92:	88 2f       	mov	r24, r24
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	88 70       	andi	r24, 0x08	; 8
    2f98:	90 70       	andi	r25, 0x00	; 0
    2f9a:	95 95       	asr	r25
    2f9c:	87 95       	ror	r24
    2f9e:	95 95       	asr	r25
    2fa0:	87 95       	ror	r24
    2fa2:	95 95       	asr	r25
    2fa4:	87 95       	ror	r24
    2fa6:	98 2f       	mov	r25, r24
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	65 e0       	ldi	r22, 0x05	; 5
    2fac:	49 2f       	mov	r20, r25
    2fae:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a0 e8       	ldi	r26, 0x80	; 128
    2fb8:	bf e3       	ldi	r27, 0x3F	; 63
    2fba:	89 8f       	std	Y+25, r24	; 0x19
    2fbc:	9a 8f       	std	Y+26, r25	; 0x1a
    2fbe:	ab 8f       	std	Y+27, r26	; 0x1b
    2fc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4a e7       	ldi	r20, 0x7A	; 122
    2fd0:	55 e4       	ldi	r21, 0x45	; 69
    2fd2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	8d 8b       	std	Y+21, r24	; 0x15
    2fdc:	9e 8b       	std	Y+22, r25	; 0x16
    2fde:	af 8b       	std	Y+23, r26	; 0x17
    2fe0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fe2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e8       	ldi	r20, 0x80	; 128
    2ff0:	5f e3       	ldi	r21, 0x3F	; 63
    2ff2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2ff6:	88 23       	and	r24, r24
    2ff8:	2c f4       	brge	.+10     	; 0x3004 <LCD_sendCommand+0x75e>
		__ticks = 1;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	9c 8b       	std	Y+20, r25	; 0x14
    3000:	8b 8b       	std	Y+19, r24	; 0x13
    3002:	3f c0       	rjmp	.+126    	; 0x3082 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3004:	6d 89       	ldd	r22, Y+21	; 0x15
    3006:	7e 89       	ldd	r23, Y+22	; 0x16
    3008:	8f 89       	ldd	r24, Y+23	; 0x17
    300a:	98 8d       	ldd	r25, Y+24	; 0x18
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	3f ef       	ldi	r19, 0xFF	; 255
    3010:	4f e7       	ldi	r20, 0x7F	; 127
    3012:	57 e4       	ldi	r21, 0x47	; 71
    3014:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3018:	18 16       	cp	r1, r24
    301a:	4c f5       	brge	.+82     	; 0x306e <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301c:	69 8d       	ldd	r22, Y+25	; 0x19
    301e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3020:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3022:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e2       	ldi	r20, 0x20	; 32
    302a:	51 e4       	ldi	r21, 0x41	; 65
    302c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	9c 8b       	std	Y+20, r25	; 0x14
    3042:	8b 8b       	std	Y+19, r24	; 0x13
    3044:	0f c0       	rjmp	.+30     	; 0x3064 <LCD_sendCommand+0x7be>
    3046:	80 e9       	ldi	r24, 0x90	; 144
    3048:	91 e0       	ldi	r25, 0x01	; 1
    304a:	9a 8b       	std	Y+18, r25	; 0x12
    304c:	89 8b       	std	Y+17, r24	; 0x11
    304e:	89 89       	ldd	r24, Y+17	; 0x11
    3050:	9a 89       	ldd	r25, Y+18	; 0x12
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	f1 f7       	brne	.-4      	; 0x3052 <LCD_sendCommand+0x7ac>
    3056:	9a 8b       	std	Y+18, r25	; 0x12
    3058:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305a:	8b 89       	ldd	r24, Y+19	; 0x13
    305c:	9c 89       	ldd	r25, Y+20	; 0x14
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	9c 8b       	std	Y+20, r25	; 0x14
    3062:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3064:	8b 89       	ldd	r24, Y+19	; 0x13
    3066:	9c 89       	ldd	r25, Y+20	; 0x14
    3068:	00 97       	sbiw	r24, 0x00	; 0
    306a:	69 f7       	brne	.-38     	; 0x3046 <LCD_sendCommand+0x7a0>
    306c:	14 c0       	rjmp	.+40     	; 0x3096 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306e:	6d 89       	ldd	r22, Y+21	; 0x15
    3070:	7e 89       	ldd	r23, Y+22	; 0x16
    3072:	8f 89       	ldd	r24, Y+23	; 0x17
    3074:	98 8d       	ldd	r25, Y+24	; 0x18
    3076:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	9c 8b       	std	Y+20, r25	; 0x14
    3080:	8b 8b       	std	Y+19, r24	; 0x13
    3082:	8b 89       	ldd	r24, Y+19	; 0x13
    3084:	9c 89       	ldd	r25, Y+20	; 0x14
    3086:	98 8b       	std	Y+16, r25	; 0x10
    3088:	8f 87       	std	Y+15, r24	; 0x0f
    308a:	8f 85       	ldd	r24, Y+15	; 0x0f
    308c:	98 89       	ldd	r25, Y+16	; 0x10
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <LCD_sendCommand+0x7e8>
    3092:	98 8b       	std	Y+16, r25	; 0x10
    3094:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	61 e0       	ldi	r22, 0x01	; 1
    309a:	40 e0       	ldi	r20, 0x00	; 0
    309c:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	a0 e8       	ldi	r26, 0x80	; 128
    30a6:	bf e3       	ldi	r27, 0x3F	; 63
    30a8:	8b 87       	std	Y+11, r24	; 0x0b
    30aa:	9c 87       	std	Y+12, r25	; 0x0c
    30ac:	ad 87       	std	Y+13, r26	; 0x0d
    30ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	4a e7       	ldi	r20, 0x7A	; 122
    30be:	55 e4       	ldi	r21, 0x45	; 69
    30c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	8f 83       	std	Y+7, r24	; 0x07
    30ca:	98 87       	std	Y+8, r25	; 0x08
    30cc:	a9 87       	std	Y+9, r26	; 0x09
    30ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30d0:	6f 81       	ldd	r22, Y+7	; 0x07
    30d2:	78 85       	ldd	r23, Y+8	; 0x08
    30d4:	89 85       	ldd	r24, Y+9	; 0x09
    30d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e8       	ldi	r20, 0x80	; 128
    30de:	5f e3       	ldi	r21, 0x3F	; 63
    30e0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    30e4:	88 23       	and	r24, r24
    30e6:	2c f4       	brge	.+10     	; 0x30f2 <LCD_sendCommand+0x84c>
		__ticks = 1;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
    30f0:	3f c0       	rjmp	.+126    	; 0x3170 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    30f2:	6f 81       	ldd	r22, Y+7	; 0x07
    30f4:	78 85       	ldd	r23, Y+8	; 0x08
    30f6:	89 85       	ldd	r24, Y+9	; 0x09
    30f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	4c f5       	brge	.+82     	; 0x315c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310a:	6b 85       	ldd	r22, Y+11	; 0x0b
    310c:	7c 85       	ldd	r23, Y+12	; 0x0c
    310e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3110:	9e 85       	ldd	r25, Y+14	; 0x0e
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	51 e4       	ldi	r21, 0x41	; 65
    311a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9e 83       	std	Y+6, r25	; 0x06
    3130:	8d 83       	std	Y+5, r24	; 0x05
    3132:	0f c0       	rjmp	.+30     	; 0x3152 <LCD_sendCommand+0x8ac>
    3134:	80 e9       	ldi	r24, 0x90	; 144
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <LCD_sendCommand+0x89a>
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	9e 83       	std	Y+6, r25	; 0x06
    3150:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3152:	8d 81       	ldd	r24, Y+5	; 0x05
    3154:	9e 81       	ldd	r25, Y+6	; 0x06
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	69 f7       	brne	.-38     	; 0x3134 <LCD_sendCommand+0x88e>
    315a:	14 c0       	rjmp	.+40     	; 0x3184 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	9e 83       	std	Y+6, r25	; 0x06
    316e:	8d 83       	std	Y+5, r24	; 0x05
    3170:	8d 81       	ldd	r24, Y+5	; 0x05
    3172:	9e 81       	ldd	r25, Y+6	; 0x06
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <LCD_sendCommand+0x8d6>
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3184:	cd 59       	subi	r28, 0x9D	; 157
    3186:	df 4f       	sbci	r29, 0xFF	; 255
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	08 95       	ret

0000319c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    319c:	0f 93       	push	r16
    319e:	1f 93       	push	r17
    31a0:	df 93       	push	r29
    31a2:	cf 93       	push	r28
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	c3 56       	subi	r28, 0x63	; 99
    31aa:	d0 40       	sbci	r29, 0x00	; 0
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
    31b6:	fe 01       	movw	r30, r28
    31b8:	ed 59       	subi	r30, 0x9D	; 157
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	60 e0       	ldi	r22, 0x00	; 0
    31c2:	41 e0       	ldi	r20, 0x01	; 1
    31c4:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    31c8:	fe 01       	movw	r30, r28
    31ca:	e1 5a       	subi	r30, 0xA1	; 161
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	a0 e8       	ldi	r26, 0x80	; 128
    31d4:	bf e3       	ldi	r27, 0x3F	; 63
    31d6:	80 83       	st	Z, r24
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	a2 83       	std	Z+2, r26	; 0x02
    31dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31de:	8e 01       	movw	r16, r28
    31e0:	05 5a       	subi	r16, 0xA5	; 165
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	fe 01       	movw	r30, r28
    31e6:	e1 5a       	subi	r30, 0xA1	; 161
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	60 81       	ld	r22, Z
    31ec:	71 81       	ldd	r23, Z+1	; 0x01
    31ee:	82 81       	ldd	r24, Z+2	; 0x02
    31f0:	93 81       	ldd	r25, Z+3	; 0x03
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	4a e7       	ldi	r20, 0x7A	; 122
    31f8:	55 e4       	ldi	r21, 0x45	; 69
    31fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	f8 01       	movw	r30, r16
    3204:	80 83       	st	Z, r24
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	a2 83       	std	Z+2, r26	; 0x02
    320a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    320c:	fe 01       	movw	r30, r28
    320e:	e5 5a       	subi	r30, 0xA5	; 165
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	60 81       	ld	r22, Z
    3214:	71 81       	ldd	r23, Z+1	; 0x01
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	93 81       	ldd	r25, Z+3	; 0x03
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e8       	ldi	r20, 0x80	; 128
    3220:	5f e3       	ldi	r21, 0x3F	; 63
    3222:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3226:	88 23       	and	r24, r24
    3228:	44 f4       	brge	.+16     	; 0x323a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    322a:	fe 01       	movw	r30, r28
    322c:	e7 5a       	subi	r30, 0xA7	; 167
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	91 83       	std	Z+1, r25	; 0x01
    3236:	80 83       	st	Z, r24
    3238:	64 c0       	rjmp	.+200    	; 0x3302 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    323a:	fe 01       	movw	r30, r28
    323c:	e5 5a       	subi	r30, 0xA5	; 165
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	60 81       	ld	r22, Z
    3242:	71 81       	ldd	r23, Z+1	; 0x01
    3244:	82 81       	ldd	r24, Z+2	; 0x02
    3246:	93 81       	ldd	r25, Z+3	; 0x03
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	3f ef       	ldi	r19, 0xFF	; 255
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	57 e4       	ldi	r21, 0x47	; 71
    3250:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	0c f0       	brlt	.+2      	; 0x325a <LCD_displayCharacter+0xbe>
    3258:	43 c0       	rjmp	.+134    	; 0x32e0 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325a:	fe 01       	movw	r30, r28
    325c:	e1 5a       	subi	r30, 0xA1	; 161
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	60 81       	ld	r22, Z
    3262:	71 81       	ldd	r23, Z+1	; 0x01
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	93 81       	ldd	r25, Z+3	; 0x03
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e2       	ldi	r20, 0x20	; 32
    326e:	51 e4       	ldi	r21, 0x41	; 65
    3270:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8e 01       	movw	r16, r28
    327a:	07 5a       	subi	r16, 0xA7	; 167
    327c:	1f 4f       	sbci	r17, 0xFF	; 255
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	f8 01       	movw	r30, r16
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	80 83       	st	Z, r24
    3290:	1f c0       	rjmp	.+62     	; 0x32d0 <LCD_displayCharacter+0x134>
    3292:	fe 01       	movw	r30, r28
    3294:	e9 5a       	subi	r30, 0xA9	; 169
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	80 e9       	ldi	r24, 0x90	; 144
    329a:	91 e0       	ldi	r25, 0x01	; 1
    329c:	91 83       	std	Z+1, r25	; 0x01
    329e:	80 83       	st	Z, r24
    32a0:	fe 01       	movw	r30, r28
    32a2:	e9 5a       	subi	r30, 0xA9	; 169
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <LCD_displayCharacter+0x10e>
    32ae:	fe 01       	movw	r30, r28
    32b0:	e9 5a       	subi	r30, 0xA9	; 169
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	91 83       	std	Z+1, r25	; 0x01
    32b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b8:	de 01       	movw	r26, r28
    32ba:	a7 5a       	subi	r26, 0xA7	; 167
    32bc:	bf 4f       	sbci	r27, 0xFF	; 255
    32be:	fe 01       	movw	r30, r28
    32c0:	e7 5a       	subi	r30, 0xA7	; 167
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	11 96       	adiw	r26, 0x01	; 1
    32cc:	9c 93       	st	X, r25
    32ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d0:	fe 01       	movw	r30, r28
    32d2:	e7 5a       	subi	r30, 0xA7	; 167
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	d1 f6       	brne	.-76     	; 0x3292 <LCD_displayCharacter+0xf6>
    32de:	27 c0       	rjmp	.+78     	; 0x332e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e0:	8e 01       	movw	r16, r28
    32e2:	07 5a       	subi	r16, 0xA7	; 167
    32e4:	1f 4f       	sbci	r17, 0xFF	; 255
    32e6:	fe 01       	movw	r30, r28
    32e8:	e5 5a       	subi	r30, 0xA5	; 165
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	82 81       	ldd	r24, Z+2	; 0x02
    32f2:	93 81       	ldd	r25, Z+3	; 0x03
    32f4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	f8 01       	movw	r30, r16
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
    3302:	de 01       	movw	r26, r28
    3304:	ab 5a       	subi	r26, 0xAB	; 171
    3306:	bf 4f       	sbci	r27, 0xFF	; 255
    3308:	fe 01       	movw	r30, r28
    330a:	e7 5a       	subi	r30, 0xA7	; 167
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	91 81       	ldd	r25, Z+1	; 0x01
    3312:	8d 93       	st	X+, r24
    3314:	9c 93       	st	X, r25
    3316:	fe 01       	movw	r30, r28
    3318:	eb 5a       	subi	r30, 0xAB	; 171
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	91 81       	ldd	r25, Z+1	; 0x01
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <LCD_displayCharacter+0x184>
    3324:	fe 01       	movw	r30, r28
    3326:	eb 5a       	subi	r30, 0xAB	; 171
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	91 83       	std	Z+1, r25	; 0x01
    332c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	61 e0       	ldi	r22, 0x01	; 1
    3332:	41 e0       	ldi	r20, 0x01	; 1
    3334:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    3338:	fe 01       	movw	r30, r28
    333a:	ef 5a       	subi	r30, 0xAF	; 175
    333c:	ff 4f       	sbci	r31, 0xFF	; 255
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	a0 e8       	ldi	r26, 0x80	; 128
    3344:	bf e3       	ldi	r27, 0x3F	; 63
    3346:	80 83       	st	Z, r24
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	a2 83       	std	Z+2, r26	; 0x02
    334c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334e:	8e 01       	movw	r16, r28
    3350:	03 5b       	subi	r16, 0xB3	; 179
    3352:	1f 4f       	sbci	r17, 0xFF	; 255
    3354:	fe 01       	movw	r30, r28
    3356:	ef 5a       	subi	r30, 0xAF	; 175
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	4a e7       	ldi	r20, 0x7A	; 122
    3368:	55 e4       	ldi	r21, 0x45	; 69
    336a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	f8 01       	movw	r30, r16
    3374:	80 83       	st	Z, r24
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	a2 83       	std	Z+2, r26	; 0x02
    337a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    337c:	fe 01       	movw	r30, r28
    337e:	e3 5b       	subi	r30, 0xB3	; 179
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	60 81       	ld	r22, Z
    3384:	71 81       	ldd	r23, Z+1	; 0x01
    3386:	82 81       	ldd	r24, Z+2	; 0x02
    3388:	93 81       	ldd	r25, Z+3	; 0x03
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	40 e8       	ldi	r20, 0x80	; 128
    3390:	5f e3       	ldi	r21, 0x3F	; 63
    3392:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3396:	88 23       	and	r24, r24
    3398:	44 f4       	brge	.+16     	; 0x33aa <LCD_displayCharacter+0x20e>
		__ticks = 1;
    339a:	fe 01       	movw	r30, r28
    339c:	e5 5b       	subi	r30, 0xB5	; 181
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	91 83       	std	Z+1, r25	; 0x01
    33a6:	80 83       	st	Z, r24
    33a8:	64 c0       	rjmp	.+200    	; 0x3472 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    33aa:	fe 01       	movw	r30, r28
    33ac:	e3 5b       	subi	r30, 0xB3	; 179
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	60 81       	ld	r22, Z
    33b2:	71 81       	ldd	r23, Z+1	; 0x01
    33b4:	82 81       	ldd	r24, Z+2	; 0x02
    33b6:	93 81       	ldd	r25, Z+3	; 0x03
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	3f ef       	ldi	r19, 0xFF	; 255
    33bc:	4f e7       	ldi	r20, 0x7F	; 127
    33be:	57 e4       	ldi	r21, 0x47	; 71
    33c0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    33c4:	18 16       	cp	r1, r24
    33c6:	0c f0       	brlt	.+2      	; 0x33ca <LCD_displayCharacter+0x22e>
    33c8:	43 c0       	rjmp	.+134    	; 0x3450 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ca:	fe 01       	movw	r30, r28
    33cc:	ef 5a       	subi	r30, 0xAF	; 175
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	40 e2       	ldi	r20, 0x20	; 32
    33de:	51 e4       	ldi	r21, 0x41	; 65
    33e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8e 01       	movw	r16, r28
    33ea:	05 5b       	subi	r16, 0xB5	; 181
    33ec:	1f 4f       	sbci	r17, 0xFF	; 255
    33ee:	bc 01       	movw	r22, r24
    33f0:	cd 01       	movw	r24, r26
    33f2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	f8 01       	movw	r30, r16
    33fc:	91 83       	std	Z+1, r25	; 0x01
    33fe:	80 83       	st	Z, r24
    3400:	1f c0       	rjmp	.+62     	; 0x3440 <LCD_displayCharacter+0x2a4>
    3402:	fe 01       	movw	r30, r28
    3404:	e7 5b       	subi	r30, 0xB7	; 183
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	80 e9       	ldi	r24, 0x90	; 144
    340a:	91 e0       	ldi	r25, 0x01	; 1
    340c:	91 83       	std	Z+1, r25	; 0x01
    340e:	80 83       	st	Z, r24
    3410:	fe 01       	movw	r30, r28
    3412:	e7 5b       	subi	r30, 0xB7	; 183
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <LCD_displayCharacter+0x27e>
    341e:	fe 01       	movw	r30, r28
    3420:	e7 5b       	subi	r30, 0xB7	; 183
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	91 83       	std	Z+1, r25	; 0x01
    3426:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3428:	de 01       	movw	r26, r28
    342a:	a5 5b       	subi	r26, 0xB5	; 181
    342c:	bf 4f       	sbci	r27, 0xFF	; 255
    342e:	fe 01       	movw	r30, r28
    3430:	e5 5b       	subi	r30, 0xB5	; 181
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	11 96       	adiw	r26, 0x01	; 1
    343c:	9c 93       	st	X, r25
    343e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3440:	fe 01       	movw	r30, r28
    3442:	e5 5b       	subi	r30, 0xB5	; 181
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	00 97       	sbiw	r24, 0x00	; 0
    344c:	d1 f6       	brne	.-76     	; 0x3402 <LCD_displayCharacter+0x266>
    344e:	27 c0       	rjmp	.+78     	; 0x349e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3450:	8e 01       	movw	r16, r28
    3452:	05 5b       	subi	r16, 0xB5	; 181
    3454:	1f 4f       	sbci	r17, 0xFF	; 255
    3456:	fe 01       	movw	r30, r28
    3458:	e3 5b       	subi	r30, 0xB3	; 179
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	60 81       	ld	r22, Z
    345e:	71 81       	ldd	r23, Z+1	; 0x01
    3460:	82 81       	ldd	r24, Z+2	; 0x02
    3462:	93 81       	ldd	r25, Z+3	; 0x03
    3464:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	f8 01       	movw	r30, r16
    346e:	91 83       	std	Z+1, r25	; 0x01
    3470:	80 83       	st	Z, r24
    3472:	de 01       	movw	r26, r28
    3474:	a9 5b       	subi	r26, 0xB9	; 185
    3476:	bf 4f       	sbci	r27, 0xFF	; 255
    3478:	fe 01       	movw	r30, r28
    347a:	e5 5b       	subi	r30, 0xB5	; 181
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	80 81       	ld	r24, Z
    3480:	91 81       	ldd	r25, Z+1	; 0x01
    3482:	8d 93       	st	X+, r24
    3484:	9c 93       	st	X, r25
    3486:	fe 01       	movw	r30, r28
    3488:	e9 5b       	subi	r30, 0xB9	; 185
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	91 81       	ldd	r25, Z+1	; 0x01
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	f1 f7       	brne	.-4      	; 0x3490 <LCD_displayCharacter+0x2f4>
    3494:	fe 01       	movw	r30, r28
    3496:	e9 5b       	subi	r30, 0xB9	; 185
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	91 83       	std	Z+1, r25	; 0x01
    349c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    349e:	fe 01       	movw	r30, r28
    34a0:	ed 59       	subi	r30, 0x9D	; 157
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 81       	ld	r24, Z
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	80 71       	andi	r24, 0x10	; 16
    34ac:	90 70       	andi	r25, 0x00	; 0
    34ae:	95 95       	asr	r25
    34b0:	87 95       	ror	r24
    34b2:	95 95       	asr	r25
    34b4:	87 95       	ror	r24
    34b6:	95 95       	asr	r25
    34b8:	87 95       	ror	r24
    34ba:	95 95       	asr	r25
    34bc:	87 95       	ror	r24
    34be:	98 2f       	mov	r25, r24
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	62 e0       	ldi	r22, 0x02	; 2
    34c4:	49 2f       	mov	r20, r25
    34c6:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    34ca:	fe 01       	movw	r30, r28
    34cc:	ed 59       	subi	r30, 0x9D	; 157
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 81       	ld	r24, Z
    34d2:	88 2f       	mov	r24, r24
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	80 72       	andi	r24, 0x20	; 32
    34d8:	90 70       	andi	r25, 0x00	; 0
    34da:	95 95       	asr	r25
    34dc:	87 95       	ror	r24
    34de:	95 95       	asr	r25
    34e0:	87 95       	ror	r24
    34e2:	95 95       	asr	r25
    34e4:	87 95       	ror	r24
    34e6:	95 95       	asr	r25
    34e8:	87 95       	ror	r24
    34ea:	95 95       	asr	r25
    34ec:	87 95       	ror	r24
    34ee:	98 2f       	mov	r25, r24
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	63 e0       	ldi	r22, 0x03	; 3
    34f4:	49 2f       	mov	r20, r25
    34f6:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    34fa:	fe 01       	movw	r30, r28
    34fc:	ed 59       	subi	r30, 0x9D	; 157
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	80 81       	ld	r24, Z
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	80 74       	andi	r24, 0x40	; 64
    3508:	90 70       	andi	r25, 0x00	; 0
    350a:	08 2e       	mov	r0, r24
    350c:	89 2f       	mov	r24, r25
    350e:	00 0c       	add	r0, r0
    3510:	88 1f       	adc	r24, r24
    3512:	99 0b       	sbc	r25, r25
    3514:	00 0c       	add	r0, r0
    3516:	88 1f       	adc	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	98 2f       	mov	r25, r24
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	64 e0       	ldi	r22, 0x04	; 4
    3520:	49 2f       	mov	r20, r25
    3522:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    3526:	fe 01       	movw	r30, r28
    3528:	ed 59       	subi	r30, 0x9D	; 157
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	80 81       	ld	r24, Z
    352e:	98 2f       	mov	r25, r24
    3530:	99 1f       	adc	r25, r25
    3532:	99 27       	eor	r25, r25
    3534:	99 1f       	adc	r25, r25
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	65 e0       	ldi	r22, 0x05	; 5
    353a:	49 2f       	mov	r20, r25
    353c:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    3540:	fe 01       	movw	r30, r28
    3542:	ed 5b       	subi	r30, 0xBD	; 189
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	a0 e8       	ldi	r26, 0x80	; 128
    354c:	bf e3       	ldi	r27, 0x3F	; 63
    354e:	80 83       	st	Z, r24
    3550:	91 83       	std	Z+1, r25	; 0x01
    3552:	a2 83       	std	Z+2, r26	; 0x02
    3554:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3556:	8e 01       	movw	r16, r28
    3558:	01 5c       	subi	r16, 0xC1	; 193
    355a:	1f 4f       	sbci	r17, 0xFF	; 255
    355c:	fe 01       	movw	r30, r28
    355e:	ed 5b       	subi	r30, 0xBD	; 189
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	60 81       	ld	r22, Z
    3564:	71 81       	ldd	r23, Z+1	; 0x01
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	4a e7       	ldi	r20, 0x7A	; 122
    3570:	55 e4       	ldi	r21, 0x45	; 69
    3572:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	f8 01       	movw	r30, r16
    357c:	80 83       	st	Z, r24
    357e:	91 83       	std	Z+1, r25	; 0x01
    3580:	a2 83       	std	Z+2, r26	; 0x02
    3582:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3584:	fe 01       	movw	r30, r28
    3586:	ff 96       	adiw	r30, 0x3f	; 63
    3588:	60 81       	ld	r22, Z
    358a:	71 81       	ldd	r23, Z+1	; 0x01
    358c:	82 81       	ldd	r24, Z+2	; 0x02
    358e:	93 81       	ldd	r25, Z+3	; 0x03
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e8       	ldi	r20, 0x80	; 128
    3596:	5f e3       	ldi	r21, 0x3F	; 63
    3598:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    359c:	88 23       	and	r24, r24
    359e:	2c f4       	brge	.+10     	; 0x35aa <LCD_displayCharacter+0x40e>
		__ticks = 1;
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	9e af       	std	Y+62, r25	; 0x3e
    35a6:	8d af       	std	Y+61, r24	; 0x3d
    35a8:	46 c0       	rjmp	.+140    	; 0x3636 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    35aa:	fe 01       	movw	r30, r28
    35ac:	ff 96       	adiw	r30, 0x3f	; 63
    35ae:	60 81       	ld	r22, Z
    35b0:	71 81       	ldd	r23, Z+1	; 0x01
    35b2:	82 81       	ldd	r24, Z+2	; 0x02
    35b4:	93 81       	ldd	r25, Z+3	; 0x03
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	3f ef       	ldi	r19, 0xFF	; 255
    35ba:	4f e7       	ldi	r20, 0x7F	; 127
    35bc:	57 e4       	ldi	r21, 0x47	; 71
    35be:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    35c2:	18 16       	cp	r1, r24
    35c4:	64 f5       	brge	.+88     	; 0x361e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c6:	fe 01       	movw	r30, r28
    35c8:	ed 5b       	subi	r30, 0xBD	; 189
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	60 81       	ld	r22, Z
    35ce:	71 81       	ldd	r23, Z+1	; 0x01
    35d0:	82 81       	ldd	r24, Z+2	; 0x02
    35d2:	93 81       	ldd	r25, Z+3	; 0x03
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	40 e2       	ldi	r20, 0x20	; 32
    35da:	51 e4       	ldi	r21, 0x41	; 65
    35dc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9e af       	std	Y+62, r25	; 0x3e
    35f2:	8d af       	std	Y+61, r24	; 0x3d
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <LCD_displayCharacter+0x478>
    35f6:	80 e9       	ldi	r24, 0x90	; 144
    35f8:	91 e0       	ldi	r25, 0x01	; 1
    35fa:	9c af       	std	Y+60, r25	; 0x3c
    35fc:	8b af       	std	Y+59, r24	; 0x3b
    35fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    3600:	9c ad       	ldd	r25, Y+60	; 0x3c
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <LCD_displayCharacter+0x466>
    3606:	9c af       	std	Y+60, r25	; 0x3c
    3608:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360a:	8d ad       	ldd	r24, Y+61	; 0x3d
    360c:	9e ad       	ldd	r25, Y+62	; 0x3e
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	9e af       	std	Y+62, r25	; 0x3e
    3612:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3614:	8d ad       	ldd	r24, Y+61	; 0x3d
    3616:	9e ad       	ldd	r25, Y+62	; 0x3e
    3618:	00 97       	sbiw	r24, 0x00	; 0
    361a:	69 f7       	brne	.-38     	; 0x35f6 <LCD_displayCharacter+0x45a>
    361c:	16 c0       	rjmp	.+44     	; 0x364a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361e:	fe 01       	movw	r30, r28
    3620:	ff 96       	adiw	r30, 0x3f	; 63
    3622:	60 81       	ld	r22, Z
    3624:	71 81       	ldd	r23, Z+1	; 0x01
    3626:	82 81       	ldd	r24, Z+2	; 0x02
    3628:	93 81       	ldd	r25, Z+3	; 0x03
    362a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9e af       	std	Y+62, r25	; 0x3e
    3634:	8d af       	std	Y+61, r24	; 0x3d
    3636:	8d ad       	ldd	r24, Y+61	; 0x3d
    3638:	9e ad       	ldd	r25, Y+62	; 0x3e
    363a:	9a af       	std	Y+58, r25	; 0x3a
    363c:	89 af       	std	Y+57, r24	; 0x39
    363e:	89 ad       	ldd	r24, Y+57	; 0x39
    3640:	9a ad       	ldd	r25, Y+58	; 0x3a
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <LCD_displayCharacter+0x4a6>
    3646:	9a af       	std	Y+58, r25	; 0x3a
    3648:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	61 e0       	ldi	r22, 0x01	; 1
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	a0 e8       	ldi	r26, 0x80	; 128
    365a:	bf e3       	ldi	r27, 0x3F	; 63
    365c:	8d ab       	std	Y+53, r24	; 0x35
    365e:	9e ab       	std	Y+54, r25	; 0x36
    3660:	af ab       	std	Y+55, r26	; 0x37
    3662:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3664:	6d a9       	ldd	r22, Y+53	; 0x35
    3666:	7e a9       	ldd	r23, Y+54	; 0x36
    3668:	8f a9       	ldd	r24, Y+55	; 0x37
    366a:	98 ad       	ldd	r25, Y+56	; 0x38
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	4a e7       	ldi	r20, 0x7A	; 122
    3672:	55 e4       	ldi	r21, 0x45	; 69
    3674:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	89 ab       	std	Y+49, r24	; 0x31
    367e:	9a ab       	std	Y+50, r25	; 0x32
    3680:	ab ab       	std	Y+51, r26	; 0x33
    3682:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3684:	69 a9       	ldd	r22, Y+49	; 0x31
    3686:	7a a9       	ldd	r23, Y+50	; 0x32
    3688:	8b a9       	ldd	r24, Y+51	; 0x33
    368a:	9c a9       	ldd	r25, Y+52	; 0x34
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	5f e3       	ldi	r21, 0x3F	; 63
    3694:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3698:	88 23       	and	r24, r24
    369a:	2c f4       	brge	.+10     	; 0x36a6 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	98 ab       	std	Y+48, r25	; 0x30
    36a2:	8f a7       	std	Y+47, r24	; 0x2f
    36a4:	3f c0       	rjmp	.+126    	; 0x3724 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    36a6:	69 a9       	ldd	r22, Y+49	; 0x31
    36a8:	7a a9       	ldd	r23, Y+50	; 0x32
    36aa:	8b a9       	ldd	r24, Y+51	; 0x33
    36ac:	9c a9       	ldd	r25, Y+52	; 0x34
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	3f ef       	ldi	r19, 0xFF	; 255
    36b2:	4f e7       	ldi	r20, 0x7F	; 127
    36b4:	57 e4       	ldi	r21, 0x47	; 71
    36b6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    36ba:	18 16       	cp	r1, r24
    36bc:	4c f5       	brge	.+82     	; 0x3710 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36be:	6d a9       	ldd	r22, Y+53	; 0x35
    36c0:	7e a9       	ldd	r23, Y+54	; 0x36
    36c2:	8f a9       	ldd	r24, Y+55	; 0x37
    36c4:	98 ad       	ldd	r25, Y+56	; 0x38
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e2       	ldi	r20, 0x20	; 32
    36cc:	51 e4       	ldi	r21, 0x41	; 65
    36ce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	98 ab       	std	Y+48, r25	; 0x30
    36e4:	8f a7       	std	Y+47, r24	; 0x2f
    36e6:	0f c0       	rjmp	.+30     	; 0x3706 <LCD_displayCharacter+0x56a>
    36e8:	80 e9       	ldi	r24, 0x90	; 144
    36ea:	91 e0       	ldi	r25, 0x01	; 1
    36ec:	9e a7       	std	Y+46, r25	; 0x2e
    36ee:	8d a7       	std	Y+45, r24	; 0x2d
    36f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    36f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <LCD_displayCharacter+0x558>
    36f8:	9e a7       	std	Y+46, r25	; 0x2e
    36fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    36fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	98 ab       	std	Y+48, r25	; 0x30
    3704:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3706:	8f a5       	ldd	r24, Y+47	; 0x2f
    3708:	98 a9       	ldd	r25, Y+48	; 0x30
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	69 f7       	brne	.-38     	; 0x36e8 <LCD_displayCharacter+0x54c>
    370e:	14 c0       	rjmp	.+40     	; 0x3738 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3710:	69 a9       	ldd	r22, Y+49	; 0x31
    3712:	7a a9       	ldd	r23, Y+50	; 0x32
    3714:	8b a9       	ldd	r24, Y+51	; 0x33
    3716:	9c a9       	ldd	r25, Y+52	; 0x34
    3718:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	98 ab       	std	Y+48, r25	; 0x30
    3722:	8f a7       	std	Y+47, r24	; 0x2f
    3724:	8f a5       	ldd	r24, Y+47	; 0x2f
    3726:	98 a9       	ldd	r25, Y+48	; 0x30
    3728:	9c a7       	std	Y+44, r25	; 0x2c
    372a:	8b a7       	std	Y+43, r24	; 0x2b
    372c:	8b a5       	ldd	r24, Y+43	; 0x2b
    372e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <LCD_displayCharacter+0x594>
    3734:	9c a7       	std	Y+44, r25	; 0x2c
    3736:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	61 e0       	ldi	r22, 0x01	; 1
    373c:	41 e0       	ldi	r20, 0x01	; 1
    373e:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	a0 e8       	ldi	r26, 0x80	; 128
    3748:	bf e3       	ldi	r27, 0x3F	; 63
    374a:	8f a3       	std	Y+39, r24	; 0x27
    374c:	98 a7       	std	Y+40, r25	; 0x28
    374e:	a9 a7       	std	Y+41, r26	; 0x29
    3750:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3752:	6f a1       	ldd	r22, Y+39	; 0x27
    3754:	78 a5       	ldd	r23, Y+40	; 0x28
    3756:	89 a5       	ldd	r24, Y+41	; 0x29
    3758:	9a a5       	ldd	r25, Y+42	; 0x2a
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	4a e7       	ldi	r20, 0x7A	; 122
    3760:	55 e4       	ldi	r21, 0x45	; 69
    3762:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	8b a3       	std	Y+35, r24	; 0x23
    376c:	9c a3       	std	Y+36, r25	; 0x24
    376e:	ad a3       	std	Y+37, r26	; 0x25
    3770:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3772:	6b a1       	ldd	r22, Y+35	; 0x23
    3774:	7c a1       	ldd	r23, Y+36	; 0x24
    3776:	8d a1       	ldd	r24, Y+37	; 0x25
    3778:	9e a1       	ldd	r25, Y+38	; 0x26
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e8       	ldi	r20, 0x80	; 128
    3780:	5f e3       	ldi	r21, 0x3F	; 63
    3782:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3786:	88 23       	and	r24, r24
    3788:	2c f4       	brge	.+10     	; 0x3794 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	9a a3       	std	Y+34, r25	; 0x22
    3790:	89 a3       	std	Y+33, r24	; 0x21
    3792:	3f c0       	rjmp	.+126    	; 0x3812 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3794:	6b a1       	ldd	r22, Y+35	; 0x23
    3796:	7c a1       	ldd	r23, Y+36	; 0x24
    3798:	8d a1       	ldd	r24, Y+37	; 0x25
    379a:	9e a1       	ldd	r25, Y+38	; 0x26
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	3f ef       	ldi	r19, 0xFF	; 255
    37a0:	4f e7       	ldi	r20, 0x7F	; 127
    37a2:	57 e4       	ldi	r21, 0x47	; 71
    37a4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    37a8:	18 16       	cp	r1, r24
    37aa:	4c f5       	brge	.+82     	; 0x37fe <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ac:	6f a1       	ldd	r22, Y+39	; 0x27
    37ae:	78 a5       	ldd	r23, Y+40	; 0x28
    37b0:	89 a5       	ldd	r24, Y+41	; 0x29
    37b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	40 e2       	ldi	r20, 0x20	; 32
    37ba:	51 e4       	ldi	r21, 0x41	; 65
    37bc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	9a a3       	std	Y+34, r25	; 0x22
    37d2:	89 a3       	std	Y+33, r24	; 0x21
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <LCD_displayCharacter+0x658>
    37d6:	80 e9       	ldi	r24, 0x90	; 144
    37d8:	91 e0       	ldi	r25, 0x01	; 1
    37da:	98 a3       	std	Y+32, r25	; 0x20
    37dc:	8f 8f       	std	Y+31, r24	; 0x1f
    37de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37e0:	98 a1       	ldd	r25, Y+32	; 0x20
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <LCD_displayCharacter+0x646>
    37e6:	98 a3       	std	Y+32, r25	; 0x20
    37e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ea:	89 a1       	ldd	r24, Y+33	; 0x21
    37ec:	9a a1       	ldd	r25, Y+34	; 0x22
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	9a a3       	std	Y+34, r25	; 0x22
    37f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f4:	89 a1       	ldd	r24, Y+33	; 0x21
    37f6:	9a a1       	ldd	r25, Y+34	; 0x22
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <LCD_displayCharacter+0x63a>
    37fc:	14 c0       	rjmp	.+40     	; 0x3826 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3800:	7c a1       	ldd	r23, Y+36	; 0x24
    3802:	8d a1       	ldd	r24, Y+37	; 0x25
    3804:	9e a1       	ldd	r25, Y+38	; 0x26
    3806:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	9a a3       	std	Y+34, r25	; 0x22
    3810:	89 a3       	std	Y+33, r24	; 0x21
    3812:	89 a1       	ldd	r24, Y+33	; 0x21
    3814:	9a a1       	ldd	r25, Y+34	; 0x22
    3816:	9e 8f       	std	Y+30, r25	; 0x1e
    3818:	8d 8f       	std	Y+29, r24	; 0x1d
    381a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    381c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <LCD_displayCharacter+0x682>
    3822:	9e 8f       	std	Y+30, r25	; 0x1e
    3824:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3826:	fe 01       	movw	r30, r28
    3828:	ed 59       	subi	r30, 0x9D	; 157
    382a:	ff 4f       	sbci	r31, 0xFF	; 255
    382c:	80 81       	ld	r24, Z
    382e:	98 2f       	mov	r25, r24
    3830:	91 70       	andi	r25, 0x01	; 1
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	62 e0       	ldi	r22, 0x02	; 2
    3836:	49 2f       	mov	r20, r25
    3838:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    383c:	fe 01       	movw	r30, r28
    383e:	ed 59       	subi	r30, 0x9D	; 157
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 81       	ld	r24, Z
    3844:	88 2f       	mov	r24, r24
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	82 70       	andi	r24, 0x02	; 2
    384a:	90 70       	andi	r25, 0x00	; 0
    384c:	95 95       	asr	r25
    384e:	87 95       	ror	r24
    3850:	98 2f       	mov	r25, r24
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	63 e0       	ldi	r22, 0x03	; 3
    3856:	49 2f       	mov	r20, r25
    3858:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    385c:	fe 01       	movw	r30, r28
    385e:	ed 59       	subi	r30, 0x9D	; 157
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	80 81       	ld	r24, Z
    3864:	88 2f       	mov	r24, r24
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	84 70       	andi	r24, 0x04	; 4
    386a:	90 70       	andi	r25, 0x00	; 0
    386c:	95 95       	asr	r25
    386e:	87 95       	ror	r24
    3870:	95 95       	asr	r25
    3872:	87 95       	ror	r24
    3874:	98 2f       	mov	r25, r24
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	64 e0       	ldi	r22, 0x04	; 4
    387a:	49 2f       	mov	r20, r25
    387c:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3880:	fe 01       	movw	r30, r28
    3882:	ed 59       	subi	r30, 0x9D	; 157
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	80 81       	ld	r24, Z
    3888:	88 2f       	mov	r24, r24
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	88 70       	andi	r24, 0x08	; 8
    388e:	90 70       	andi	r25, 0x00	; 0
    3890:	95 95       	asr	r25
    3892:	87 95       	ror	r24
    3894:	95 95       	asr	r25
    3896:	87 95       	ror	r24
    3898:	95 95       	asr	r25
    389a:	87 95       	ror	r24
    389c:	98 2f       	mov	r25, r24
    389e:	80 e0       	ldi	r24, 0x00	; 0
    38a0:	65 e0       	ldi	r22, 0x05	; 5
    38a2:	49 2f       	mov	r20, r25
    38a4:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	a0 e8       	ldi	r26, 0x80	; 128
    38ae:	bf e3       	ldi	r27, 0x3F	; 63
    38b0:	89 8f       	std	Y+25, r24	; 0x19
    38b2:	9a 8f       	std	Y+26, r25	; 0x1a
    38b4:	ab 8f       	std	Y+27, r26	; 0x1b
    38b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38b8:	69 8d       	ldd	r22, Y+25	; 0x19
    38ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	4a e7       	ldi	r20, 0x7A	; 122
    38c6:	55 e4       	ldi	r21, 0x45	; 69
    38c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	8d 8b       	std	Y+21, r24	; 0x15
    38d2:	9e 8b       	std	Y+22, r25	; 0x16
    38d4:	af 8b       	std	Y+23, r26	; 0x17
    38d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38d8:	6d 89       	ldd	r22, Y+21	; 0x15
    38da:	7e 89       	ldd	r23, Y+22	; 0x16
    38dc:	8f 89       	ldd	r24, Y+23	; 0x17
    38de:	98 8d       	ldd	r25, Y+24	; 0x18
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	40 e8       	ldi	r20, 0x80	; 128
    38e6:	5f e3       	ldi	r21, 0x3F	; 63
    38e8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    38ec:	88 23       	and	r24, r24
    38ee:	2c f4       	brge	.+10     	; 0x38fa <LCD_displayCharacter+0x75e>
		__ticks = 1;
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	9c 8b       	std	Y+20, r25	; 0x14
    38f6:	8b 8b       	std	Y+19, r24	; 0x13
    38f8:	3f c0       	rjmp	.+126    	; 0x3978 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    38fa:	6d 89       	ldd	r22, Y+21	; 0x15
    38fc:	7e 89       	ldd	r23, Y+22	; 0x16
    38fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3900:	98 8d       	ldd	r25, Y+24	; 0x18
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	3f ef       	ldi	r19, 0xFF	; 255
    3906:	4f e7       	ldi	r20, 0x7F	; 127
    3908:	57 e4       	ldi	r21, 0x47	; 71
    390a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    390e:	18 16       	cp	r1, r24
    3910:	4c f5       	brge	.+82     	; 0x3964 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3912:	69 8d       	ldd	r22, Y+25	; 0x19
    3914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e2       	ldi	r20, 0x20	; 32
    3920:	51 e4       	ldi	r21, 0x41	; 65
    3922:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	bc 01       	movw	r22, r24
    392c:	cd 01       	movw	r24, r26
    392e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	9c 8b       	std	Y+20, r25	; 0x14
    3938:	8b 8b       	std	Y+19, r24	; 0x13
    393a:	0f c0       	rjmp	.+30     	; 0x395a <LCD_displayCharacter+0x7be>
    393c:	80 e9       	ldi	r24, 0x90	; 144
    393e:	91 e0       	ldi	r25, 0x01	; 1
    3940:	9a 8b       	std	Y+18, r25	; 0x12
    3942:	89 8b       	std	Y+17, r24	; 0x11
    3944:	89 89       	ldd	r24, Y+17	; 0x11
    3946:	9a 89       	ldd	r25, Y+18	; 0x12
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	f1 f7       	brne	.-4      	; 0x3948 <LCD_displayCharacter+0x7ac>
    394c:	9a 8b       	std	Y+18, r25	; 0x12
    394e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3950:	8b 89       	ldd	r24, Y+19	; 0x13
    3952:	9c 89       	ldd	r25, Y+20	; 0x14
    3954:	01 97       	sbiw	r24, 0x01	; 1
    3956:	9c 8b       	std	Y+20, r25	; 0x14
    3958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395a:	8b 89       	ldd	r24, Y+19	; 0x13
    395c:	9c 89       	ldd	r25, Y+20	; 0x14
    395e:	00 97       	sbiw	r24, 0x00	; 0
    3960:	69 f7       	brne	.-38     	; 0x393c <LCD_displayCharacter+0x7a0>
    3962:	14 c0       	rjmp	.+40     	; 0x398c <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3964:	6d 89       	ldd	r22, Y+21	; 0x15
    3966:	7e 89       	ldd	r23, Y+22	; 0x16
    3968:	8f 89       	ldd	r24, Y+23	; 0x17
    396a:	98 8d       	ldd	r25, Y+24	; 0x18
    396c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	9c 8b       	std	Y+20, r25	; 0x14
    3976:	8b 8b       	std	Y+19, r24	; 0x13
    3978:	8b 89       	ldd	r24, Y+19	; 0x13
    397a:	9c 89       	ldd	r25, Y+20	; 0x14
    397c:	98 8b       	std	Y+16, r25	; 0x10
    397e:	8f 87       	std	Y+15, r24	; 0x0f
    3980:	8f 85       	ldd	r24, Y+15	; 0x0f
    3982:	98 89       	ldd	r25, Y+16	; 0x10
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <LCD_displayCharacter+0x7e8>
    3988:	98 8b       	std	Y+16, r25	; 0x10
    398a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	61 e0       	ldi	r22, 0x01	; 1
    3990:	40 e0       	ldi	r20, 0x00	; 0
    3992:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	a0 e8       	ldi	r26, 0x80	; 128
    399c:	bf e3       	ldi	r27, 0x3F	; 63
    399e:	8b 87       	std	Y+11, r24	; 0x0b
    39a0:	9c 87       	std	Y+12, r25	; 0x0c
    39a2:	ad 87       	std	Y+13, r26	; 0x0d
    39a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	4a e7       	ldi	r20, 0x7A	; 122
    39b4:	55 e4       	ldi	r21, 0x45	; 69
    39b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	8f 83       	std	Y+7, r24	; 0x07
    39c0:	98 87       	std	Y+8, r25	; 0x08
    39c2:	a9 87       	std	Y+9, r26	; 0x09
    39c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c6:	6f 81       	ldd	r22, Y+7	; 0x07
    39c8:	78 85       	ldd	r23, Y+8	; 0x08
    39ca:	89 85       	ldd	r24, Y+9	; 0x09
    39cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	40 e8       	ldi	r20, 0x80	; 128
    39d4:	5f e3       	ldi	r21, 0x3F	; 63
    39d6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    39da:	88 23       	and	r24, r24
    39dc:	2c f4       	brge	.+10     	; 0x39e8 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	9e 83       	std	Y+6, r25	; 0x06
    39e4:	8d 83       	std	Y+5, r24	; 0x05
    39e6:	3f c0       	rjmp	.+126    	; 0x3a66 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    39e8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ea:	78 85       	ldd	r23, Y+8	; 0x08
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	3f ef       	ldi	r19, 0xFF	; 255
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	57 e4       	ldi	r21, 0x47	; 71
    39f8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	4c f5       	brge	.+82     	; 0x3a52 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e2       	ldi	r20, 0x20	; 32
    3a0e:	51 e4       	ldi	r21, 0x41	; 65
    3a10:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	9e 83       	std	Y+6, r25	; 0x06
    3a26:	8d 83       	std	Y+5, r24	; 0x05
    3a28:	0f c0       	rjmp	.+30     	; 0x3a48 <LCD_displayCharacter+0x8ac>
    3a2a:	80 e9       	ldi	r24, 0x90	; 144
    3a2c:	91 e0       	ldi	r25, 0x01	; 1
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	9c 81       	ldd	r25, Y+4	; 0x04
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	f1 f7       	brne	.-4      	; 0x3a36 <LCD_displayCharacter+0x89a>
    3a3a:	9c 83       	std	Y+4, r25	; 0x04
    3a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a40:	9e 81       	ldd	r25, Y+6	; 0x06
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	9e 83       	std	Y+6, r25	; 0x06
    3a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a48:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	69 f7       	brne	.-38     	; 0x3a2a <LCD_displayCharacter+0x88e>
    3a50:	14 c0       	rjmp	.+40     	; 0x3a7a <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a52:	6f 81       	ldd	r22, Y+7	; 0x07
    3a54:	78 85       	ldd	r23, Y+8	; 0x08
    3a56:	89 85       	ldd	r24, Y+9	; 0x09
    3a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	8d 81       	ldd	r24, Y+5	; 0x05
    3a68:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	9a 81       	ldd	r25, Y+2	; 0x02
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <LCD_displayCharacter+0x8d6>
    3a76:	9a 83       	std	Y+2, r25	; 0x02
    3a78:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3a7a:	cd 59       	subi	r28, 0x9D	; 157
    3a7c:	df 4f       	sbci	r29, 0xFF	; 255
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	cf 91       	pop	r28
    3a8a:	df 91       	pop	r29
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	08 95       	ret

00003a92 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	00 d0       	rcall	.+0      	; 0x3a98 <LCD_displayString+0x6>
    3a98:	0f 92       	push	r0
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    3a9e:	9b 83       	std	Y+3, r25	; 0x03
    3aa0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3aa2:	19 82       	std	Y+1, r1	; 0x01
    3aa4:	0e c0       	rjmp	.+28     	; 0x3ac2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	28 2f       	mov	r18, r24
    3aaa:	30 e0       	ldi	r19, 0x00	; 0
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	e2 0f       	add	r30, r18
    3ab4:	f3 1f       	adc	r31, r19
    3ab6:	80 81       	ld	r24, Z
    3ab8:	0e 94 ce 18 	call	0x319c	; 0x319c <LCD_displayCharacter>
		i++;
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	8f 5f       	subi	r24, 0xFF	; 255
    3ac0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3ac2:	89 81       	ldd	r24, Y+1	; 0x01
    3ac4:	28 2f       	mov	r18, r24
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
    3ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aca:	9b 81       	ldd	r25, Y+3	; 0x03
    3acc:	fc 01       	movw	r30, r24
    3ace:	e2 0f       	add	r30, r18
    3ad0:	f3 1f       	adc	r31, r19
    3ad2:	80 81       	ld	r24, Z
    3ad4:	88 23       	and	r24, r24
    3ad6:	39 f7       	brne	.-50     	; 0x3aa6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	08 95       	ret

00003ae4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	00 d0       	rcall	.+0      	; 0x3aea <LCD_moveCursor+0x6>
    3aea:	00 d0       	rcall	.+0      	; 0x3aec <LCD_moveCursor+0x8>
    3aec:	0f 92       	push	r0
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	8a 83       	std	Y+2, r24	; 0x02
    3af4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	28 2f       	mov	r18, r24
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	3d 83       	std	Y+5, r19	; 0x05
    3afe:	2c 83       	std	Y+4, r18	; 0x04
    3b00:	8c 81       	ldd	r24, Y+4	; 0x04
    3b02:	9d 81       	ldd	r25, Y+5	; 0x05
    3b04:	81 30       	cpi	r24, 0x01	; 1
    3b06:	91 05       	cpc	r25, r1
    3b08:	c1 f0       	breq	.+48     	; 0x3b3a <LCD_moveCursor+0x56>
    3b0a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b0c:	3d 81       	ldd	r19, Y+5	; 0x05
    3b0e:	22 30       	cpi	r18, 0x02	; 2
    3b10:	31 05       	cpc	r19, r1
    3b12:	2c f4       	brge	.+10     	; 0x3b1e <LCD_moveCursor+0x3a>
    3b14:	8c 81       	ldd	r24, Y+4	; 0x04
    3b16:	9d 81       	ldd	r25, Y+5	; 0x05
    3b18:	00 97       	sbiw	r24, 0x00	; 0
    3b1a:	61 f0       	breq	.+24     	; 0x3b34 <LCD_moveCursor+0x50>
    3b1c:	19 c0       	rjmp	.+50     	; 0x3b50 <LCD_moveCursor+0x6c>
    3b1e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b20:	3d 81       	ldd	r19, Y+5	; 0x05
    3b22:	22 30       	cpi	r18, 0x02	; 2
    3b24:	31 05       	cpc	r19, r1
    3b26:	69 f0       	breq	.+26     	; 0x3b42 <LCD_moveCursor+0x5e>
    3b28:	8c 81       	ldd	r24, Y+4	; 0x04
    3b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b2c:	83 30       	cpi	r24, 0x03	; 3
    3b2e:	91 05       	cpc	r25, r1
    3b30:	61 f0       	breq	.+24     	; 0x3b4a <LCD_moveCursor+0x66>
    3b32:	0e c0       	rjmp	.+28     	; 0x3b50 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	89 83       	std	Y+1, r24	; 0x01
    3b38:	0b c0       	rjmp	.+22     	; 0x3b50 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3c:	80 5c       	subi	r24, 0xC0	; 192
    3b3e:	89 83       	std	Y+1, r24	; 0x01
    3b40:	07 c0       	rjmp	.+14     	; 0x3b50 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	80 5f       	subi	r24, 0xF0	; 240
    3b46:	89 83       	std	Y+1, r24	; 0x01
    3b48:	03 c0       	rjmp	.+6      	; 0x3b50 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4c:	80 5b       	subi	r24, 0xB0	; 176
    3b4e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	80 68       	ori	r24, 0x80	; 128
    3b54:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_sendCommand>
}
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <LCD_displayStringRowColumn+0x6>
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <LCD_displayStringRowColumn+0x8>
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	89 83       	std	Y+1, r24	; 0x01
    3b76:	6a 83       	std	Y+2, r22	; 0x02
    3b78:	5c 83       	std	Y+4, r21	; 0x04
    3b7a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	6a 81       	ldd	r22, Y+2	; 0x02
    3b80:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3b84:	8b 81       	ldd	r24, Y+3	; 0x03
    3b86:	9c 81       	ldd	r25, Y+4	; 0x04
    3b88:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
}
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	cf 91       	pop	r28
    3b96:	df 91       	pop	r29
    3b98:	08 95       	ret

00003b9a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3b9a:	df 93       	push	r29
    3b9c:	cf 93       	push	r28
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	62 97       	sbiw	r28, 0x12	; 18
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	f8 94       	cli
    3ba8:	de bf       	out	0x3e, r29	; 62
    3baa:	0f be       	out	0x3f, r0	; 63
    3bac:	cd bf       	out	0x3d, r28	; 61
    3bae:	9a 8b       	std	Y+18, r25	; 0x12
    3bb0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3bb2:	89 89       	ldd	r24, Y+17	; 0x11
    3bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    3bb6:	9e 01       	movw	r18, r28
    3bb8:	2f 5f       	subi	r18, 0xFF	; 255
    3bba:	3f 4f       	sbci	r19, 0xFF	; 255
    3bbc:	b9 01       	movw	r22, r18
    3bbe:	4a e0       	ldi	r20, 0x0A	; 10
    3bc0:	50 e0       	ldi	r21, 0x00	; 0
    3bc2:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <itoa>
   LCD_displayString(buff); /* Display the string */
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	01 96       	adiw	r24, 0x01	; 1
    3bca:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
}
    3bce:	62 96       	adiw	r28, 0x12	; 18
    3bd0:	0f b6       	in	r0, 0x3f	; 63
    3bd2:	f8 94       	cli
    3bd4:	de bf       	out	0x3e, r29	; 62
    3bd6:	0f be       	out	0x3f, r0	; 63
    3bd8:	cd bf       	out	0x3d, r28	; 61
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	0e 94 53 14 	call	0x28a6	; 0x28a6 <LCD_sendCommand>
}
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	08 95       	ret

00003bf4 <LCD_floatToString>:

/*
 * Description :
 * to display float numbers
 */
void LCD_floatToString(double num){
    3bf4:	0f 93       	push	r16
    3bf6:	1f 93       	push	r17
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	68 97       	sbiw	r28, 0x18	; 24
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	6d 8b       	std	Y+21, r22	; 0x15
    3c0e:	7e 8b       	std	Y+22, r23	; 0x16
    3c10:	8f 8b       	std	Y+23, r24	; 0x17
    3c12:	98 8f       	std	Y+24, r25	; 0x18
	char buffer[20];
	dtostrf(num,5,3,buffer);
    3c14:	8d 89       	ldd	r24, Y+21	; 0x15
    3c16:	9e 89       	ldd	r25, Y+22	; 0x16
    3c18:	af 89       	ldd	r26, Y+23	; 0x17
    3c1a:	b8 8d       	ldd	r27, Y+24	; 0x18
    3c1c:	bc 01       	movw	r22, r24
    3c1e:	cd 01       	movw	r24, r26
    3c20:	45 e0       	ldi	r20, 0x05	; 5
    3c22:	23 e0       	ldi	r18, 0x03	; 3
    3c24:	fe 01       	movw	r30, r28
    3c26:	31 96       	adiw	r30, 0x01	; 1
    3c28:	8f 01       	movw	r16, r30
    3c2a:	0e 94 c7 24 	call	0x498e	; 0x498e <dtostrf>
	LCD_displayString(buffer);
    3c2e:	ce 01       	movw	r24, r28
    3c30:	01 96       	adiw	r24, 0x01	; 1
    3c32:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>

}
    3c36:	68 96       	adiw	r28, 0x18	; 24
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	08 95       	ret

00003c4c <LED_init>:
#include "led.h"

#include "../../mcal/atmega32_gpio.h"

void LED_init(LED* led)
{
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	00 d0       	rcall	.+0      	; 0x3c52 <LED_init+0x6>
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
    3c56:	9a 83       	std	Y+2, r25	; 0x02
    3c58:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(led->portID, led->pinID, PIN_OUTPUT);
    3c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c5e:	80 81       	ld	r24, Z
    3c60:	e9 81       	ldd	r30, Y+1	; 0x01
    3c62:	fa 81       	ldd	r31, Y+2	; 0x02
    3c64:	91 81       	ldd	r25, Z+1	; 0x01
    3c66:	69 2f       	mov	r22, r25
    3c68:	41 e0       	ldi	r20, 0x01	; 1
    3c6a:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
}
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <LED_on>:
void LED_on(LED* led)
{
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <LED_on+0x6>
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	9a 83       	std	Y+2, r25	; 0x02
    3c84:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(led->portID, led->pinID, LOGIC_HIGH);
    3c86:	e9 81       	ldd	r30, Y+1	; 0x01
    3c88:	fa 81       	ldd	r31, Y+2	; 0x02
    3c8a:	80 81       	ld	r24, Z
    3c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c90:	91 81       	ldd	r25, Z+1	; 0x01
    3c92:	69 2f       	mov	r22, r25
    3c94:	41 e0       	ldi	r20, 0x01	; 1
    3c96:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <LED_off>:
void LED_off(LED* led)
{
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <LED_off+0x6>
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	9a 83       	std	Y+2, r25	; 0x02
    3cb0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(led->portID, led->pinID, LOGIC_LOW);
    3cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb6:	80 81       	ld	r24, Z
    3cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    3cba:	fa 81       	ldd	r31, Y+2	; 0x02
    3cbc:	91 81       	ldd	r25, Z+1	; 0x01
    3cbe:	69 2f       	mov	r22, r25
    3cc0:	40 e0       	ldi	r20, 0x00	; 0
    3cc2:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	cf 91       	pop	r28
    3ccc:	df 91       	pop	r29
    3cce:	08 95       	ret

00003cd0 <SOLENOID_init>:
#include "solenoid_lock.h"

#include "../../mcal/atmega32_gpio.h"

void SOLENOID_init(SolenoidLock* lock)
{
    3cd0:	df 93       	push	r29
    3cd2:	cf 93       	push	r28
    3cd4:	00 d0       	rcall	.+0      	; 0x3cd6 <SOLENOID_init+0x6>
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
    3cda:	9a 83       	std	Y+2, r25	; 0x02
    3cdc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(lock->portID, lock->pinID, PIN_OUTPUT);
    3cde:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce2:	80 81       	ld	r24, Z
    3ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce8:	91 81       	ldd	r25, Z+1	; 0x01
    3cea:	69 2f       	mov	r22, r25
    3cec:	41 e0       	ldi	r20, 0x01	; 1
    3cee:	0e 94 42 08 	call	0x1084	; 0x1084 <GPIO_setupPinDirection>
}
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <SOLENOID_on>:
void SOLENOID_on(SolenoidLock* lock)
{
    3cfc:	df 93       	push	r29
    3cfe:	cf 93       	push	r28
    3d00:	00 d0       	rcall	.+0      	; 0x3d02 <SOLENOID_on+0x6>
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	9a 83       	std	Y+2, r25	; 0x02
    3d08:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(lock->portID, lock->pinID, LOGIC_HIGH);
    3d0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3d0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3d0e:	80 81       	ld	r24, Z
    3d10:	e9 81       	ldd	r30, Y+1	; 0x01
    3d12:	fa 81       	ldd	r31, Y+2	; 0x02
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	69 2f       	mov	r22, r25
    3d18:	41 e0       	ldi	r20, 0x01	; 1
    3d1a:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	cf 91       	pop	r28
    3d24:	df 91       	pop	r29
    3d26:	08 95       	ret

00003d28 <SOLENOID_off>:
void SOLENOID_off(SolenoidLock* lock)
{
    3d28:	df 93       	push	r29
    3d2a:	cf 93       	push	r28
    3d2c:	00 d0       	rcall	.+0      	; 0x3d2e <SOLENOID_off+0x6>
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
    3d32:	9a 83       	std	Y+2, r25	; 0x02
    3d34:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(lock->portID, lock->pinID, LOGIC_LOW);
    3d36:	e9 81       	ldd	r30, Y+1	; 0x01
    3d38:	fa 81       	ldd	r31, Y+2	; 0x02
    3d3a:	80 81       	ld	r24, Z
    3d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d40:	91 81       	ldd	r25, Z+1	; 0x01
    3d42:	69 2f       	mov	r22, r25
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	0e 94 2d 09 	call	0x125a	; 0x125a <GPIO_writePin>
}
    3d4a:	0f 90       	pop	r0
    3d4c:	0f 90       	pop	r0
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	08 95       	ret

00003d54 <SOLENOID_read>:
uint8 SOLENOID_read(SolenoidLock* lock)
{
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	00 d0       	rcall	.+0      	; 0x3d5a <SOLENOID_read+0x6>
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	9a 83       	std	Y+2, r25	; 0x02
    3d60:	89 83       	std	Y+1, r24	; 0x01
	return GPIO_readPin(lock->portID, lock->pinID);
    3d62:	e9 81       	ldd	r30, Y+1	; 0x01
    3d64:	fa 81       	ldd	r31, Y+2	; 0x02
    3d66:	80 81       	ld	r24, Z
    3d68:	e9 81       	ldd	r30, Y+1	; 0x01
    3d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	69 2f       	mov	r22, r25
    3d70:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_readPin>
}
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	cf 91       	pop	r28
    3d7a:	df 91       	pop	r29
    3d7c:	08 95       	ret

00003d7e <floodHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void floodHandler()
{
    3d7e:	df 93       	push	r29
    3d80:	cf 93       	push	r28
    3d82:	cd b7       	in	r28, 0x3d	; 61
    3d84:	de b7       	in	r29, 0x3e	; 62
	if (WATER_read())
    3d86:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <WATER_read>
    3d8a:	88 23       	and	r24, r24
    3d8c:	79 f0       	breq	.+30     	; 0x3dac <floodHandler+0x2e>
	{
		DCMOTOR_on(&g_waterPump2);
    3d8e:	81 ef       	ldi	r24, 0xF1	; 241
    3d90:	91 e0       	ldi	r25, 0x01	; 1
    3d92:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <DCMOTOR_on>
		g_threatFlag |= (1 << FLOOD_THREAT);
    3d96:	80 91 27 02 	lds	r24, 0x0227
    3d9a:	84 60       	ori	r24, 0x04	; 4
    3d9c:	80 93 27 02 	sts	0x0227, r24
		INTERRUPT_INT2_init(floodHandler, FALLING);
    3da0:	8f eb       	ldi	r24, 0xBF	; 191
    3da2:	9e e1       	ldi	r25, 0x1E	; 30
    3da4:	62 e0       	ldi	r22, 0x02	; 2
    3da6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <INTERRUPT_INT2_init>
    3daa:	0e c0       	rjmp	.+28     	; 0x3dc8 <floodHandler+0x4a>
	}
	else
	{
		DCMOTOR_off(&g_waterPump2);
    3dac:	81 ef       	ldi	r24, 0xF1	; 241
    3dae:	91 e0       	ldi	r25, 0x01	; 1
    3db0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <DCMOTOR_off>
		g_threatFlag &= ~(1 << FLOOD_THREAT);
    3db4:	80 91 27 02 	lds	r24, 0x0227
    3db8:	8b 7f       	andi	r24, 0xFB	; 251
    3dba:	80 93 27 02 	sts	0x0227, r24
		INTERRUPT_INT2_init(floodHandler, RISING);
    3dbe:	8f eb       	ldi	r24, 0xBF	; 191
    3dc0:	9e e1       	ldi	r25, 0x1E	; 30
    3dc2:	63 e0       	ldi	r22, 0x03	; 3
    3dc4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <INTERRUPT_INT2_init>
	}
}
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	08 95       	ret

00003dce <WATER_FLOOD_SYSTEM_Init>:

void WATER_FLOOD_SYSTEM_Init()
{
    3dce:	df 93       	push	r29
    3dd0:	cf 93       	push	r28
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Water Flood System */
	WATER_init();
    3dd6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <WATER_init>
	INTERRUPT_INT2_init(floodHandler, RISING);
    3dda:	8f eb       	ldi	r24, 0xBF	; 191
    3ddc:	9e e1       	ldi	r25, 0x1E	; 30
    3dde:	63 e0       	ldi	r22, 0x03	; 3
    3de0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <INTERRUPT_INT2_init>
	DCMOTOR_init(&g_waterPump2);
    3de4:	81 ef       	ldi	r24, 0xF1	; 241
    3de6:	91 e0       	ldi	r25, 0x01	; 1
    3de8:	0e 94 45 12 	call	0x248a	; 0x248a <DCMOTOR_init>
}
    3dec:	cf 91       	pop	r28
    3dee:	df 91       	pop	r29
    3df0:	08 95       	ret

00003df2 <lockDoor>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

static void lockDoor()
{
    3df2:	df 93       	push	r29
    3df4:	cf 93       	push	r28
    3df6:	cd b7       	in	r28, 0x3d	; 61
    3df8:	de b7       	in	r29, 0x3e	; 62
	SOLENOID_on(&g_lock);
    3dfa:	83 ef       	ldi	r24, 0xF3	; 243
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <SOLENOID_on>
//	Comm_HandleSend(DOOR_CLOSED);
}
    3e02:	cf 91       	pop	r28
    3e04:	df 91       	pop	r29
    3e06:	08 95       	ret

00003e08 <unlockDoor>:

static void unlockDoor()
{
    3e08:	df 93       	push	r29
    3e0a:	cf 93       	push	r28
    3e0c:	cd b7       	in	r28, 0x3d	; 61
    3e0e:	de b7       	in	r29, 0x3e	; 62
	SOLENOID_off(&g_lock);
    3e10:	83 ef       	ldi	r24, 0xF3	; 243
    3e12:	91 e0       	ldi	r25, 0x01	; 1
    3e14:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <SOLENOID_off>
//	Comm_HandleSend(DOOR_OPENED);
}
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	08 95       	ret

00003e1e <setLcdDelay>:

static void setLcdDelay(uint8 seconds)
{
    3e1e:	df 93       	push	r29
    3e20:	cf 93       	push	r28
    3e22:	0f 92       	push	r0
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
    3e28:	89 83       	std	Y+1, r24	; 0x01
	g_lcdDelay = seconds;
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	80 93 22 02 	sts	0x0222, r24
	g_lcdDelayFlag = TRUE;
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	80 93 25 02 	sts	0x0225, r24
	TIMER2_on();
    3e36:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <TIMER2_on>
}
    3e3a:	0f 90       	pop	r0
    3e3c:	cf 91       	pop	r28
    3e3e:	df 91       	pop	r29
    3e40:	08 95       	ret

00003e42 <setMode>:

void setMode(PinMode mode, uint8 quickMsg)
{
    3e42:	df 93       	push	r29
    3e44:	cf 93       	push	r28
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	28 97       	sbiw	r28, 0x08	; 8
    3e4c:	0f b6       	in	r0, 0x3f	; 63
    3e4e:	f8 94       	cli
    3e50:	de bf       	out	0x3e, r29	; 62
    3e52:	0f be       	out	0x3f, r0	; 63
    3e54:	cd bf       	out	0x3d, r28	; 61
    3e56:	89 83       	std	Y+1, r24	; 0x01
    3e58:	6a 83       	std	Y+2, r22	; 0x02
	g_mode = mode;
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	80 93 24 02 	sts	0x0224, r24
	LCD_clearScreen();
    3e60:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <LCD_clearScreen>
	switch (mode)
    3e64:	89 81       	ldd	r24, Y+1	; 0x01
    3e66:	28 2f       	mov	r18, r24
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	38 87       	std	Y+8, r19	; 0x08
    3e6c:	2f 83       	std	Y+7, r18	; 0x07
    3e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    3e70:	98 85       	ldd	r25, Y+8	; 0x08
    3e72:	81 30       	cpi	r24, 0x01	; 1
    3e74:	91 05       	cpc	r25, r1
    3e76:	09 f4       	brne	.+2      	; 0x3e7a <setMode+0x38>
    3e78:	4d c0       	rjmp	.+154    	; 0x3f14 <setMode+0xd2>
    3e7a:	2f 81       	ldd	r18, Y+7	; 0x07
    3e7c:	38 85       	ldd	r19, Y+8	; 0x08
    3e7e:	22 30       	cpi	r18, 0x02	; 2
    3e80:	31 05       	cpc	r19, r1
    3e82:	2c f4       	brge	.+10     	; 0x3e8e <setMode+0x4c>
    3e84:	8f 81       	ldd	r24, Y+7	; 0x07
    3e86:	98 85       	ldd	r25, Y+8	; 0x08
    3e88:	00 97       	sbiw	r24, 0x00	; 0
    3e8a:	71 f0       	breq	.+28     	; 0x3ea8 <setMode+0x66>
    3e8c:	8a c0       	rjmp	.+276    	; 0x3fa2 <setMode+0x160>
    3e8e:	2f 81       	ldd	r18, Y+7	; 0x07
    3e90:	38 85       	ldd	r19, Y+8	; 0x08
    3e92:	22 30       	cpi	r18, 0x02	; 2
    3e94:	31 05       	cpc	r19, r1
    3e96:	09 f4       	brne	.+2      	; 0x3e9a <setMode+0x58>
    3e98:	44 c0       	rjmp	.+136    	; 0x3f22 <setMode+0xe0>
    3e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e9c:	98 85       	ldd	r25, Y+8	; 0x08
    3e9e:	83 30       	cpi	r24, 0x03	; 3
    3ea0:	91 05       	cpc	r25, r1
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <setMode+0x64>
    3ea4:	63 c0       	rjmp	.+198    	; 0x3f6c <setMode+0x12a>
    3ea6:	7d c0       	rjmp	.+250    	; 0x3fa2 <setMode+0x160>
	{
	case NORMAL_LOCKED:
		switch (quickMsg)
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	28 2f       	mov	r18, r24
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	3e 83       	std	Y+6, r19	; 0x06
    3eb0:	2d 83       	std	Y+5, r18	; 0x05
    3eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb6:	82 30       	cpi	r24, 0x02	; 2
    3eb8:	91 05       	cpc	r25, r1
    3eba:	a1 f0       	breq	.+40     	; 0x3ee4 <setMode+0xa2>
    3ebc:	2d 81       	ldd	r18, Y+5	; 0x05
    3ebe:	3e 81       	ldd	r19, Y+6	; 0x06
    3ec0:	23 30       	cpi	r18, 0x03	; 3
    3ec2:	31 05       	cpc	r19, r1
    3ec4:	b9 f0       	breq	.+46     	; 0x3ef4 <setMode+0xb2>
    3ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    3eca:	81 30       	cpi	r24, 0x01	; 1
    3ecc:	91 05       	cpc	r25, r1
    3ece:	e9 f4       	brne	.+58     	; 0x3f0a <setMode+0xc8>
		{
		case 1:
			LCD_displayString("Door Locked");
    3ed0:	80 e6       	ldi	r24, 0x60	; 96
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
			lockDoor();
    3ed8:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <lockDoor>
			setLcdDelay(2);
    3edc:	82 e0       	ldi	r24, 0x02	; 2
    3ede:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <setLcdDelay>
    3ee2:	5f c0       	rjmp	.+190    	; 0x3fa2 <setMode+0x160>
			break;
		case 2:
			LCD_displayString("Access Denied");
    3ee4:	8c e6       	ldi	r24, 0x6C	; 108
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
			setLcdDelay(2);
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <setLcdDelay>
    3ef2:	57 c0       	rjmp	.+174    	; 0x3fa2 <setMode+0x160>
			break;
		case 3:
			LCD_displayString("Access Granted");
    3ef4:	8a e7       	ldi	r24, 0x7A	; 122
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
			g_mode = NORMAL_UNLOCKED;
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	80 93 24 02 	sts	0x0224, r24
			setLcdDelay(2);
    3f02:	82 e0       	ldi	r24, 0x02	; 2
    3f04:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <setLcdDelay>
    3f08:	4c c0       	rjmp	.+152    	; 0x3fa2 <setMode+0x160>
			break;
		case 0:
		default:
			LCD_displayString("Enter Pin: ");
    3f0a:	89 e8       	ldi	r24, 0x89	; 137
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
    3f12:	47 c0       	rjmp	.+142    	; 0x3fa2 <setMode+0x160>
			break;
		}
		break;
	case NORMAL_UNLOCKED:
		unlockDoor();
    3f14:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <unlockDoor>
		LCD_displayString("Door Unlocked");
    3f18:	85 e9       	ldi	r24, 0x95	; 149
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
    3f20:	40 c0       	rjmp	.+128    	; 0x3fa2 <setMode+0x160>
		break;
	case CHANGE_OLD:
		switch (quickMsg)
    3f22:	8a 81       	ldd	r24, Y+2	; 0x02
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	3c 83       	std	Y+4, r19	; 0x04
    3f2a:	2b 83       	std	Y+3, r18	; 0x03
    3f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f30:	81 30       	cpi	r24, 0x01	; 1
    3f32:	91 05       	cpc	r25, r1
    3f34:	31 f0       	breq	.+12     	; 0x3f42 <setMode+0x100>
    3f36:	2b 81       	ldd	r18, Y+3	; 0x03
    3f38:	3c 81       	ldd	r19, Y+4	; 0x04
    3f3a:	22 30       	cpi	r18, 0x02	; 2
    3f3c:	31 05       	cpc	r19, r1
    3f3e:	31 f0       	breq	.+12     	; 0x3f4c <setMode+0x10a>
    3f40:	10 c0       	rjmp	.+32     	; 0x3f62 <setMode+0x120>
		{
		case 1:
			LCD_displayString("Incorrect Pin");
    3f42:	83 ea       	ldi	r24, 0xA3	; 163
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
    3f4a:	2b c0       	rjmp	.+86     	; 0x3fa2 <setMode+0x160>
			break;
		case 2:
			LCD_displayString("Correct Pin");
    3f4c:	81 eb       	ldi	r24, 0xB1	; 177
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
			g_mode = CHANGE_NEW;
    3f54:	83 e0       	ldi	r24, 0x03	; 3
    3f56:	80 93 24 02 	sts	0x0224, r24
			setLcdDelay(2);
    3f5a:	82 e0       	ldi	r24, 0x02	; 2
    3f5c:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <setLcdDelay>
    3f60:	20 c0       	rjmp	.+64     	; 0x3fa2 <setMode+0x160>
			break;
		case 0:
		default:
			LCD_displayString("Enter Old Pin: ");
    3f62:	8d eb       	ldi	r24, 0xBD	; 189
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
    3f6a:	1b c0       	rjmp	.+54     	; 0x3fa2 <setMode+0x160>
			break;
		}
		break;
	case CHANGE_NEW:
		if (quickMsg)
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	88 23       	and	r24, r24
    3f70:	a1 f0       	breq	.+40     	; 0x3f9a <setMode+0x158>
		{
			LCD_displayString("Pin Changed");
    3f72:	8d ec       	ldi	r24, 0xCD	; 205
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
			if (SOLENOID_read(&g_lock) == 1)
    3f7a:	83 ef       	ldi	r24, 0xF3	; 243
    3f7c:	91 e0       	ldi	r25, 0x01	; 1
    3f7e:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SOLENOID_read>
    3f82:	81 30       	cpi	r24, 0x01	; 1
    3f84:	19 f4       	brne	.+6      	; 0x3f8c <setMode+0x14a>
			{
				g_mode = NORMAL_LOCKED;
    3f86:	10 92 24 02 	sts	0x0224, r1
    3f8a:	03 c0       	rjmp	.+6      	; 0x3f92 <setMode+0x150>
			}
			else
			{
				g_mode = NORMAL_UNLOCKED;
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	80 93 24 02 	sts	0x0224, r24
			}
			setLcdDelay(2);
    3f92:	82 e0       	ldi	r24, 0x02	; 2
    3f94:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <setLcdDelay>
    3f98:	04 c0       	rjmp	.+8      	; 0x3fa2 <setMode+0x160>
		}
		else
		{
			LCD_displayString("Enter New Pin: ");
    3f9a:	89 ed       	ldi	r24, 0xD9	; 217
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <LCD_displayString>
		}
		break;
	default:
		break;
	}
	LCD_moveCursor(1, 0);
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <LCD_moveCursor>
	g_pinCount = 0;
    3faa:	10 92 21 02 	sts	0x0221, r1
}
    3fae:	28 96       	adiw	r28, 0x08	; 8
    3fb0:	0f b6       	in	r0, 0x3f	; 63
    3fb2:	f8 94       	cli
    3fb4:	de bf       	out	0x3e, r29	; 62
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	cd bf       	out	0x3d, r28	; 61
    3fba:	cf 91       	pop	r28
    3fbc:	df 91       	pop	r29
    3fbe:	08 95       	ret

00003fc0 <lcdDelayHandler>:

static void lcdDelayHandler()
{
    3fc0:	df 93       	push	r29
    3fc2:	cf 93       	push	r28
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
	g_lcdTimerCount++;
    3fc8:	80 91 1b 02 	lds	r24, 0x021B
    3fcc:	90 91 1c 02 	lds	r25, 0x021C
    3fd0:	01 96       	adiw	r24, 0x01	; 1
    3fd2:	90 93 1c 02 	sts	0x021C, r25
    3fd6:	80 93 1b 02 	sts	0x021B, r24
	if (g_lcdTimerCount == g_lcdDelay * 30)
    3fda:	80 91 22 02 	lds	r24, 0x0222
    3fde:	28 2f       	mov	r18, r24
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	c9 01       	movw	r24, r18
    3fe4:	88 0f       	add	r24, r24
    3fe6:	99 1f       	adc	r25, r25
    3fe8:	82 0f       	add	r24, r18
    3fea:	93 1f       	adc	r25, r19
    3fec:	9c 01       	movw	r18, r24
    3fee:	22 0f       	add	r18, r18
    3ff0:	33 1f       	adc	r19, r19
    3ff2:	22 0f       	add	r18, r18
    3ff4:	33 1f       	adc	r19, r19
    3ff6:	82 0f       	add	r24, r18
    3ff8:	93 1f       	adc	r25, r19
    3ffa:	88 0f       	add	r24, r24
    3ffc:	99 1f       	adc	r25, r25
    3ffe:	9c 01       	movw	r18, r24
    4000:	80 91 1b 02 	lds	r24, 0x021B
    4004:	90 91 1c 02 	lds	r25, 0x021C
    4008:	28 17       	cp	r18, r24
    400a:	39 07       	cpc	r19, r25
    400c:	69 f4       	brne	.+26     	; 0x4028 <lcdDelayHandler+0x68>
	{
		TIMER2_off();
    400e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <TIMER2_off>
		g_lcdDelayFlag = FALSE;
    4012:	10 92 25 02 	sts	0x0225, r1
		g_lcdTimerCount = 0;
    4016:	10 92 1c 02 	sts	0x021C, r1
    401a:	10 92 1b 02 	sts	0x021B, r1
		setMode(g_mode, 0);
    401e:	80 91 24 02 	lds	r24, 0x0224
    4022:	60 e0       	ldi	r22, 0x00	; 0
    4024:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
	}
}
    4028:	cf 91       	pop	r28
    402a:	df 91       	pop	r29
    402c:	08 95       	ret

0000402e <setPin>:

static void setPin()
{
    402e:	df 93       	push	r29
    4030:	cf 93       	push	r28
    4032:	0f 92       	push	r0
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	EEPROM_write(0x000, 1);
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	61 e0       	ldi	r22, 0x01	; 1
    403e:	0e 94 ed 07 	call	0xfda	; 0xfda <EEPROM_write>
	for (i = 0; i < 4; i++)
    4042:	19 82       	std	Y+1, r1	; 0x01
    4044:	21 c0       	rjmp	.+66     	; 0x4088 <setPin+0x5a>
	{
		EEPROM_write(i + 1, g_enteredPin[i]);
    4046:	89 81       	ldd	r24, Y+1	; 0x01
    4048:	88 2f       	mov	r24, r24
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	01 96       	adiw	r24, 0x01	; 1
    404e:	ac 01       	movw	r20, r24
    4050:	89 81       	ldd	r24, Y+1	; 0x01
    4052:	88 2f       	mov	r24, r24
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	fc 01       	movw	r30, r24
    4058:	e7 5d       	subi	r30, 0xD7	; 215
    405a:	fd 4f       	sbci	r31, 0xFD	; 253
    405c:	20 81       	ld	r18, Z
    405e:	ca 01       	movw	r24, r20
    4060:	62 2f       	mov	r22, r18
    4062:	0e 94 ed 07 	call	0xfda	; 0xfda <EEPROM_write>
		g_correctPin[i] = g_enteredPin[i];
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	28 2f       	mov	r18, r24
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	88 2f       	mov	r24, r24
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	fc 01       	movw	r30, r24
    4074:	e7 5d       	subi	r30, 0xD7	; 215
    4076:	fd 4f       	sbci	r31, 0xFD	; 253
    4078:	80 81       	ld	r24, Z
    407a:	f9 01       	movw	r30, r18
    407c:	e3 5e       	subi	r30, 0xE3	; 227
    407e:	fd 4f       	sbci	r31, 0xFD	; 253
    4080:	80 83       	st	Z, r24

static void setPin()
{
	uint8 i;
	EEPROM_write(0x000, 1);
	for (i = 0; i < 4; i++)
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	8f 5f       	subi	r24, 0xFF	; 255
    4086:	89 83       	std	Y+1, r24	; 0x01
    4088:	89 81       	ldd	r24, Y+1	; 0x01
    408a:	84 30       	cpi	r24, 0x04	; 4
    408c:	e0 f2       	brcs	.-72     	; 0x4046 <setPin+0x18>
	{
		EEPROM_write(i + 1, g_enteredPin[i]);
		g_correctPin[i] = g_enteredPin[i];
	}
	g_pinCount = 0;
    408e:	10 92 21 02 	sts	0x0221, r1
	setMode(CHANGE_NEW, 1);
    4092:	83 e0       	ldi	r24, 0x03	; 3
    4094:	61 e0       	ldi	r22, 0x01	; 1
    4096:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
}
    409a:	0f 90       	pop	r0
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <getPin>:

static void getPin()
{
    40a2:	0f 93       	push	r16
    40a4:	1f 93       	push	r17
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	00 d0       	rcall	.+0      	; 0x40ac <getPin+0xa>
    40ac:	cd b7       	in	r28, 0x3d	; 61
    40ae:	de b7       	in	r29, 0x3e	; 62
	uint8 pinChanged = EEPROM_read(0x000);
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0e 94 1d 08 	call	0x103a	; 0x103a <EEPROM_read>
    40b8:	8a 83       	std	Y+2, r24	; 0x02
	if (pinChanged == 1)
    40ba:	8a 81       	ldd	r24, Y+2	; 0x02
    40bc:	81 30       	cpi	r24, 0x01	; 1
    40be:	c1 f4       	brne	.+48     	; 0x40f0 <getPin+0x4e>
	{
		uint8 i;
		for (i = 1; i <= 4; i++)
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	89 83       	std	Y+1, r24	; 0x01
    40c4:	12 c0       	rjmp	.+36     	; 0x40ea <getPin+0x48>
		{
			g_correctPin[i - 1] = EEPROM_read(i);
    40c6:	89 81       	ldd	r24, Y+1	; 0x01
    40c8:	88 2f       	mov	r24, r24
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	8c 01       	movw	r16, r24
    40ce:	01 50       	subi	r16, 0x01	; 1
    40d0:	10 40       	sbci	r17, 0x00	; 0
    40d2:	89 81       	ldd	r24, Y+1	; 0x01
    40d4:	88 2f       	mov	r24, r24
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	0e 94 1d 08 	call	0x103a	; 0x103a <EEPROM_read>
    40dc:	f8 01       	movw	r30, r16
    40de:	e3 5e       	subi	r30, 0xE3	; 227
    40e0:	fd 4f       	sbci	r31, 0xFD	; 253
    40e2:	80 83       	st	Z, r24
{
	uint8 pinChanged = EEPROM_read(0x000);
	if (pinChanged == 1)
	{
		uint8 i;
		for (i = 1; i <= 4; i++)
    40e4:	89 81       	ldd	r24, Y+1	; 0x01
    40e6:	8f 5f       	subi	r24, 0xFF	; 255
    40e8:	89 83       	std	Y+1, r24	; 0x01
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	85 30       	cpi	r24, 0x05	; 5
    40ee:	58 f3       	brcs	.-42     	; 0x40c6 <getPin+0x24>
		{
			g_correctPin[i - 1] = EEPROM_read(i);
		}
	}
}
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	cf 91       	pop	r28
    40f6:	df 91       	pop	r29
    40f8:	1f 91       	pop	r17
    40fa:	0f 91       	pop	r16
    40fc:	08 95       	ret

000040fe <checkPin>:

static void checkPin()
{
    40fe:	df 93       	push	r29
    4100:	cf 93       	push	r28
    4102:	00 d0       	rcall	.+0      	; 0x4104 <checkPin+0x6>
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	boolean isValid = TRUE;
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	89 83       	std	Y+1, r24	; 0x01
	for (i = 0; i < 4; i++)
    410c:	1a 82       	std	Y+2, r1	; 0x02
    410e:	14 c0       	rjmp	.+40     	; 0x4138 <checkPin+0x3a>
	{
		if (g_enteredPin[i] != g_correctPin[i])
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	88 2f       	mov	r24, r24
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	fc 01       	movw	r30, r24
    4118:	e7 5d       	subi	r30, 0xD7	; 215
    411a:	fd 4f       	sbci	r31, 0xFD	; 253
    411c:	20 81       	ld	r18, Z
    411e:	8a 81       	ldd	r24, Y+2	; 0x02
    4120:	88 2f       	mov	r24, r24
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	fc 01       	movw	r30, r24
    4126:	e3 5e       	subi	r30, 0xE3	; 227
    4128:	fd 4f       	sbci	r31, 0xFD	; 253
    412a:	80 81       	ld	r24, Z
    412c:	28 17       	cp	r18, r24
    412e:	09 f0       	breq	.+2      	; 0x4132 <checkPin+0x34>
			isValid = FALSE;
    4130:	19 82       	std	Y+1, r1	; 0x01

static void checkPin()
{
	uint8 i;
	boolean isValid = TRUE;
	for (i = 0; i < 4; i++)
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	8f 5f       	subi	r24, 0xFF	; 255
    4136:	8a 83       	std	Y+2, r24	; 0x02
    4138:	8a 81       	ldd	r24, Y+2	; 0x02
    413a:	84 30       	cpi	r24, 0x04	; 4
    413c:	48 f3       	brcs	.-46     	; 0x4110 <checkPin+0x12>
	{
		if (g_enteredPin[i] != g_correctPin[i])
			isValid = FALSE;
	}
	LCD_clearScreen();
    413e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <LCD_clearScreen>
	if (isValid == TRUE)
    4142:	89 81       	ldd	r24, Y+1	; 0x01
    4144:	81 30       	cpi	r24, 0x01	; 1
    4146:	71 f4       	brne	.+28     	; 0x4164 <checkPin+0x66>
	{
		if (g_mode == CHANGE_OLD)
    4148:	80 91 24 02 	lds	r24, 0x0224
    414c:	82 30       	cpi	r24, 0x02	; 2
    414e:	29 f4       	brne	.+10     	; 0x415a <checkPin+0x5c>
		{
			setMode(CHANGE_OLD, 2);
    4150:	82 e0       	ldi	r24, 0x02	; 2
    4152:	62 e0       	ldi	r22, 0x02	; 2
    4154:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
    4158:	12 c0       	rjmp	.+36     	; 0x417e <checkPin+0x80>
		}
		else
		{
			setMode(NORMAL_LOCKED, 3);
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	63 e0       	ldi	r22, 0x03	; 3
    415e:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
    4162:	0d c0       	rjmp	.+26     	; 0x417e <checkPin+0x80>
		}
	}
	else
	{
		if (g_mode == CHANGE_OLD)
    4164:	80 91 24 02 	lds	r24, 0x0224
    4168:	82 30       	cpi	r24, 0x02	; 2
    416a:	29 f4       	brne	.+10     	; 0x4176 <checkPin+0x78>
		{
			setMode(CHANGE_OLD, 1);
    416c:	82 e0       	ldi	r24, 0x02	; 2
    416e:	61 e0       	ldi	r22, 0x01	; 1
    4170:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
    4174:	04 c0       	rjmp	.+8      	; 0x417e <checkPin+0x80>
		}
		else
		{
			setMode(NORMAL_LOCKED, 2);
    4176:	80 e0       	ldi	r24, 0x00	; 0
    4178:	62 e0       	ldi	r22, 0x02	; 2
    417a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
		}
	}
	setLcdDelay(2);
    417e:	82 e0       	ldi	r24, 0x02	; 2
    4180:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <setLcdDelay>
	g_pinCount = 0;
    4184:	10 92 21 02 	sts	0x0221, r1
}
    4188:	0f 90       	pop	r0
    418a:	0f 90       	pop	r0
    418c:	cf 91       	pop	r28
    418e:	df 91       	pop	r29
    4190:	08 95       	ret

00004192 <inputKey>:

static void inputKey(uint8 key)
{
    4192:	df 93       	push	r29
    4194:	cf 93       	push	r28
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
    419a:	2f 97       	sbiw	r28, 0x0f	; 15
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	8f 87       	std	Y+15, r24	; 0x0f
	if (key >= 0 && key <= 9 && g_mode != NORMAL_UNLOCKED)
    41a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41aa:	8a 30       	cpi	r24, 0x0A	; 10
    41ac:	20 f5       	brcc	.+72     	; 0x41f6 <inputKey+0x64>
    41ae:	80 91 24 02 	lds	r24, 0x0224
    41b2:	81 30       	cpi	r24, 0x01	; 1
    41b4:	01 f1       	breq	.+64     	; 0x41f6 <inputKey+0x64>
	{
		//		LCD_displayCharacter('*');
		LCD_intgerToString(key);
    41b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41b8:	88 2f       	mov	r24, r24
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <LCD_intgerToString>
		g_enteredPin[g_pinCount++] = key;
    41c0:	20 91 21 02 	lds	r18, 0x0221
    41c4:	82 2f       	mov	r24, r18
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	fc 01       	movw	r30, r24
    41ca:	e7 5d       	subi	r30, 0xD7	; 215
    41cc:	fd 4f       	sbci	r31, 0xFD	; 253
    41ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    41d0:	80 83       	st	Z, r24
    41d2:	82 2f       	mov	r24, r18
    41d4:	8f 5f       	subi	r24, 0xFF	; 255
    41d6:	80 93 21 02 	sts	0x0221, r24
		if (g_pinCount == 4)
    41da:	80 91 21 02 	lds	r24, 0x0221
    41de:	84 30       	cpi	r24, 0x04	; 4
    41e0:	b9 f5       	brne	.+110    	; 0x4250 <inputKey+0xbe>
		{
			if (g_mode == CHANGE_NEW)
    41e2:	80 91 24 02 	lds	r24, 0x0224
    41e6:	83 30       	cpi	r24, 0x03	; 3
    41e8:	19 f4       	brne	.+6      	; 0x41f0 <inputKey+0x5e>
			{
				setPin();
    41ea:	0e 94 17 20 	call	0x402e	; 0x402e <setPin>
    41ee:	30 c0       	rjmp	.+96     	; 0x4250 <inputKey+0xbe>
			}
			else
			{
				checkPin();
    41f0:	0e 94 7f 20 	call	0x40fe	; 0x40fe <checkPin>
    41f4:	2d c0       	rjmp	.+90     	; 0x4250 <inputKey+0xbe>
			}
		}
	}
	else if (key == '#')
    41f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f8:	83 32       	cpi	r24, 0x23	; 35
    41fa:	e9 f4       	brne	.+58     	; 0x4236 <inputKey+0xa4>
	{
		if (g_mode == NORMAL_LOCKED || g_mode == NORMAL_UNLOCKED)
    41fc:	80 91 24 02 	lds	r24, 0x0224
    4200:	88 23       	and	r24, r24
    4202:	21 f0       	breq	.+8      	; 0x420c <inputKey+0x7a>
    4204:	80 91 24 02 	lds	r24, 0x0224
    4208:	81 30       	cpi	r24, 0x01	; 1
    420a:	29 f4       	brne	.+10     	; 0x4216 <inputKey+0x84>
		{
			setMode(CHANGE_OLD, 0);
    420c:	82 e0       	ldi	r24, 0x02	; 2
    420e:	60 e0       	ldi	r22, 0x00	; 0
    4210:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
    4214:	1d c0       	rjmp	.+58     	; 0x4250 <inputKey+0xbe>
		}
		else
		{
			if (SOLENOID_read(&g_lock) == 1)
    4216:	83 ef       	ldi	r24, 0xF3	; 243
    4218:	91 e0       	ldi	r25, 0x01	; 1
    421a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SOLENOID_read>
    421e:	81 30       	cpi	r24, 0x01	; 1
    4220:	29 f4       	brne	.+10     	; 0x422c <inputKey+0x9a>
			{
				setMode(NORMAL_LOCKED, 0);
    4222:	80 e0       	ldi	r24, 0x00	; 0
    4224:	60 e0       	ldi	r22, 0x00	; 0
    4226:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
    422a:	12 c0       	rjmp	.+36     	; 0x4250 <inputKey+0xbe>
			}
			else
			{
				setMode(NORMAL_UNLOCKED, 0);
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	60 e0       	ldi	r22, 0x00	; 0
    4230:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
    4234:	0d c0       	rjmp	.+26     	; 0x4250 <inputKey+0xbe>
			}
		}
	}
	else if (key == '*')
    4236:	8f 85       	ldd	r24, Y+15	; 0x0f
    4238:	8a 32       	cpi	r24, 0x2A	; 42
    423a:	51 f4       	brne	.+20     	; 0x4250 <inputKey+0xbe>
	{
		if (SOLENOID_read(&g_lock) == 0)
    423c:	83 ef       	ldi	r24, 0xF3	; 243
    423e:	91 e0       	ldi	r25, 0x01	; 1
    4240:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SOLENOID_read>
    4244:	88 23       	and	r24, r24
    4246:	21 f4       	brne	.+8      	; 0x4250 <inputKey+0xbe>
		{
			setMode(NORMAL_LOCKED, 1);
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	61 e0       	ldi	r22, 0x01	; 1
    424c:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	a6 e9       	ldi	r26, 0x96	; 150
    4256:	b3 e4       	ldi	r27, 0x43	; 67
    4258:	8b 87       	std	Y+11, r24	; 0x0b
    425a:	9c 87       	std	Y+12, r25	; 0x0c
    425c:	ad 87       	std	Y+13, r26	; 0x0d
    425e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4260:	6b 85       	ldd	r22, Y+11	; 0x0b
    4262:	7c 85       	ldd	r23, Y+12	; 0x0c
    4264:	8d 85       	ldd	r24, Y+13	; 0x0d
    4266:	9e 85       	ldd	r25, Y+14	; 0x0e
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	4a e7       	ldi	r20, 0x7A	; 122
    426e:	55 e4       	ldi	r21, 0x45	; 69
    4270:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	8f 83       	std	Y+7, r24	; 0x07
    427a:	98 87       	std	Y+8, r25	; 0x08
    427c:	a9 87       	std	Y+9, r26	; 0x09
    427e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4280:	6f 81       	ldd	r22, Y+7	; 0x07
    4282:	78 85       	ldd	r23, Y+8	; 0x08
    4284:	89 85       	ldd	r24, Y+9	; 0x09
    4286:	9a 85       	ldd	r25, Y+10	; 0x0a
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	40 e8       	ldi	r20, 0x80	; 128
    428e:	5f e3       	ldi	r21, 0x3F	; 63
    4290:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4294:	88 23       	and	r24, r24
    4296:	2c f4       	brge	.+10     	; 0x42a2 <inputKey+0x110>
		__ticks = 1;
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	9e 83       	std	Y+6, r25	; 0x06
    429e:	8d 83       	std	Y+5, r24	; 0x05
    42a0:	3f c0       	rjmp	.+126    	; 0x4320 <inputKey+0x18e>
	else if (__tmp > 65535)
    42a2:	6f 81       	ldd	r22, Y+7	; 0x07
    42a4:	78 85       	ldd	r23, Y+8	; 0x08
    42a6:	89 85       	ldd	r24, Y+9	; 0x09
    42a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	3f ef       	ldi	r19, 0xFF	; 255
    42ae:	4f e7       	ldi	r20, 0x7F	; 127
    42b0:	57 e4       	ldi	r21, 0x47	; 71
    42b2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    42b6:	18 16       	cp	r1, r24
    42b8:	4c f5       	brge	.+82     	; 0x430c <inputKey+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    42bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    42be:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e2       	ldi	r20, 0x20	; 32
    42c8:	51 e4       	ldi	r21, 0x41	; 65
    42ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	bc 01       	movw	r22, r24
    42d4:	cd 01       	movw	r24, r26
    42d6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    42da:	dc 01       	movw	r26, r24
    42dc:	cb 01       	movw	r24, r22
    42de:	9e 83       	std	Y+6, r25	; 0x06
    42e0:	8d 83       	std	Y+5, r24	; 0x05
    42e2:	0f c0       	rjmp	.+30     	; 0x4302 <inputKey+0x170>
    42e4:	80 e9       	ldi	r24, 0x90	; 144
    42e6:	91 e0       	ldi	r25, 0x01	; 1
    42e8:	9c 83       	std	Y+4, r25	; 0x04
    42ea:	8b 83       	std	Y+3, r24	; 0x03
    42ec:	8b 81       	ldd	r24, Y+3	; 0x03
    42ee:	9c 81       	ldd	r25, Y+4	; 0x04
    42f0:	01 97       	sbiw	r24, 0x01	; 1
    42f2:	f1 f7       	brne	.-4      	; 0x42f0 <inputKey+0x15e>
    42f4:	9c 83       	std	Y+4, r25	; 0x04
    42f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f8:	8d 81       	ldd	r24, Y+5	; 0x05
    42fa:	9e 81       	ldd	r25, Y+6	; 0x06
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	9e 83       	std	Y+6, r25	; 0x06
    4300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4302:	8d 81       	ldd	r24, Y+5	; 0x05
    4304:	9e 81       	ldd	r25, Y+6	; 0x06
    4306:	00 97       	sbiw	r24, 0x00	; 0
    4308:	69 f7       	brne	.-38     	; 0x42e4 <inputKey+0x152>
    430a:	14 c0       	rjmp	.+40     	; 0x4334 <inputKey+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    430c:	6f 81       	ldd	r22, Y+7	; 0x07
    430e:	78 85       	ldd	r23, Y+8	; 0x08
    4310:	89 85       	ldd	r24, Y+9	; 0x09
    4312:	9a 85       	ldd	r25, Y+10	; 0x0a
    4314:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	9e 83       	std	Y+6, r25	; 0x06
    431e:	8d 83       	std	Y+5, r24	; 0x05
    4320:	8d 81       	ldd	r24, Y+5	; 0x05
    4322:	9e 81       	ldd	r25, Y+6	; 0x06
    4324:	9a 83       	std	Y+2, r25	; 0x02
    4326:	89 83       	std	Y+1, r24	; 0x01
    4328:	89 81       	ldd	r24, Y+1	; 0x01
    432a:	9a 81       	ldd	r25, Y+2	; 0x02
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <inputKey+0x19a>
    4330:	9a 83       	std	Y+2, r25	; 0x02
    4332:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	_delay_ms(300);
}
    4334:	2f 96       	adiw	r28, 0x0f	; 15
    4336:	0f b6       	in	r0, 0x3f	; 63
    4338:	f8 94       	cli
    433a:	de bf       	out	0x3e, r29	; 62
    433c:	0f be       	out	0x3f, r0	; 63
    433e:	cd bf       	out	0x3d, r28	; 61
    4340:	cf 91       	pop	r28
    4342:	df 91       	pop	r29
    4344:	08 95       	ret

00004346 <SMART_DOOR_LOCK_SYSTEM_Init>:

void SMART_DOOR_LOCK_SYSTEM_Init()
{
    4346:	df 93       	push	r29
    4348:	cf 93       	push	r28
    434a:	cd b7       	in	r28, 0x3d	; 61
    434c:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Door Lock System */
	LCD_init();
    434e:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_init>
	KEYPAD_init();
    4352:	0e 94 87 12 	call	0x250e	; 0x250e <KEYPAD_init>
	SOLENOID_init(&g_lock);
    4356:	83 ef       	ldi	r24, 0xF3	; 243
    4358:	91 e0       	ldi	r25, 0x01	; 1
    435a:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <SOLENOID_init>
	SOLENOID_on(&g_lock);
    435e:	83 ef       	ldi	r24, 0xF3	; 243
    4360:	91 e0       	ldi	r25, 0x01	; 1
    4362:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <SOLENOID_on>
	getPin();
    4366:	0e 94 51 20 	call	0x40a2	; 0x40a2 <getPin>
	setMode(NORMAL_LOCKED, 0);
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>

	/* Initialize Timer2 */
	TIMER2_init(TMR2_1024);
    4372:	87 e0       	ldi	r24, 0x07	; 7
    4374:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TIMER2_init>
	TIMER2_setCallback(lcdDelayHandler);
    4378:	80 ee       	ldi	r24, 0xE0	; 224
    437a:	9f e1       	ldi	r25, 0x1F	; 31
    437c:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <TIMER2_setCallback>
	TIMER2_interruptEnable();
    4380:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <TIMER2_interruptEnable>
}
    4384:	cf 91       	pop	r28
    4386:	df 91       	pop	r29
    4388:	08 95       	ret

0000438a <SMART_DOOR_LOCK_SYSTEM_Listener>:

void SMART_DOOR_LOCK_SYSTEM_Listener()
{
    438a:	df 93       	push	r29
    438c:	cf 93       	push	r28
    438e:	0f 92       	push	r0
    4390:	cd b7       	in	r28, 0x3d	; 61
    4392:	de b7       	in	r29, 0x3e	; 62
	if (g_lcdDelayFlag == FALSE)
    4394:	80 91 25 02 	lds	r24, 0x0225
    4398:	88 23       	and	r24, r24
    439a:	49 f4       	brne	.+18     	; 0x43ae <SMART_DOOR_LOCK_SYSTEM_Listener+0x24>
	{
		uint8 key = KEYPAD_getPressedKey();
    439c:	0e 94 b1 12 	call	0x2562	; 0x2562 <KEYPAD_getPressedKey>
    43a0:	89 83       	std	Y+1, r24	; 0x01
		if (key != KEYPAD_NO_PRESS)
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	80 32       	cpi	r24, 0x20	; 32
    43a6:	19 f0       	breq	.+6      	; 0x43ae <SMART_DOOR_LOCK_SYSTEM_Listener+0x24>
			inputKey(key);
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	0e 94 c9 20 	call	0x4192	; 0x4192 <inputKey>
	}
}
    43ae:	0f 90       	pop	r0
    43b0:	cf 91       	pop	r28
    43b2:	df 91       	pop	r29
    43b4:	08 95       	ret

000043b6 <motionHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void motionHandler()
{
    43b6:	df 93       	push	r29
    43b8:	cf 93       	push	r28
    43ba:	cd b7       	in	r28, 0x3d	; 61
    43bc:	de b7       	in	r29, 0x3e	; 62
	if (PIR_read())
    43be:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <PIR_read>
    43c2:	88 23       	and	r24, r24
    43c4:	31 f0       	breq	.+12     	; 0x43d2 <motionHandler+0x1c>
	{
		g_threatFlag |= (1 << MOTION_THREAT);
    43c6:	80 91 27 02 	lds	r24, 0x0227
    43ca:	88 60       	ori	r24, 0x08	; 8
    43cc:	80 93 27 02 	sts	0x0227, r24
    43d0:	05 c0       	rjmp	.+10     	; 0x43dc <motionHandler+0x26>
	}
	else
	{
		g_threatFlag &= ~(1 << MOTION_THREAT);
    43d2:	80 91 27 02 	lds	r24, 0x0227
    43d6:	87 7f       	andi	r24, 0xF7	; 247
    43d8:	80 93 27 02 	sts	0x0227, r24
	}
}
    43dc:	cf 91       	pop	r28
    43de:	df 91       	pop	r29
    43e0:	08 95       	ret

000043e2 <MOTION_DETECTION_SYSTEM_Init>:

void MOTION_DETECTION_SYSTEM_Init()
{
    43e2:	df 93       	push	r29
    43e4:	cf 93       	push	r28
    43e6:	cd b7       	in	r28, 0x3d	; 61
    43e8:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Motion Detection System */
	PIR_init();
    43ea:	0e 94 d5 11 	call	0x23aa	; 0x23aa <PIR_init>
}
    43ee:	cf 91       	pop	r28
    43f0:	df 91       	pop	r29
    43f2:	08 95       	ret

000043f4 <MOTION_DETECTION_SYSTEM_Listener>:

void MOTION_DETECTION_SYSTEM_Listener()
{
    43f4:	df 93       	push	r29
    43f6:	cf 93       	push	r28
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
	if (g_motionEnable)
    43fc:	80 91 f6 01 	lds	r24, 0x01F6
    4400:	88 23       	and	r24, r24
    4402:	11 f0       	breq	.+4      	; 0x4408 <MOTION_DETECTION_SYSTEM_Listener+0x14>
	{
		motionHandler();
    4404:	0e 94 db 21 	call	0x43b6	; 0x43b6 <motionHandler>
	}
}
    4408:	cf 91       	pop	r28
    440a:	df 91       	pop	r29
    440c:	08 95       	ret

0000440e <gasHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
void gasHandler()
{
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	cd b7       	in	r28, 0x3d	; 61
    4414:	de b7       	in	r29, 0x3e	; 62
	if (MQ9_read())
    4416:	0e 94 ca 11 	call	0x2394	; 0x2394 <MQ9_read>
    441a:	88 23       	and	r24, r24
    441c:	b9 f0       	breq	.+46     	; 0x444c <gasHandler+0x3e>
	{
		if (!(g_threatFlag & (1 << FIRE_THREAT)))
    441e:	80 91 27 02 	lds	r24, 0x0227
    4422:	88 2f       	mov	r24, r24
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	81 70       	andi	r24, 0x01	; 1
    4428:	90 70       	andi	r25, 0x00	; 0
    442a:	00 97       	sbiw	r24, 0x00	; 0
    442c:	29 f4       	brne	.+10     	; 0x4438 <gasHandler+0x2a>
			DCMOTOR_on(&g_fan);
    442e:	87 ef       	ldi	r24, 0xF7	; 247
    4430:	91 e0       	ldi	r25, 0x01	; 1
    4432:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <DCMOTOR_on>
    4436:	04 c0       	rjmp	.+8      	; 0x4440 <gasHandler+0x32>
		else
			DCMOTOR_off(&g_fan);
    4438:	87 ef       	ldi	r24, 0xF7	; 247
    443a:	91 e0       	ldi	r25, 0x01	; 1
    443c:	0e 94 71 12 	call	0x24e2	; 0x24e2 <DCMOTOR_off>
		g_threatFlag |= (1 << GAS_THREAT);
    4440:	80 91 27 02 	lds	r24, 0x0227
    4444:	82 60       	ori	r24, 0x02	; 2
    4446:	80 93 27 02 	sts	0x0227, r24
    444a:	09 c0       	rjmp	.+18     	; 0x445e <gasHandler+0x50>
	}
	else
	{
		DCMOTOR_off(&g_fan);
    444c:	87 ef       	ldi	r24, 0xF7	; 247
    444e:	91 e0       	ldi	r25, 0x01	; 1
    4450:	0e 94 71 12 	call	0x24e2	; 0x24e2 <DCMOTOR_off>
		g_threatFlag &= ~(1 << GAS_THREAT);
    4454:	80 91 27 02 	lds	r24, 0x0227
    4458:	8d 7f       	andi	r24, 0xFD	; 253
    445a:	80 93 27 02 	sts	0x0227, r24
	}
}
    445e:	cf 91       	pop	r28
    4460:	df 91       	pop	r29
    4462:	08 95       	ret

00004464 <GAS_SYSTEM_Init>:

void GAS_SYSTEM_Init()
{
    4464:	df 93       	push	r29
    4466:	cf 93       	push	r28
    4468:	cd b7       	in	r28, 0x3d	; 61
    446a:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Gas System */
	MQ9_init();
    446c:	0e 94 be 11 	call	0x237c	; 0x237c <MQ9_init>
	INTERRUPT_INT1_init(gasHandler, CHANGE);
    4470:	87 e0       	ldi	r24, 0x07	; 7
    4472:	92 e2       	ldi	r25, 0x22	; 34
    4474:	61 e0       	ldi	r22, 0x01	; 1
    4476:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <INTERRUPT_INT1_init>
	DCMOTOR_init(&g_fan);
    447a:	87 ef       	ldi	r24, 0xF7	; 247
    447c:	91 e0       	ldi	r25, 0x01	; 1
    447e:	0e 94 45 12 	call	0x248a	; 0x248a <DCMOTOR_init>
}
    4482:	cf 91       	pop	r28
    4484:	df 91       	pop	r29
    4486:	08 95       	ret

00004488 <fireHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void fireHandler()
{
    4488:	df 93       	push	r29
    448a:	cf 93       	push	r28
    448c:	cd b7       	in	r28, 0x3d	; 61
    448e:	de b7       	in	r29, 0x3e	; 62
	if (FLAME_read())
    4490:	0e 94 b3 11 	call	0x2366	; 0x2366 <FLAME_read>
    4494:	88 23       	and	r24, r24
    4496:	51 f0       	breq	.+20     	; 0x44ac <fireHandler+0x24>
	{
		DCMOTOR_on(&g_waterPump1);
    4498:	89 ef       	ldi	r24, 0xF9	; 249
    449a:	91 e0       	ldi	r25, 0x01	; 1
    449c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <DCMOTOR_on>
		g_threatFlag |= (1 << FIRE_THREAT);
    44a0:	80 91 27 02 	lds	r24, 0x0227
    44a4:	81 60       	ori	r24, 0x01	; 1
    44a6:	80 93 27 02 	sts	0x0227, r24
    44aa:	09 c0       	rjmp	.+18     	; 0x44be <fireHandler+0x36>
	}
	else
	{
		DCMOTOR_off(&g_waterPump1);
    44ac:	89 ef       	ldi	r24, 0xF9	; 249
    44ae:	91 e0       	ldi	r25, 0x01	; 1
    44b0:	0e 94 71 12 	call	0x24e2	; 0x24e2 <DCMOTOR_off>
		g_threatFlag &= ~(1 << FIRE_THREAT);
    44b4:	80 91 27 02 	lds	r24, 0x0227
    44b8:	8e 7f       	andi	r24, 0xFE	; 254
    44ba:	80 93 27 02 	sts	0x0227, r24
	}
	gasHandler();
    44be:	0e 94 07 22 	call	0x440e	; 0x440e <gasHandler>
}
    44c2:	cf 91       	pop	r28
    44c4:	df 91       	pop	r29
    44c6:	08 95       	ret

000044c8 <FIRE_SYSTEM_Init>:

void FIRE_SYSTEM_Init()
{
    44c8:	df 93       	push	r29
    44ca:	cf 93       	push	r28
    44cc:	cd b7       	in	r28, 0x3d	; 61
    44ce:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Fire System */
	FLAME_init();
    44d0:	0e 94 a7 11 	call	0x234e	; 0x234e <FLAME_init>
	INTERRUPT_INT0_init(fireHandler, CHANGE);
    44d4:	84 e4       	ldi	r24, 0x44	; 68
    44d6:	92 e2       	ldi	r25, 0x22	; 34
    44d8:	61 e0       	ldi	r22, 0x01	; 1
    44da:	0e 94 44 0c 	call	0x1888	; 0x1888 <INTERRUPT_INT0_init>
	DCMOTOR_init(&g_waterPump1);
    44de:	89 ef       	ldi	r24, 0xF9	; 249
    44e0:	91 e0       	ldi	r25, 0x01	; 1
    44e2:	0e 94 45 12 	call	0x248a	; 0x248a <DCMOTOR_init>
}
    44e6:	cf 91       	pop	r28
    44e8:	df 91       	pop	r29
    44ea:	08 95       	ret

000044ec <alarmHandler>:

/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/
static void alarmHandler()
{
    44ec:	df 93       	push	r29
    44ee:	cf 93       	push	r28
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
	if(g_alarmTimerCount == 10)
    44f4:	80 91 26 02 	lds	r24, 0x0226
    44f8:	8a 30       	cpi	r24, 0x0A	; 10
    44fa:	49 f4       	brne	.+18     	; 0x450e <alarmHandler+0x22>
	{
		LED_on(&g_alarmLED);
    44fc:	8d ef       	ldi	r24, 0xFD	; 253
    44fe:	91 e0       	ldi	r25, 0x01	; 1
    4500:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <LED_on>
		BUZZER_on(&g_alarmBuzzer);
    4504:	8b ef       	ldi	r24, 0xFB	; 251
    4506:	91 e0       	ldi	r25, 0x01	; 1
    4508:	0e 94 19 12 	call	0x2432	; 0x2432 <BUZZER_on>
    450c:	0e c0       	rjmp	.+28     	; 0x452a <alarmHandler+0x3e>
	}
	else if(g_alarmTimerCount == 20)
    450e:	80 91 26 02 	lds	r24, 0x0226
    4512:	84 31       	cpi	r24, 0x14	; 20
    4514:	51 f4       	brne	.+20     	; 0x452a <alarmHandler+0x3e>
	{
		LED_off(&g_alarmLED);
    4516:	8d ef       	ldi	r24, 0xFD	; 253
    4518:	91 e0       	ldi	r25, 0x01	; 1
    451a:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <LED_off>
		BUZZER_off(&g_alarmBuzzer);
    451e:	8b ef       	ldi	r24, 0xFB	; 251
    4520:	91 e0       	ldi	r25, 0x01	; 1
    4522:	0e 94 2f 12 	call	0x245e	; 0x245e <BUZZER_off>
		g_alarmTimerCount = 0;
    4526:	10 92 26 02 	sts	0x0226, r1
	}
	g_alarmTimerCount++;
    452a:	80 91 26 02 	lds	r24, 0x0226
    452e:	8f 5f       	subi	r24, 0xFF	; 255
    4530:	80 93 26 02 	sts	0x0226, r24
}
    4534:	cf 91       	pop	r28
    4536:	df 91       	pop	r29
    4538:	08 95       	ret

0000453a <alarmOn>:
static void alarmOn()
{
    453a:	df 93       	push	r29
    453c:	cf 93       	push	r28
    453e:	cd b7       	in	r28, 0x3d	; 61
    4540:	de b7       	in	r29, 0x3e	; 62
	TIMER0_on();
    4542:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <TIMER0_on>
}
    4546:	cf 91       	pop	r28
    4548:	df 91       	pop	r29
    454a:	08 95       	ret

0000454c <alarmOff>:

static void alarmOff()
{
    454c:	df 93       	push	r29
    454e:	cf 93       	push	r28
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
	TIMER0_off();
    4554:	0e 94 56 0d 	call	0x1aac	; 0x1aac <TIMER0_off>
	LED_off(&g_alarmLED);
    4558:	8d ef       	ldi	r24, 0xFD	; 253
    455a:	91 e0       	ldi	r25, 0x01	; 1
    455c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <LED_off>
	BUZZER_off(&g_alarmBuzzer);
    4560:	8b ef       	ldi	r24, 0xFB	; 251
    4562:	91 e0       	ldi	r25, 0x01	; 1
    4564:	0e 94 2f 12 	call	0x245e	; 0x245e <BUZZER_off>
	g_alarmTimerCount = 0;
    4568:	10 92 26 02 	sts	0x0226, r1
}
    456c:	cf 91       	pop	r28
    456e:	df 91       	pop	r29
    4570:	08 95       	ret

00004572 <ALARM_SYSTEM_Init>:

void ALARM_SYSTEM_Init()
{
    4572:	df 93       	push	r29
    4574:	cf 93       	push	r28
    4576:	cd b7       	in	r28, 0x3d	; 61
    4578:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Timer0 */
	TIMER0_init(TMR0_1024);
    457a:	85 e0       	ldi	r24, 0x05	; 5
    457c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <TIMER0_init>
	TIMER0_setCallback(alarmHandler);
    4580:	86 e7       	ldi	r24, 0x76	; 118
    4582:	92 e2       	ldi	r25, 0x22	; 34
    4584:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <TIMER0_setCallback>
	TIMER0_interruptEnable();
    4588:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <TIMER0_interruptEnable>

	/* Initialize Alarm System */
	BUZZER_init(&g_alarmBuzzer);
    458c:	8b ef       	ldi	r24, 0xFB	; 251
    458e:	91 e0       	ldi	r25, 0x01	; 1
    4590:	0e 94 03 12 	call	0x2406	; 0x2406 <BUZZER_init>
	LED_init(&g_alarmLED);
    4594:	8d ef       	ldi	r24, 0xFD	; 253
    4596:	91 e0       	ldi	r25, 0x01	; 1
    4598:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <LED_init>
}
    459c:	cf 91       	pop	r28
    459e:	df 91       	pop	r29
    45a0:	08 95       	ret

000045a2 <ALARM_SYSTEM_Listener>:

void ALARM_SYSTEM_Listener()
{
    45a2:	df 93       	push	r29
    45a4:	cf 93       	push	r28
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
	if(g_threatFlag) alarmOn();
    45aa:	80 91 27 02 	lds	r24, 0x0227
    45ae:	88 23       	and	r24, r24
    45b0:	19 f0       	breq	.+6      	; 0x45b8 <ALARM_SYSTEM_Listener+0x16>
    45b2:	0e 94 9d 22 	call	0x453a	; 0x453a <alarmOn>
    45b6:	02 c0       	rjmp	.+4      	; 0x45bc <ALARM_SYSTEM_Listener+0x1a>
	else alarmOff();
    45b8:	0e 94 a6 22 	call	0x454c	; 0x454c <alarmOff>
}
    45bc:	cf 91       	pop	r28
    45be:	df 91       	pop	r29
    45c0:	08 95       	ret

000045c2 <Comm_HandleSend>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

static void Comm_HandleSend()
{
    45c2:	df 93       	push	r29
    45c4:	cf 93       	push	r28
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
	if (GET_BIT(g_threatFlag, FIRE_THREAT) != GET_BIT(g_transmitFlag, FIRE_THREAT))
    45ca:	80 91 27 02 	lds	r24, 0x0227
    45ce:	28 2f       	mov	r18, r24
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	80 91 28 02 	lds	r24, 0x0228
    45d6:	88 2f       	mov	r24, r24
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	82 27       	eor	r24, r18
    45dc:	93 27       	eor	r25, r19
    45de:	81 70       	andi	r24, 0x01	; 1
    45e0:	90 70       	andi	r25, 0x00	; 0
    45e2:	88 23       	and	r24, r24
    45e4:	b1 f0       	breq	.+44     	; 0x4612 <Comm_HandleSend+0x50>
	{
		TOGGLE_BIT(g_transmitFlag, FIRE_THREAT);
    45e6:	90 91 28 02 	lds	r25, 0x0228
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	89 27       	eor	r24, r25
    45ee:	80 93 28 02 	sts	0x0228, r24
		if (BIT_IS_SET(g_threatFlag, FIRE_THREAT))
    45f2:	80 91 27 02 	lds	r24, 0x0227
    45f6:	88 2f       	mov	r24, r24
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	81 70       	andi	r24, 0x01	; 1
    45fc:	90 70       	andi	r25, 0x00	; 0
    45fe:	88 23       	and	r24, r24
    4600:	21 f0       	breq	.+8      	; 0x460a <Comm_HandleSend+0x48>
		{
			UART_sendByte(FIRE_TRIGGERED);
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
    4608:	8d c0       	rjmp	.+282    	; 0x4724 <Comm_HandleSend+0x162>
		}
		else
		{
			UART_sendByte(FIRE_HANDLED);
    460a:	82 e0       	ldi	r24, 0x02	; 2
    460c:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
    4610:	89 c0       	rjmp	.+274    	; 0x4724 <Comm_HandleSend+0x162>
		}
	}
	else if (GET_BIT(g_threatFlag, GAS_THREAT) != GET_BIT(g_transmitFlag, GAS_THREAT))
    4612:	80 91 27 02 	lds	r24, 0x0227
    4616:	88 2f       	mov	r24, r24
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	82 70       	andi	r24, 0x02	; 2
    461c:	90 70       	andi	r25, 0x00	; 0
    461e:	9c 01       	movw	r18, r24
    4620:	35 95       	asr	r19
    4622:	27 95       	ror	r18
    4624:	80 91 28 02 	lds	r24, 0x0228
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	82 70       	andi	r24, 0x02	; 2
    462e:	90 70       	andi	r25, 0x00	; 0
    4630:	95 95       	asr	r25
    4632:	87 95       	ror	r24
    4634:	28 17       	cp	r18, r24
    4636:	39 07       	cpc	r19, r25
    4638:	b1 f0       	breq	.+44     	; 0x4666 <Comm_HandleSend+0xa4>
	{
		TOGGLE_BIT(g_transmitFlag, GAS_THREAT);
    463a:	90 91 28 02 	lds	r25, 0x0228
    463e:	82 e0       	ldi	r24, 0x02	; 2
    4640:	89 27       	eor	r24, r25
    4642:	80 93 28 02 	sts	0x0228, r24
		if (BIT_IS_SET(g_threatFlag, GAS_THREAT))
    4646:	80 91 27 02 	lds	r24, 0x0227
    464a:	88 2f       	mov	r24, r24
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	82 70       	andi	r24, 0x02	; 2
    4650:	90 70       	andi	r25, 0x00	; 0
    4652:	00 97       	sbiw	r24, 0x00	; 0
    4654:	21 f0       	breq	.+8      	; 0x465e <Comm_HandleSend+0x9c>
		{
			UART_sendByte(GAS_TRIGGERED);
    4656:	83 e0       	ldi	r24, 0x03	; 3
    4658:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
    465c:	63 c0       	rjmp	.+198    	; 0x4724 <Comm_HandleSend+0x162>
		}
		else
		{
			UART_sendByte(GAS_HANDLED);
    465e:	84 e0       	ldi	r24, 0x04	; 4
    4660:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
    4664:	5f c0       	rjmp	.+190    	; 0x4724 <Comm_HandleSend+0x162>
		}
	}
	else if (GET_BIT(g_threatFlag, FLOOD_THREAT) != GET_BIT(g_transmitFlag, FLOOD_THREAT))
    4666:	80 91 27 02 	lds	r24, 0x0227
    466a:	88 2f       	mov	r24, r24
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	84 70       	andi	r24, 0x04	; 4
    4670:	90 70       	andi	r25, 0x00	; 0
    4672:	9c 01       	movw	r18, r24
    4674:	35 95       	asr	r19
    4676:	27 95       	ror	r18
    4678:	35 95       	asr	r19
    467a:	27 95       	ror	r18
    467c:	80 91 28 02 	lds	r24, 0x0228
    4680:	88 2f       	mov	r24, r24
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	84 70       	andi	r24, 0x04	; 4
    4686:	90 70       	andi	r25, 0x00	; 0
    4688:	95 95       	asr	r25
    468a:	87 95       	ror	r24
    468c:	95 95       	asr	r25
    468e:	87 95       	ror	r24
    4690:	28 17       	cp	r18, r24
    4692:	39 07       	cpc	r19, r25
    4694:	b1 f0       	breq	.+44     	; 0x46c2 <Comm_HandleSend+0x100>
	{
		TOGGLE_BIT(g_transmitFlag, FLOOD_THREAT);
    4696:	90 91 28 02 	lds	r25, 0x0228
    469a:	84 e0       	ldi	r24, 0x04	; 4
    469c:	89 27       	eor	r24, r25
    469e:	80 93 28 02 	sts	0x0228, r24
		if (BIT_IS_SET(g_threatFlag, FLOOD_THREAT))
    46a2:	80 91 27 02 	lds	r24, 0x0227
    46a6:	88 2f       	mov	r24, r24
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	84 70       	andi	r24, 0x04	; 4
    46ac:	90 70       	andi	r25, 0x00	; 0
    46ae:	00 97       	sbiw	r24, 0x00	; 0
    46b0:	21 f0       	breq	.+8      	; 0x46ba <Comm_HandleSend+0xf8>
		{
			UART_sendByte(FLOOD_TRIGGERED);
    46b2:	85 e0       	ldi	r24, 0x05	; 5
    46b4:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
    46b8:	35 c0       	rjmp	.+106    	; 0x4724 <Comm_HandleSend+0x162>
		}
		else
		{
			UART_sendByte(FLOOD_HANDLED);
    46ba:	86 e0       	ldi	r24, 0x06	; 6
    46bc:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
    46c0:	31 c0       	rjmp	.+98     	; 0x4724 <Comm_HandleSend+0x162>
		}
	}
	else if (GET_BIT(g_threatFlag, MOTION_THREAT) != GET_BIT(g_transmitFlag, MOTION_THREAT))
    46c2:	80 91 27 02 	lds	r24, 0x0227
    46c6:	88 2f       	mov	r24, r24
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	88 70       	andi	r24, 0x08	; 8
    46cc:	90 70       	andi	r25, 0x00	; 0
    46ce:	9c 01       	movw	r18, r24
    46d0:	35 95       	asr	r19
    46d2:	27 95       	ror	r18
    46d4:	35 95       	asr	r19
    46d6:	27 95       	ror	r18
    46d8:	35 95       	asr	r19
    46da:	27 95       	ror	r18
    46dc:	80 91 28 02 	lds	r24, 0x0228
    46e0:	88 2f       	mov	r24, r24
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	88 70       	andi	r24, 0x08	; 8
    46e6:	90 70       	andi	r25, 0x00	; 0
    46e8:	95 95       	asr	r25
    46ea:	87 95       	ror	r24
    46ec:	95 95       	asr	r25
    46ee:	87 95       	ror	r24
    46f0:	95 95       	asr	r25
    46f2:	87 95       	ror	r24
    46f4:	28 17       	cp	r18, r24
    46f6:	39 07       	cpc	r19, r25
    46f8:	a9 f0       	breq	.+42     	; 0x4724 <Comm_HandleSend+0x162>
	{
		TOGGLE_BIT(g_transmitFlag, MOTION_THREAT);
    46fa:	90 91 28 02 	lds	r25, 0x0228
    46fe:	88 e0       	ldi	r24, 0x08	; 8
    4700:	89 27       	eor	r24, r25
    4702:	80 93 28 02 	sts	0x0228, r24
		if (BIT_IS_SET(g_threatFlag, MOTION_THREAT))
    4706:	80 91 27 02 	lds	r24, 0x0227
    470a:	88 2f       	mov	r24, r24
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	88 70       	andi	r24, 0x08	; 8
    4710:	90 70       	andi	r25, 0x00	; 0
    4712:	00 97       	sbiw	r24, 0x00	; 0
    4714:	21 f0       	breq	.+8      	; 0x471e <Comm_HandleSend+0x15c>
		{
			UART_sendByte(MOTION_TRIGGERED);
    4716:	87 e0       	ldi	r24, 0x07	; 7
    4718:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
    471c:	03 c0       	rjmp	.+6      	; 0x4724 <Comm_HandleSend+0x162>
		}
		else
		{
			UART_sendByte(MOTION_HANDLED);
    471e:	88 e0       	ldi	r24, 0x08	; 8
    4720:	0e 94 36 10 	call	0x206c	; 0x206c <UART_sendByte>
		}
	}
}
    4724:	cf 91       	pop	r28
    4726:	df 91       	pop	r29
    4728:	08 95       	ret

0000472a <Comm_HandleReceive>:

static void Comm_HandleReceive(uint8 rData)
{
    472a:	df 93       	push	r29
    472c:	cf 93       	push	r28
    472e:	00 d0       	rcall	.+0      	; 0x4730 <Comm_HandleReceive+0x6>
    4730:	0f 92       	push	r0
    4732:	cd b7       	in	r28, 0x3d	; 61
    4734:	de b7       	in	r29, 0x3e	; 62
    4736:	89 83       	std	Y+1, r24	; 0x01
	switch (rData)
    4738:	89 81       	ldd	r24, Y+1	; 0x01
    473a:	28 2f       	mov	r18, r24
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	3b 83       	std	Y+3, r19	; 0x03
    4740:	2a 83       	std	Y+2, r18	; 0x02
    4742:	8a 81       	ldd	r24, Y+2	; 0x02
    4744:	9b 81       	ldd	r25, Y+3	; 0x03
    4746:	8e 30       	cpi	r24, 0x0E	; 14
    4748:	91 05       	cpc	r25, r1
    474a:	b9 f1       	breq	.+110    	; 0x47ba <Comm_HandleReceive+0x90>
    474c:	2a 81       	ldd	r18, Y+2	; 0x02
    474e:	3b 81       	ldd	r19, Y+3	; 0x03
    4750:	2f 30       	cpi	r18, 0x0F	; 15
    4752:	31 05       	cpc	r19, r1
    4754:	84 f4       	brge	.+32     	; 0x4776 <Comm_HandleReceive+0x4c>
    4756:	8a 81       	ldd	r24, Y+2	; 0x02
    4758:	9b 81       	ldd	r25, Y+3	; 0x03
    475a:	8c 30       	cpi	r24, 0x0C	; 12
    475c:	91 05       	cpc	r25, r1
    475e:	21 f1       	breq	.+72     	; 0x47a8 <Comm_HandleReceive+0x7e>
    4760:	2a 81       	ldd	r18, Y+2	; 0x02
    4762:	3b 81       	ldd	r19, Y+3	; 0x03
    4764:	2d 30       	cpi	r18, 0x0D	; 13
    4766:	31 05       	cpc	r19, r1
    4768:	14 f5       	brge	.+68     	; 0x47ae <Comm_HandleReceive+0x84>
    476a:	8a 81       	ldd	r24, Y+2	; 0x02
    476c:	9b 81       	ldd	r25, Y+3	; 0x03
    476e:	8b 30       	cpi	r24, 0x0B	; 11
    4770:	91 05       	cpc	r25, r1
    4772:	b1 f0       	breq	.+44     	; 0x47a0 <Comm_HandleReceive+0x76>
    4774:	31 c0       	rjmp	.+98     	; 0x47d8 <Comm_HandleReceive+0xae>
    4776:	2a 81       	ldd	r18, Y+2	; 0x02
    4778:	3b 81       	ldd	r19, Y+3	; 0x03
    477a:	20 31       	cpi	r18, 0x10	; 16
    477c:	31 05       	cpc	r19, r1
    477e:	61 f1       	breq	.+88     	; 0x47d8 <Comm_HandleReceive+0xae>
    4780:	8a 81       	ldd	r24, Y+2	; 0x02
    4782:	9b 81       	ldd	r25, Y+3	; 0x03
    4784:	80 31       	cpi	r24, 0x10	; 16
    4786:	91 05       	cpc	r25, r1
    4788:	3c f1       	brlt	.+78     	; 0x47d8 <Comm_HandleReceive+0xae>
    478a:	2a 81       	ldd	r18, Y+2	; 0x02
    478c:	3b 81       	ldd	r19, Y+3	; 0x03
    478e:	21 31       	cpi	r18, 0x11	; 17
    4790:	31 05       	cpc	r19, r1
    4792:	c9 f0       	breq	.+50     	; 0x47c6 <Comm_HandleReceive+0x9c>
    4794:	8a 81       	ldd	r24, Y+2	; 0x02
    4796:	9b 81       	ldd	r25, Y+3	; 0x03
    4798:	82 31       	cpi	r24, 0x12	; 18
    479a:	91 05       	cpc	r25, r1
    479c:	c9 f0       	breq	.+50     	; 0x47d0 <Comm_HandleReceive+0xa6>
    479e:	1c c0       	rjmp	.+56     	; 0x47d8 <Comm_HandleReceive+0xae>
	{
	case MOTION_ON:
		g_motionEnable = TRUE;
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	80 93 f6 01 	sts	0x01F6, r24
    47a6:	18 c0       	rjmp	.+48     	; 0x47d8 <Comm_HandleReceive+0xae>
		break;
	case MOTION_OFF:
		g_motionEnable = FALSE;
    47a8:	10 92 f6 01 	sts	0x01F6, r1
    47ac:	15 c0       	rjmp	.+42     	; 0x47d8 <Comm_HandleReceive+0xae>
		break;
	case PANIC_ON:
		g_threatFlag |= (1 << PANIC_MODE);
    47ae:	80 91 27 02 	lds	r24, 0x0227
    47b2:	80 61       	ori	r24, 0x10	; 16
    47b4:	80 93 27 02 	sts	0x0227, r24
    47b8:	0f c0       	rjmp	.+30     	; 0x47d8 <Comm_HandleReceive+0xae>
		break;
	case PANIC_OFF:
		g_threatFlag &= ~(1 << PANIC_MODE);
    47ba:	80 91 27 02 	lds	r24, 0x0227
    47be:	8f 7e       	andi	r24, 0xEF	; 239
    47c0:	80 93 27 02 	sts	0x0227, r24
    47c4:	09 c0       	rjmp	.+18     	; 0x47d8 <Comm_HandleReceive+0xae>
	case DISARM_ON:
		break;
	case DISARM_OFF:
		break;
	case DOOR_OPEN:
		setMode(NORMAL_LOCKED, 3);
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	63 e0       	ldi	r22, 0x03	; 3
    47ca:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
    47ce:	04 c0       	rjmp	.+8      	; 0x47d8 <Comm_HandleReceive+0xae>
		break;
	case DOOR_CLOSE:
		setMode(NORMAL_LOCKED, 1);
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	61 e0       	ldi	r22, 0x01	; 1
    47d4:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <setMode>
		break;
	default:
		break;
	}
}
    47d8:	0f 90       	pop	r0
    47da:	0f 90       	pop	r0
    47dc:	0f 90       	pop	r0
    47de:	cf 91       	pop	r28
    47e0:	df 91       	pop	r29
    47e2:	08 95       	ret

000047e4 <RXHandler>:

static void RXHandler()
{
    47e4:	df 93       	push	r29
    47e6:	cf 93       	push	r28
    47e8:	0f 92       	push	r0
    47ea:	cd b7       	in	r28, 0x3d	; 61
    47ec:	de b7       	in	r29, 0x3e	; 62
	uint8 rData = UART_receiveByte();
    47ee:	0e 94 4d 10 	call	0x209a	; 0x209a <UART_receiveByte>
    47f2:	89 83       	std	Y+1, r24	; 0x01
	Comm_HandleReceive(rData);
    47f4:	89 81       	ldd	r24, Y+1	; 0x01
    47f6:	0e 94 95 23 	call	0x472a	; 0x472a <Comm_HandleReceive>
}
    47fa:	0f 90       	pop	r0
    47fc:	cf 91       	pop	r28
    47fe:	df 91       	pop	r29
    4800:	08 95       	ret

00004802 <TXHandler>:

static void TXHandler()
{
    4802:	df 93       	push	r29
    4804:	cf 93       	push	r28
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62
	Comm_HandleSend();
    480a:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <Comm_HandleSend>
}
    480e:	cf 91       	pop	r28
    4810:	df 91       	pop	r29
    4812:	08 95       	ret

00004814 <Comm_Init>:

void Comm_Init()
{
    4814:	df 93       	push	r29
    4816:	cf 93       	push	r28
    4818:	cd b7       	in	r28, 0x3d	; 61
    481a:	de b7       	in	r29, 0x3e	; 62
    481c:	2c 97       	sbiw	r28, 0x0c	; 12
    481e:	0f b6       	in	r0, 0x3f	; 63
    4820:	f8 94       	cli
    4822:	de bf       	out	0x3e, r29	; 62
    4824:	0f be       	out	0x3f, r0	; 63
    4826:	cd bf       	out	0x3d, r28	; 61
	/* Configure & Initialize UART */
	UART_ConfigType uartConfig =
	{ UART_5BIT, PARITY_EVEN, UART_1_STOP_BIT, 115200 };
    4828:	ce 01       	movw	r24, r28
    482a:	01 96       	adiw	r24, 0x01	; 1
    482c:	99 87       	std	Y+9, r25	; 0x09
    482e:	88 87       	std	Y+8, r24	; 0x08
    4830:	ef ef       	ldi	r30, 0xFF	; 255
    4832:	f1 e0       	ldi	r31, 0x01	; 1
    4834:	fb 87       	std	Y+11, r31	; 0x0b
    4836:	ea 87       	std	Y+10, r30	; 0x0a
    4838:	f7 e0       	ldi	r31, 0x07	; 7
    483a:	fc 87       	std	Y+12, r31	; 0x0c
    483c:	ea 85       	ldd	r30, Y+10	; 0x0a
    483e:	fb 85       	ldd	r31, Y+11	; 0x0b
    4840:	00 80       	ld	r0, Z
    4842:	8a 85       	ldd	r24, Y+10	; 0x0a
    4844:	9b 85       	ldd	r25, Y+11	; 0x0b
    4846:	01 96       	adiw	r24, 0x01	; 1
    4848:	9b 87       	std	Y+11, r25	; 0x0b
    484a:	8a 87       	std	Y+10, r24	; 0x0a
    484c:	e8 85       	ldd	r30, Y+8	; 0x08
    484e:	f9 85       	ldd	r31, Y+9	; 0x09
    4850:	00 82       	st	Z, r0
    4852:	88 85       	ldd	r24, Y+8	; 0x08
    4854:	99 85       	ldd	r25, Y+9	; 0x09
    4856:	01 96       	adiw	r24, 0x01	; 1
    4858:	99 87       	std	Y+9, r25	; 0x09
    485a:	88 87       	std	Y+8, r24	; 0x08
    485c:	9c 85       	ldd	r25, Y+12	; 0x0c
    485e:	91 50       	subi	r25, 0x01	; 1
    4860:	9c 87       	std	Y+12, r25	; 0x0c
    4862:	ec 85       	ldd	r30, Y+12	; 0x0c
    4864:	ee 23       	and	r30, r30
    4866:	51 f7       	brne	.-44     	; 0x483c <Comm_Init+0x28>
	UART_init(&uartConfig);
    4868:	ce 01       	movw	r24, r28
    486a:	01 96       	adiw	r24, 0x01	; 1
    486c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <UART_init>
	UART_setCallBackRX(RXHandler);
    4870:	82 ef       	ldi	r24, 0xF2	; 242
    4872:	93 e2       	ldi	r25, 0x23	; 35
    4874:	0e 94 95 11 	call	0x232a	; 0x232a <UART_setCallBackRX>
	UART_interruptEnable(RX_INT);
    4878:	84 e0       	ldi	r24, 0x04	; 4
    487a:	0e 94 4d 11 	call	0x229a	; 0x229a <UART_interruptEnable>

	/* Configure & Initialize Timer1 */
	TIMER1_init(TMR1_256);
    487e:	84 e0       	ldi	r24, 0x04	; 4
    4880:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <TIMER1_init>
	TIMER1_setCallback(TXHandler);
    4884:	81 e0       	ldi	r24, 0x01	; 1
    4886:	94 e2       	ldi	r25, 0x24	; 36
    4888:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TIMER1_setCallback>
	TIMER1_interruptEnable();
    488c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TIMER1_interruptEnable>
	TIMER1_on();
    4890:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <TIMER1_on>
}
    4894:	2c 96       	adiw	r28, 0x0c	; 12
    4896:	0f b6       	in	r0, 0x3f	; 63
    4898:	f8 94       	cli
    489a:	de bf       	out	0x3e, r29	; 62
    489c:	0f be       	out	0x3f, r0	; 63
    489e:	cd bf       	out	0x3d, r28	; 61
    48a0:	cf 91       	pop	r28
    48a2:	df 91       	pop	r29
    48a4:	08 95       	ret

000048a6 <main>:

/*******************************************************************************
 *                          Main Functions                              	   *
 *******************************************************************************/
int main(void)
{
    48a6:	df 93       	push	r29
    48a8:	cf 93       	push	r28
    48aa:	cd b7       	in	r28, 0x3d	; 61
    48ac:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Communication */
		Comm_Init();
    48ae:	0e 94 0a 24 	call	0x4814	; 0x4814 <Comm_Init>

//	PERFORMANCE_Init();

	/* Initialize Sub Systems */
	ALARM_SYSTEM_Init();
    48b2:	0e 94 b9 22 	call	0x4572	; 0x4572 <ALARM_SYSTEM_Init>
	FIRE_SYSTEM_Init();
    48b6:	0e 94 64 22 	call	0x44c8	; 0x44c8 <FIRE_SYSTEM_Init>
	GAS_SYSTEM_Init();
    48ba:	0e 94 32 22 	call	0x4464	; 0x4464 <GAS_SYSTEM_Init>
	WATER_FLOOD_SYSTEM_Init();
    48be:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <WATER_FLOOD_SYSTEM_Init>
	MOTION_DETECTION_SYSTEM_Init();
    48c2:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <MOTION_DETECTION_SYSTEM_Init>
	SMART_DOOR_LOCK_SYSTEM_Init();
    48c6:	0e 94 a3 21 	call	0x4346	; 0x4346 <SMART_DOOR_LOCK_SYSTEM_Init>

	/* Enable Global Interrupt */
	INTERRUPT_enable();
    48ca:	0e 94 36 0c 	call	0x186c	; 0x186c <INTERRUPT_enable>

	while(1)
	{
		SMART_DOOR_LOCK_SYSTEM_Listener();
    48ce:	0e 94 c5 21 	call	0x438a	; 0x438a <SMART_DOOR_LOCK_SYSTEM_Listener>
		MOTION_DETECTION_SYSTEM_Listener();
    48d2:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <MOTION_DETECTION_SYSTEM_Listener>
		ALARM_SYSTEM_Listener();
    48d6:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <ALARM_SYSTEM_Listener>
    48da:	f9 cf       	rjmp	.-14     	; 0x48ce <main+0x28>

000048dc <__udivmodsi4>:
    48dc:	a1 e2       	ldi	r26, 0x21	; 33
    48de:	1a 2e       	mov	r1, r26
    48e0:	aa 1b       	sub	r26, r26
    48e2:	bb 1b       	sub	r27, r27
    48e4:	fd 01       	movw	r30, r26
    48e6:	0d c0       	rjmp	.+26     	; 0x4902 <__udivmodsi4_ep>

000048e8 <__udivmodsi4_loop>:
    48e8:	aa 1f       	adc	r26, r26
    48ea:	bb 1f       	adc	r27, r27
    48ec:	ee 1f       	adc	r30, r30
    48ee:	ff 1f       	adc	r31, r31
    48f0:	a2 17       	cp	r26, r18
    48f2:	b3 07       	cpc	r27, r19
    48f4:	e4 07       	cpc	r30, r20
    48f6:	f5 07       	cpc	r31, r21
    48f8:	20 f0       	brcs	.+8      	; 0x4902 <__udivmodsi4_ep>
    48fa:	a2 1b       	sub	r26, r18
    48fc:	b3 0b       	sbc	r27, r19
    48fe:	e4 0b       	sbc	r30, r20
    4900:	f5 0b       	sbc	r31, r21

00004902 <__udivmodsi4_ep>:
    4902:	66 1f       	adc	r22, r22
    4904:	77 1f       	adc	r23, r23
    4906:	88 1f       	adc	r24, r24
    4908:	99 1f       	adc	r25, r25
    490a:	1a 94       	dec	r1
    490c:	69 f7       	brne	.-38     	; 0x48e8 <__udivmodsi4_loop>
    490e:	60 95       	com	r22
    4910:	70 95       	com	r23
    4912:	80 95       	com	r24
    4914:	90 95       	com	r25
    4916:	9b 01       	movw	r18, r22
    4918:	ac 01       	movw	r20, r24
    491a:	bd 01       	movw	r22, r26
    491c:	cf 01       	movw	r24, r30
    491e:	08 95       	ret

00004920 <__prologue_saves__>:
    4920:	2f 92       	push	r2
    4922:	3f 92       	push	r3
    4924:	4f 92       	push	r4
    4926:	5f 92       	push	r5
    4928:	6f 92       	push	r6
    492a:	7f 92       	push	r7
    492c:	8f 92       	push	r8
    492e:	9f 92       	push	r9
    4930:	af 92       	push	r10
    4932:	bf 92       	push	r11
    4934:	cf 92       	push	r12
    4936:	df 92       	push	r13
    4938:	ef 92       	push	r14
    493a:	ff 92       	push	r15
    493c:	0f 93       	push	r16
    493e:	1f 93       	push	r17
    4940:	cf 93       	push	r28
    4942:	df 93       	push	r29
    4944:	cd b7       	in	r28, 0x3d	; 61
    4946:	de b7       	in	r29, 0x3e	; 62
    4948:	ca 1b       	sub	r28, r26
    494a:	db 0b       	sbc	r29, r27
    494c:	0f b6       	in	r0, 0x3f	; 63
    494e:	f8 94       	cli
    4950:	de bf       	out	0x3e, r29	; 62
    4952:	0f be       	out	0x3f, r0	; 63
    4954:	cd bf       	out	0x3d, r28	; 61
    4956:	09 94       	ijmp

00004958 <__epilogue_restores__>:
    4958:	2a 88       	ldd	r2, Y+18	; 0x12
    495a:	39 88       	ldd	r3, Y+17	; 0x11
    495c:	48 88       	ldd	r4, Y+16	; 0x10
    495e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4960:	6e 84       	ldd	r6, Y+14	; 0x0e
    4962:	7d 84       	ldd	r7, Y+13	; 0x0d
    4964:	8c 84       	ldd	r8, Y+12	; 0x0c
    4966:	9b 84       	ldd	r9, Y+11	; 0x0b
    4968:	aa 84       	ldd	r10, Y+10	; 0x0a
    496a:	b9 84       	ldd	r11, Y+9	; 0x09
    496c:	c8 84       	ldd	r12, Y+8	; 0x08
    496e:	df 80       	ldd	r13, Y+7	; 0x07
    4970:	ee 80       	ldd	r14, Y+6	; 0x06
    4972:	fd 80       	ldd	r15, Y+5	; 0x05
    4974:	0c 81       	ldd	r16, Y+4	; 0x04
    4976:	1b 81       	ldd	r17, Y+3	; 0x03
    4978:	aa 81       	ldd	r26, Y+2	; 0x02
    497a:	b9 81       	ldd	r27, Y+1	; 0x01
    497c:	ce 0f       	add	r28, r30
    497e:	d1 1d       	adc	r29, r1
    4980:	0f b6       	in	r0, 0x3f	; 63
    4982:	f8 94       	cli
    4984:	de bf       	out	0x3e, r29	; 62
    4986:	0f be       	out	0x3f, r0	; 63
    4988:	cd bf       	out	0x3d, r28	; 61
    498a:	ed 01       	movw	r28, r26
    498c:	08 95       	ret

0000498e <dtostrf>:
    498e:	ef 92       	push	r14
    4990:	ff 92       	push	r15
    4992:	0f 93       	push	r16
    4994:	1f 93       	push	r17
    4996:	f2 2f       	mov	r31, r18
    4998:	f0 2e       	mov	r15, r16
    499a:	47 fd       	sbrc	r20, 7
    499c:	02 c0       	rjmp	.+4      	; 0x49a2 <dtostrf+0x14>
    499e:	e4 e0       	ldi	r30, 0x04	; 4
    49a0:	01 c0       	rjmp	.+2      	; 0x49a4 <dtostrf+0x16>
    49a2:	e4 e1       	ldi	r30, 0x14	; 20
    49a4:	24 2f       	mov	r18, r20
    49a6:	33 27       	eor	r19, r19
    49a8:	27 fd       	sbrc	r18, 7
    49aa:	30 95       	com	r19
    49ac:	37 ff       	sbrs	r19, 7
    49ae:	03 c0       	rjmp	.+6      	; 0x49b6 <dtostrf+0x28>
    49b0:	30 95       	com	r19
    49b2:	21 95       	neg	r18
    49b4:	3f 4f       	sbci	r19, 0xFF	; 255
    49b6:	4f 2d       	mov	r20, r15
    49b8:	51 2f       	mov	r21, r17
    49ba:	0f 2f       	mov	r16, r31
    49bc:	ee 2e       	mov	r14, r30
    49be:	0e 94 09 25 	call	0x4a12	; 0x4a12 <dtoa_prf>
    49c2:	8f 2d       	mov	r24, r15
    49c4:	91 2f       	mov	r25, r17
    49c6:	1f 91       	pop	r17
    49c8:	0f 91       	pop	r16
    49ca:	ff 90       	pop	r15
    49cc:	ef 90       	pop	r14
    49ce:	08 95       	ret

000049d0 <itoa>:
    49d0:	fb 01       	movw	r30, r22
    49d2:	9f 01       	movw	r18, r30
    49d4:	e8 94       	clt
    49d6:	42 30       	cpi	r20, 0x02	; 2
    49d8:	c4 f0       	brlt	.+48     	; 0x4a0a <itoa+0x3a>
    49da:	45 32       	cpi	r20, 0x25	; 37
    49dc:	b4 f4       	brge	.+44     	; 0x4a0a <itoa+0x3a>
    49de:	4a 30       	cpi	r20, 0x0A	; 10
    49e0:	29 f4       	brne	.+10     	; 0x49ec <itoa+0x1c>
    49e2:	97 fb       	bst	r25, 7
    49e4:	1e f4       	brtc	.+6      	; 0x49ec <itoa+0x1c>
    49e6:	90 95       	com	r25
    49e8:	81 95       	neg	r24
    49ea:	9f 4f       	sbci	r25, 0xFF	; 255
    49ec:	64 2f       	mov	r22, r20
    49ee:	77 27       	eor	r23, r23
    49f0:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <__udivmodhi4>
    49f4:	80 5d       	subi	r24, 0xD0	; 208
    49f6:	8a 33       	cpi	r24, 0x3A	; 58
    49f8:	0c f0       	brlt	.+2      	; 0x49fc <itoa+0x2c>
    49fa:	89 5d       	subi	r24, 0xD9	; 217
    49fc:	81 93       	st	Z+, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	00 97       	sbiw	r24, 0x00	; 0
    4a02:	a1 f7       	brne	.-24     	; 0x49ec <itoa+0x1c>
    4a04:	16 f4       	brtc	.+4      	; 0x4a0a <itoa+0x3a>
    4a06:	5d e2       	ldi	r21, 0x2D	; 45
    4a08:	51 93       	st	Z+, r21
    4a0a:	10 82       	st	Z, r1
    4a0c:	c9 01       	movw	r24, r18
    4a0e:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <strrev>

00004a12 <dtoa_prf>:
    4a12:	a9 e0       	ldi	r26, 0x09	; 9
    4a14:	b0 e0       	ldi	r27, 0x00	; 0
    4a16:	ef e0       	ldi	r30, 0x0F	; 15
    4a18:	f5 e2       	ldi	r31, 0x25	; 37
    4a1a:	0c 94 94 24 	jmp	0x4928	; 0x4928 <__prologue_saves__+0x8>
    4a1e:	6a 01       	movw	r12, r20
    4a20:	12 2f       	mov	r17, r18
    4a22:	a0 2e       	mov	r10, r16
    4a24:	be 2c       	mov	r11, r14
    4a26:	2b e3       	ldi	r18, 0x3B	; 59
    4a28:	20 17       	cp	r18, r16
    4a2a:	18 f4       	brcc	.+6      	; 0x4a32 <dtoa_prf+0x20>
    4a2c:	2c e3       	ldi	r18, 0x3C	; 60
    4a2e:	92 2e       	mov	r9, r18
    4a30:	02 c0       	rjmp	.+4      	; 0x4a36 <dtoa_prf+0x24>
    4a32:	90 2e       	mov	r9, r16
    4a34:	93 94       	inc	r9
    4a36:	ae 01       	movw	r20, r28
    4a38:	4f 5f       	subi	r20, 0xFF	; 255
    4a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a3c:	27 e0       	ldi	r18, 0x07	; 7
    4a3e:	09 2d       	mov	r16, r9
    4a40:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__ftoa_engine>
    4a44:	bc 01       	movw	r22, r24
    4a46:	89 81       	ldd	r24, Y+1	; 0x01
    4a48:	e8 2e       	mov	r14, r24
    4a4a:	ff 24       	eor	r15, r15
    4a4c:	c7 01       	movw	r24, r14
    4a4e:	89 70       	andi	r24, 0x09	; 9
    4a50:	90 70       	andi	r25, 0x00	; 0
    4a52:	01 97       	sbiw	r24, 0x01	; 1
    4a54:	11 f4       	brne	.+4      	; 0x4a5a <dtoa_prf+0x48>
    4a56:	ad e2       	ldi	r26, 0x2D	; 45
    4a58:	09 c0       	rjmp	.+18     	; 0x4a6c <dtoa_prf+0x5a>
    4a5a:	b1 fe       	sbrs	r11, 1
    4a5c:	02 c0       	rjmp	.+4      	; 0x4a62 <dtoa_prf+0x50>
    4a5e:	ab e2       	ldi	r26, 0x2B	; 43
    4a60:	05 c0       	rjmp	.+10     	; 0x4a6c <dtoa_prf+0x5a>
    4a62:	b0 fc       	sbrc	r11, 0
    4a64:	02 c0       	rjmp	.+4      	; 0x4a6a <dtoa_prf+0x58>
    4a66:	a0 e0       	ldi	r26, 0x00	; 0
    4a68:	01 c0       	rjmp	.+2      	; 0x4a6c <dtoa_prf+0x5a>
    4a6a:	a0 e2       	ldi	r26, 0x20	; 32
    4a6c:	e3 fe       	sbrs	r14, 3
    4a6e:	3b c0       	rjmp	.+118    	; 0x4ae6 <dtoa_prf+0xd4>
    4a70:	aa 23       	and	r26, r26
    4a72:	11 f4       	brne	.+4      	; 0x4a78 <dtoa_prf+0x66>
    4a74:	23 e0       	ldi	r18, 0x03	; 3
    4a76:	01 c0       	rjmp	.+2      	; 0x4a7a <dtoa_prf+0x68>
    4a78:	24 e0       	ldi	r18, 0x04	; 4
    4a7a:	21 17       	cp	r18, r17
    4a7c:	10 f0       	brcs	.+4      	; 0x4a82 <dtoa_prf+0x70>
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	02 c0       	rjmp	.+4      	; 0x4a86 <dtoa_prf+0x74>
    4a82:	12 1b       	sub	r17, r18
    4a84:	21 2f       	mov	r18, r17
    4a86:	eb 2c       	mov	r14, r11
    4a88:	b4 fe       	sbrs	r11, 4
    4a8a:	02 c0       	rjmp	.+4      	; 0x4a90 <dtoa_prf+0x7e>
    4a8c:	32 2f       	mov	r19, r18
    4a8e:	0a c0       	rjmp	.+20     	; 0x4aa4 <dtoa_prf+0x92>
    4a90:	f6 01       	movw	r30, r12
    4a92:	32 2f       	mov	r19, r18
    4a94:	80 e2       	ldi	r24, 0x20	; 32
    4a96:	02 c0       	rjmp	.+4      	; 0x4a9c <dtoa_prf+0x8a>
    4a98:	81 93       	st	Z+, r24
    4a9a:	31 50       	subi	r19, 0x01	; 1
    4a9c:	33 23       	and	r19, r19
    4a9e:	e1 f7       	brne	.-8      	; 0x4a98 <dtoa_prf+0x86>
    4aa0:	c2 0e       	add	r12, r18
    4aa2:	d1 1c       	adc	r13, r1
    4aa4:	aa 23       	and	r26, r26
    4aa6:	19 f0       	breq	.+6      	; 0x4aae <dtoa_prf+0x9c>
    4aa8:	f6 01       	movw	r30, r12
    4aaa:	a1 93       	st	Z+, r26
    4aac:	6f 01       	movw	r12, r30
    4aae:	f6 01       	movw	r30, r12
    4ab0:	31 96       	adiw	r30, 0x01	; 1
    4ab2:	e2 fe       	sbrs	r14, 2
    4ab4:	05 c0       	rjmp	.+10     	; 0x4ac0 <dtoa_prf+0xae>
    4ab6:	9e e4       	ldi	r25, 0x4E	; 78
    4ab8:	d6 01       	movw	r26, r12
    4aba:	9c 93       	st	X, r25
    4abc:	81 e4       	ldi	r24, 0x41	; 65
    4abe:	04 c0       	rjmp	.+8      	; 0x4ac8 <dtoa_prf+0xb6>
    4ac0:	9e e6       	ldi	r25, 0x6E	; 110
    4ac2:	d6 01       	movw	r26, r12
    4ac4:	9c 93       	st	X, r25
    4ac6:	81 e6       	ldi	r24, 0x61	; 97
    4ac8:	11 96       	adiw	r26, 0x01	; 1
    4aca:	8c 93       	st	X, r24
    4acc:	91 83       	std	Z+1, r25	; 0x01
    4ace:	32 96       	adiw	r30, 0x02	; 2
    4ad0:	df 01       	movw	r26, r30
    4ad2:	83 2f       	mov	r24, r19
    4ad4:	90 e2       	ldi	r25, 0x20	; 32
    4ad6:	02 c0       	rjmp	.+4      	; 0x4adc <dtoa_prf+0xca>
    4ad8:	9d 93       	st	X+, r25
    4ada:	81 50       	subi	r24, 0x01	; 1
    4adc:	88 23       	and	r24, r24
    4ade:	e1 f7       	brne	.-8      	; 0x4ad8 <dtoa_prf+0xc6>
    4ae0:	e3 0f       	add	r30, r19
    4ae2:	f1 1d       	adc	r31, r1
    4ae4:	40 c0       	rjmp	.+128    	; 0x4b66 <dtoa_prf+0x154>
    4ae6:	e2 fe       	sbrs	r14, 2
    4ae8:	42 c0       	rjmp	.+132    	; 0x4b6e <dtoa_prf+0x15c>
    4aea:	aa 23       	and	r26, r26
    4aec:	11 f4       	brne	.+4      	; 0x4af2 <dtoa_prf+0xe0>
    4aee:	23 e0       	ldi	r18, 0x03	; 3
    4af0:	01 c0       	rjmp	.+2      	; 0x4af4 <dtoa_prf+0xe2>
    4af2:	24 e0       	ldi	r18, 0x04	; 4
    4af4:	21 17       	cp	r18, r17
    4af6:	10 f0       	brcs	.+4      	; 0x4afc <dtoa_prf+0xea>
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <dtoa_prf+0xee>
    4afc:	12 1b       	sub	r17, r18
    4afe:	21 2f       	mov	r18, r17
    4b00:	eb 2c       	mov	r14, r11
    4b02:	b4 fe       	sbrs	r11, 4
    4b04:	02 c0       	rjmp	.+4      	; 0x4b0a <dtoa_prf+0xf8>
    4b06:	92 2f       	mov	r25, r18
    4b08:	0a c0       	rjmp	.+20     	; 0x4b1e <dtoa_prf+0x10c>
    4b0a:	f6 01       	movw	r30, r12
    4b0c:	92 2f       	mov	r25, r18
    4b0e:	80 e2       	ldi	r24, 0x20	; 32
    4b10:	02 c0       	rjmp	.+4      	; 0x4b16 <dtoa_prf+0x104>
    4b12:	81 93       	st	Z+, r24
    4b14:	91 50       	subi	r25, 0x01	; 1
    4b16:	99 23       	and	r25, r25
    4b18:	e1 f7       	brne	.-8      	; 0x4b12 <dtoa_prf+0x100>
    4b1a:	c2 0e       	add	r12, r18
    4b1c:	d1 1c       	adc	r13, r1
    4b1e:	aa 23       	and	r26, r26
    4b20:	19 f0       	breq	.+6      	; 0x4b28 <dtoa_prf+0x116>
    4b22:	f6 01       	movw	r30, r12
    4b24:	a1 93       	st	Z+, r26
    4b26:	6f 01       	movw	r12, r30
    4b28:	f6 01       	movw	r30, r12
    4b2a:	31 96       	adiw	r30, 0x01	; 1
    4b2c:	e2 fe       	sbrs	r14, 2
    4b2e:	08 c0       	rjmp	.+16     	; 0x4b40 <dtoa_prf+0x12e>
    4b30:	89 e4       	ldi	r24, 0x49	; 73
    4b32:	d6 01       	movw	r26, r12
    4b34:	8c 93       	st	X, r24
    4b36:	8e e4       	ldi	r24, 0x4E	; 78
    4b38:	11 96       	adiw	r26, 0x01	; 1
    4b3a:	8c 93       	st	X, r24
    4b3c:	86 e4       	ldi	r24, 0x46	; 70
    4b3e:	07 c0       	rjmp	.+14     	; 0x4b4e <dtoa_prf+0x13c>
    4b40:	89 e6       	ldi	r24, 0x69	; 105
    4b42:	d6 01       	movw	r26, r12
    4b44:	8c 93       	st	X, r24
    4b46:	8e e6       	ldi	r24, 0x6E	; 110
    4b48:	11 96       	adiw	r26, 0x01	; 1
    4b4a:	8c 93       	st	X, r24
    4b4c:	86 e6       	ldi	r24, 0x66	; 102
    4b4e:	81 83       	std	Z+1, r24	; 0x01
    4b50:	32 96       	adiw	r30, 0x02	; 2
    4b52:	df 01       	movw	r26, r30
    4b54:	89 2f       	mov	r24, r25
    4b56:	20 e2       	ldi	r18, 0x20	; 32
    4b58:	02 c0       	rjmp	.+4      	; 0x4b5e <dtoa_prf+0x14c>
    4b5a:	2d 93       	st	X+, r18
    4b5c:	81 50       	subi	r24, 0x01	; 1
    4b5e:	88 23       	and	r24, r24
    4b60:	e1 f7       	brne	.-8      	; 0x4b5a <dtoa_prf+0x148>
    4b62:	e9 0f       	add	r30, r25
    4b64:	f1 1d       	adc	r31, r1
    4b66:	10 82       	st	Z, r1
    4b68:	2e ef       	ldi	r18, 0xFE	; 254
    4b6a:	3f ef       	ldi	r19, 0xFF	; 255
    4b6c:	af c0       	rjmp	.+350    	; 0x4ccc <dtoa_prf+0x2ba>
    4b6e:	16 16       	cp	r1, r22
    4b70:	17 06       	cpc	r1, r23
    4b72:	1c f0       	brlt	.+6      	; 0x4b7a <dtoa_prf+0x168>
    4b74:	41 e0       	ldi	r20, 0x01	; 1
    4b76:	50 e0       	ldi	r21, 0x00	; 0
    4b78:	03 c0       	rjmp	.+6      	; 0x4b80 <dtoa_prf+0x16e>
    4b7a:	ab 01       	movw	r20, r22
    4b7c:	4f 5f       	subi	r20, 0xFF	; 255
    4b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b80:	aa 20       	and	r10, r10
    4b82:	19 f4       	brne	.+6      	; 0x4b8a <dtoa_prf+0x178>
    4b84:	80 e0       	ldi	r24, 0x00	; 0
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	03 c0       	rjmp	.+6      	; 0x4b90 <dtoa_prf+0x17e>
    4b8a:	8a 2d       	mov	r24, r10
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	01 96       	adiw	r24, 0x01	; 1
    4b90:	20 e0       	ldi	r18, 0x00	; 0
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	aa 23       	and	r26, r26
    4b96:	11 f0       	breq	.+4      	; 0x4b9c <dtoa_prf+0x18a>
    4b98:	21 e0       	ldi	r18, 0x01	; 1
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	24 0f       	add	r18, r20
    4b9e:	35 1f       	adc	r19, r21
    4ba0:	28 0f       	add	r18, r24
    4ba2:	39 1f       	adc	r19, r25
    4ba4:	81 2f       	mov	r24, r17
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	28 17       	cp	r18, r24
    4baa:	39 07       	cpc	r19, r25
    4bac:	14 f0       	brlt	.+4      	; 0x4bb2 <dtoa_prf+0x1a0>
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	02 c0       	rjmp	.+4      	; 0x4bb6 <dtoa_prf+0x1a4>
    4bb2:	12 1b       	sub	r17, r18
    4bb4:	21 2f       	mov	r18, r17
    4bb6:	4b 2d       	mov	r20, r11
    4bb8:	50 e0       	ldi	r21, 0x00	; 0
    4bba:	ca 01       	movw	r24, r20
    4bbc:	80 71       	andi	r24, 0x10	; 16
    4bbe:	90 70       	andi	r25, 0x00	; 0
    4bc0:	b4 fc       	sbrc	r11, 4
    4bc2:	0d c0       	rjmp	.+26     	; 0x4bde <dtoa_prf+0x1cc>
    4bc4:	b3 fc       	sbrc	r11, 3
    4bc6:	0b c0       	rjmp	.+22     	; 0x4bde <dtoa_prf+0x1cc>
    4bc8:	f6 01       	movw	r30, r12
    4bca:	32 2f       	mov	r19, r18
    4bcc:	40 e2       	ldi	r20, 0x20	; 32
    4bce:	02 c0       	rjmp	.+4      	; 0x4bd4 <dtoa_prf+0x1c2>
    4bd0:	41 93       	st	Z+, r20
    4bd2:	31 50       	subi	r19, 0x01	; 1
    4bd4:	33 23       	and	r19, r19
    4bd6:	e1 f7       	brne	.-8      	; 0x4bd0 <dtoa_prf+0x1be>
    4bd8:	c2 0e       	add	r12, r18
    4bda:	d1 1c       	adc	r13, r1
    4bdc:	01 c0       	rjmp	.+2      	; 0x4be0 <dtoa_prf+0x1ce>
    4bde:	32 2f       	mov	r19, r18
    4be0:	aa 23       	and	r26, r26
    4be2:	19 f0       	breq	.+6      	; 0x4bea <dtoa_prf+0x1d8>
    4be4:	f6 01       	movw	r30, r12
    4be6:	a1 93       	st	Z+, r26
    4be8:	6f 01       	movw	r12, r30
    4bea:	89 2b       	or	r24, r25
    4bec:	11 f0       	breq	.+4      	; 0x4bf2 <dtoa_prf+0x1e0>
    4bee:	13 2f       	mov	r17, r19
    4bf0:	0a c0       	rjmp	.+20     	; 0x4c06 <dtoa_prf+0x1f4>
    4bf2:	f6 01       	movw	r30, r12
    4bf4:	13 2f       	mov	r17, r19
    4bf6:	80 e3       	ldi	r24, 0x30	; 48
    4bf8:	02 c0       	rjmp	.+4      	; 0x4bfe <dtoa_prf+0x1ec>
    4bfa:	81 93       	st	Z+, r24
    4bfc:	11 50       	subi	r17, 0x01	; 1
    4bfe:	11 23       	and	r17, r17
    4c00:	e1 f7       	brne	.-8      	; 0x4bfa <dtoa_prf+0x1e8>
    4c02:	c3 0e       	add	r12, r19
    4c04:	d1 1c       	adc	r13, r1
    4c06:	09 2d       	mov	r16, r9
    4c08:	06 0f       	add	r16, r22
    4c0a:	ba 80       	ldd	r11, Y+2	; 0x02
    4c0c:	90 e1       	ldi	r25, 0x10	; 16
    4c0e:	89 2e       	mov	r8, r25
    4c10:	91 2c       	mov	r9, r1
    4c12:	8e 20       	and	r8, r14
    4c14:	9f 20       	and	r9, r15
    4c16:	e4 fe       	sbrs	r14, 4
    4c18:	04 c0       	rjmp	.+8      	; 0x4c22 <dtoa_prf+0x210>
    4c1a:	f1 e3       	ldi	r31, 0x31	; 49
    4c1c:	bf 16       	cp	r11, r31
    4c1e:	09 f4       	brne	.+2      	; 0x4c22 <dtoa_prf+0x210>
    4c20:	01 50       	subi	r16, 0x01	; 1
    4c22:	10 16       	cp	r1, r16
    4c24:	14 f0       	brlt	.+4      	; 0x4c2a <dtoa_prf+0x218>
    4c26:	01 e0       	ldi	r16, 0x01	; 1
    4c28:	03 c0       	rjmp	.+6      	; 0x4c30 <dtoa_prf+0x21e>
    4c2a:	09 30       	cpi	r16, 0x09	; 9
    4c2c:	08 f0       	brcs	.+2      	; 0x4c30 <dtoa_prf+0x21e>
    4c2e:	08 e0       	ldi	r16, 0x08	; 8
    4c30:	9b 01       	movw	r18, r22
    4c32:	77 ff       	sbrs	r23, 7
    4c34:	02 c0       	rjmp	.+4      	; 0x4c3a <dtoa_prf+0x228>
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	cb 01       	movw	r24, r22
    4c3c:	01 96       	adiw	r24, 0x01	; 1
    4c3e:	82 1b       	sub	r24, r18
    4c40:	93 0b       	sbc	r25, r19
    4c42:	fe 01       	movw	r30, r28
    4c44:	31 96       	adiw	r30, 0x01	; 1
    4c46:	e8 0f       	add	r30, r24
    4c48:	f9 1f       	adc	r31, r25
    4c4a:	8e e2       	ldi	r24, 0x2E	; 46
    4c4c:	f8 2e       	mov	r15, r24
    4c4e:	3b 01       	movw	r6, r22
    4c50:	60 1a       	sub	r6, r16
    4c52:	71 08       	sbc	r7, r1
    4c54:	8a 2d       	mov	r24, r10
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	44 27       	eor	r20, r20
    4c5a:	55 27       	eor	r21, r21
    4c5c:	48 1b       	sub	r20, r24
    4c5e:	59 0b       	sbc	r21, r25
    4c60:	8f ef       	ldi	r24, 0xFF	; 255
    4c62:	2f 3f       	cpi	r18, 0xFF	; 255
    4c64:	38 07       	cpc	r19, r24
    4c66:	19 f4       	brne	.+6      	; 0x4c6e <dtoa_prf+0x25c>
    4c68:	d6 01       	movw	r26, r12
    4c6a:	fd 92       	st	X+, r15
    4c6c:	6d 01       	movw	r12, r26
    4c6e:	62 17       	cp	r22, r18
    4c70:	73 07       	cpc	r23, r19
    4c72:	2c f0       	brlt	.+10     	; 0x4c7e <dtoa_prf+0x26c>
    4c74:	62 16       	cp	r6, r18
    4c76:	73 06       	cpc	r7, r19
    4c78:	14 f4       	brge	.+4      	; 0x4c7e <dtoa_prf+0x26c>
    4c7a:	80 81       	ld	r24, Z
    4c7c:	01 c0       	rjmp	.+2      	; 0x4c80 <dtoa_prf+0x26e>
    4c7e:	80 e3       	ldi	r24, 0x30	; 48
    4c80:	21 50       	subi	r18, 0x01	; 1
    4c82:	30 40       	sbci	r19, 0x00	; 0
    4c84:	31 96       	adiw	r30, 0x01	; 1
    4c86:	24 17       	cp	r18, r20
    4c88:	35 07       	cpc	r19, r21
    4c8a:	24 f0       	brlt	.+8      	; 0x4c94 <dtoa_prf+0x282>
    4c8c:	d6 01       	movw	r26, r12
    4c8e:	8d 93       	st	X+, r24
    4c90:	6d 01       	movw	r12, r26
    4c92:	e6 cf       	rjmp	.-52     	; 0x4c60 <dtoa_prf+0x24e>
    4c94:	26 17       	cp	r18, r22
    4c96:	37 07       	cpc	r19, r23
    4c98:	49 f4       	brne	.+18     	; 0x4cac <dtoa_prf+0x29a>
    4c9a:	b5 e3       	ldi	r27, 0x35	; 53
    4c9c:	bb 15       	cp	r27, r11
    4c9e:	28 f0       	brcs	.+10     	; 0x4caa <dtoa_prf+0x298>
    4ca0:	bb 16       	cp	r11, r27
    4ca2:	21 f4       	brne	.+8      	; 0x4cac <dtoa_prf+0x29a>
    4ca4:	81 14       	cp	r8, r1
    4ca6:	91 04       	cpc	r9, r1
    4ca8:	09 f4       	brne	.+2      	; 0x4cac <dtoa_prf+0x29a>
    4caa:	81 e3       	ldi	r24, 0x31	; 49
    4cac:	f6 01       	movw	r30, r12
    4cae:	81 93       	st	Z+, r24
    4cb0:	d6 01       	movw	r26, r12
    4cb2:	81 2f       	mov	r24, r17
    4cb4:	90 e2       	ldi	r25, 0x20	; 32
    4cb6:	02 c0       	rjmp	.+4      	; 0x4cbc <dtoa_prf+0x2aa>
    4cb8:	9c 93       	st	X, r25
    4cba:	81 50       	subi	r24, 0x01	; 1
    4cbc:	11 96       	adiw	r26, 0x01	; 1
    4cbe:	88 23       	and	r24, r24
    4cc0:	d9 f7       	brne	.-10     	; 0x4cb8 <dtoa_prf+0x2a6>
    4cc2:	e1 0f       	add	r30, r17
    4cc4:	f1 1d       	adc	r31, r1
    4cc6:	10 82       	st	Z, r1
    4cc8:	20 e0       	ldi	r18, 0x00	; 0
    4cca:	30 e0       	ldi	r19, 0x00	; 0
    4ccc:	c9 01       	movw	r24, r18
    4cce:	29 96       	adiw	r28, 0x09	; 9
    4cd0:	ee e0       	ldi	r30, 0x0E	; 14
    4cd2:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__epilogue_restores__+0x8>

00004cd6 <__ftoa_engine>:
    4cd6:	28 30       	cpi	r18, 0x08	; 8
    4cd8:	08 f0       	brcs	.+2      	; 0x4cdc <__ftoa_engine+0x6>
    4cda:	27 e0       	ldi	r18, 0x07	; 7
    4cdc:	33 27       	eor	r19, r19
    4cde:	da 01       	movw	r26, r20
    4ce0:	99 0f       	add	r25, r25
    4ce2:	31 1d       	adc	r19, r1
    4ce4:	87 fd       	sbrc	r24, 7
    4ce6:	91 60       	ori	r25, 0x01	; 1
    4ce8:	00 96       	adiw	r24, 0x00	; 0
    4cea:	61 05       	cpc	r22, r1
    4cec:	71 05       	cpc	r23, r1
    4cee:	39 f4       	brne	.+14     	; 0x4cfe <__ftoa_engine+0x28>
    4cf0:	32 60       	ori	r19, 0x02	; 2
    4cf2:	2e 5f       	subi	r18, 0xFE	; 254
    4cf4:	3d 93       	st	X+, r19
    4cf6:	30 e3       	ldi	r19, 0x30	; 48
    4cf8:	2a 95       	dec	r18
    4cfa:	e1 f7       	brne	.-8      	; 0x4cf4 <__ftoa_engine+0x1e>
    4cfc:	08 95       	ret
    4cfe:	9f 3f       	cpi	r25, 0xFF	; 255
    4d00:	30 f0       	brcs	.+12     	; 0x4d0e <__ftoa_engine+0x38>
    4d02:	80 38       	cpi	r24, 0x80	; 128
    4d04:	71 05       	cpc	r23, r1
    4d06:	61 05       	cpc	r22, r1
    4d08:	09 f0       	breq	.+2      	; 0x4d0c <__ftoa_engine+0x36>
    4d0a:	3c 5f       	subi	r19, 0xFC	; 252
    4d0c:	3c 5f       	subi	r19, 0xFC	; 252
    4d0e:	3d 93       	st	X+, r19
    4d10:	91 30       	cpi	r25, 0x01	; 1
    4d12:	08 f0       	brcs	.+2      	; 0x4d16 <__ftoa_engine+0x40>
    4d14:	80 68       	ori	r24, 0x80	; 128
    4d16:	91 1d       	adc	r25, r1
    4d18:	df 93       	push	r29
    4d1a:	cf 93       	push	r28
    4d1c:	1f 93       	push	r17
    4d1e:	0f 93       	push	r16
    4d20:	ff 92       	push	r15
    4d22:	ef 92       	push	r14
    4d24:	19 2f       	mov	r17, r25
    4d26:	98 7f       	andi	r25, 0xF8	; 248
    4d28:	96 95       	lsr	r25
    4d2a:	e9 2f       	mov	r30, r25
    4d2c:	96 95       	lsr	r25
    4d2e:	96 95       	lsr	r25
    4d30:	e9 0f       	add	r30, r25
    4d32:	ff 27       	eor	r31, r31
    4d34:	e2 55       	subi	r30, 0x52	; 82
    4d36:	ff 4f       	sbci	r31, 0xFF	; 255
    4d38:	99 27       	eor	r25, r25
    4d3a:	33 27       	eor	r19, r19
    4d3c:	ee 24       	eor	r14, r14
    4d3e:	ff 24       	eor	r15, r15
    4d40:	a7 01       	movw	r20, r14
    4d42:	e7 01       	movw	r28, r14
    4d44:	05 90       	lpm	r0, Z+
    4d46:	08 94       	sec
    4d48:	07 94       	ror	r0
    4d4a:	28 f4       	brcc	.+10     	; 0x4d56 <__ftoa_engine+0x80>
    4d4c:	36 0f       	add	r19, r22
    4d4e:	e7 1e       	adc	r14, r23
    4d50:	f8 1e       	adc	r15, r24
    4d52:	49 1f       	adc	r20, r25
    4d54:	51 1d       	adc	r21, r1
    4d56:	66 0f       	add	r22, r22
    4d58:	77 1f       	adc	r23, r23
    4d5a:	88 1f       	adc	r24, r24
    4d5c:	99 1f       	adc	r25, r25
    4d5e:	06 94       	lsr	r0
    4d60:	a1 f7       	brne	.-24     	; 0x4d4a <__ftoa_engine+0x74>
    4d62:	05 90       	lpm	r0, Z+
    4d64:	07 94       	ror	r0
    4d66:	28 f4       	brcc	.+10     	; 0x4d72 <__ftoa_engine+0x9c>
    4d68:	e7 0e       	add	r14, r23
    4d6a:	f8 1e       	adc	r15, r24
    4d6c:	49 1f       	adc	r20, r25
    4d6e:	56 1f       	adc	r21, r22
    4d70:	c1 1d       	adc	r28, r1
    4d72:	77 0f       	add	r23, r23
    4d74:	88 1f       	adc	r24, r24
    4d76:	99 1f       	adc	r25, r25
    4d78:	66 1f       	adc	r22, r22
    4d7a:	06 94       	lsr	r0
    4d7c:	a1 f7       	brne	.-24     	; 0x4d66 <__ftoa_engine+0x90>
    4d7e:	05 90       	lpm	r0, Z+
    4d80:	07 94       	ror	r0
    4d82:	28 f4       	brcc	.+10     	; 0x4d8e <__ftoa_engine+0xb8>
    4d84:	f8 0e       	add	r15, r24
    4d86:	49 1f       	adc	r20, r25
    4d88:	56 1f       	adc	r21, r22
    4d8a:	c7 1f       	adc	r28, r23
    4d8c:	d1 1d       	adc	r29, r1
    4d8e:	88 0f       	add	r24, r24
    4d90:	99 1f       	adc	r25, r25
    4d92:	66 1f       	adc	r22, r22
    4d94:	77 1f       	adc	r23, r23
    4d96:	06 94       	lsr	r0
    4d98:	a1 f7       	brne	.-24     	; 0x4d82 <__ftoa_engine+0xac>
    4d9a:	05 90       	lpm	r0, Z+
    4d9c:	07 94       	ror	r0
    4d9e:	20 f4       	brcc	.+8      	; 0x4da8 <__ftoa_engine+0xd2>
    4da0:	49 0f       	add	r20, r25
    4da2:	56 1f       	adc	r21, r22
    4da4:	c7 1f       	adc	r28, r23
    4da6:	d8 1f       	adc	r29, r24
    4da8:	99 0f       	add	r25, r25
    4daa:	66 1f       	adc	r22, r22
    4dac:	77 1f       	adc	r23, r23
    4dae:	88 1f       	adc	r24, r24
    4db0:	06 94       	lsr	r0
    4db2:	a9 f7       	brne	.-22     	; 0x4d9e <__ftoa_engine+0xc8>
    4db4:	84 91       	lpm	r24, Z+
    4db6:	10 95       	com	r17
    4db8:	17 70       	andi	r17, 0x07	; 7
    4dba:	41 f0       	breq	.+16     	; 0x4dcc <__ftoa_engine+0xf6>
    4dbc:	d6 95       	lsr	r29
    4dbe:	c7 95       	ror	r28
    4dc0:	57 95       	ror	r21
    4dc2:	47 95       	ror	r20
    4dc4:	f7 94       	ror	r15
    4dc6:	e7 94       	ror	r14
    4dc8:	1a 95       	dec	r17
    4dca:	c1 f7       	brne	.-16     	; 0x4dbc <__ftoa_engine+0xe6>
    4dcc:	e4 e5       	ldi	r30, 0x54	; 84
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	68 94       	set
    4dd2:	15 90       	lpm	r1, Z+
    4dd4:	15 91       	lpm	r17, Z+
    4dd6:	35 91       	lpm	r19, Z+
    4dd8:	65 91       	lpm	r22, Z+
    4dda:	95 91       	lpm	r25, Z+
    4ddc:	05 90       	lpm	r0, Z+
    4dde:	7f e2       	ldi	r23, 0x2F	; 47
    4de0:	73 95       	inc	r23
    4de2:	e1 18       	sub	r14, r1
    4de4:	f1 0a       	sbc	r15, r17
    4de6:	43 0b       	sbc	r20, r19
    4de8:	56 0b       	sbc	r21, r22
    4dea:	c9 0b       	sbc	r28, r25
    4dec:	d0 09       	sbc	r29, r0
    4dee:	c0 f7       	brcc	.-16     	; 0x4de0 <__ftoa_engine+0x10a>
    4df0:	e1 0c       	add	r14, r1
    4df2:	f1 1e       	adc	r15, r17
    4df4:	43 1f       	adc	r20, r19
    4df6:	56 1f       	adc	r21, r22
    4df8:	c9 1f       	adc	r28, r25
    4dfa:	d0 1d       	adc	r29, r0
    4dfc:	7e f4       	brtc	.+30     	; 0x4e1c <__ftoa_engine+0x146>
    4dfe:	70 33       	cpi	r23, 0x30	; 48
    4e00:	11 f4       	brne	.+4      	; 0x4e06 <__ftoa_engine+0x130>
    4e02:	8a 95       	dec	r24
    4e04:	e6 cf       	rjmp	.-52     	; 0x4dd2 <__ftoa_engine+0xfc>
    4e06:	e8 94       	clt
    4e08:	01 50       	subi	r16, 0x01	; 1
    4e0a:	30 f0       	brcs	.+12     	; 0x4e18 <__ftoa_engine+0x142>
    4e0c:	08 0f       	add	r16, r24
    4e0e:	0a f4       	brpl	.+2      	; 0x4e12 <__ftoa_engine+0x13c>
    4e10:	00 27       	eor	r16, r16
    4e12:	02 17       	cp	r16, r18
    4e14:	08 f4       	brcc	.+2      	; 0x4e18 <__ftoa_engine+0x142>
    4e16:	20 2f       	mov	r18, r16
    4e18:	23 95       	inc	r18
    4e1a:	02 2f       	mov	r16, r18
    4e1c:	7a 33       	cpi	r23, 0x3A	; 58
    4e1e:	28 f0       	brcs	.+10     	; 0x4e2a <__ftoa_engine+0x154>
    4e20:	79 e3       	ldi	r23, 0x39	; 57
    4e22:	7d 93       	st	X+, r23
    4e24:	2a 95       	dec	r18
    4e26:	e9 f7       	brne	.-6      	; 0x4e22 <__ftoa_engine+0x14c>
    4e28:	10 c0       	rjmp	.+32     	; 0x4e4a <__ftoa_engine+0x174>
    4e2a:	7d 93       	st	X+, r23
    4e2c:	2a 95       	dec	r18
    4e2e:	89 f6       	brne	.-94     	; 0x4dd2 <__ftoa_engine+0xfc>
    4e30:	06 94       	lsr	r0
    4e32:	97 95       	ror	r25
    4e34:	67 95       	ror	r22
    4e36:	37 95       	ror	r19
    4e38:	17 95       	ror	r17
    4e3a:	17 94       	ror	r1
    4e3c:	e1 18       	sub	r14, r1
    4e3e:	f1 0a       	sbc	r15, r17
    4e40:	43 0b       	sbc	r20, r19
    4e42:	56 0b       	sbc	r21, r22
    4e44:	c9 0b       	sbc	r28, r25
    4e46:	d0 09       	sbc	r29, r0
    4e48:	98 f0       	brcs	.+38     	; 0x4e70 <__ftoa_engine+0x19a>
    4e4a:	23 95       	inc	r18
    4e4c:	7e 91       	ld	r23, -X
    4e4e:	73 95       	inc	r23
    4e50:	7a 33       	cpi	r23, 0x3A	; 58
    4e52:	08 f0       	brcs	.+2      	; 0x4e56 <__ftoa_engine+0x180>
    4e54:	70 e3       	ldi	r23, 0x30	; 48
    4e56:	7c 93       	st	X, r23
    4e58:	20 13       	cpse	r18, r16
    4e5a:	b8 f7       	brcc	.-18     	; 0x4e4a <__ftoa_engine+0x174>
    4e5c:	7e 91       	ld	r23, -X
    4e5e:	70 61       	ori	r23, 0x10	; 16
    4e60:	7d 93       	st	X+, r23
    4e62:	30 f0       	brcs	.+12     	; 0x4e70 <__ftoa_engine+0x19a>
    4e64:	83 95       	inc	r24
    4e66:	71 e3       	ldi	r23, 0x31	; 49
    4e68:	7d 93       	st	X+, r23
    4e6a:	70 e3       	ldi	r23, 0x30	; 48
    4e6c:	2a 95       	dec	r18
    4e6e:	e1 f7       	brne	.-8      	; 0x4e68 <__ftoa_engine+0x192>
    4e70:	11 24       	eor	r1, r1
    4e72:	ef 90       	pop	r14
    4e74:	ff 90       	pop	r15
    4e76:	0f 91       	pop	r16
    4e78:	1f 91       	pop	r17
    4e7a:	cf 91       	pop	r28
    4e7c:	df 91       	pop	r29
    4e7e:	99 27       	eor	r25, r25
    4e80:	87 fd       	sbrc	r24, 7
    4e82:	90 95       	com	r25
    4e84:	08 95       	ret

00004e86 <strrev>:
    4e86:	dc 01       	movw	r26, r24
    4e88:	fc 01       	movw	r30, r24
    4e8a:	67 2f       	mov	r22, r23
    4e8c:	71 91       	ld	r23, Z+
    4e8e:	77 23       	and	r23, r23
    4e90:	e1 f7       	brne	.-8      	; 0x4e8a <strrev+0x4>
    4e92:	32 97       	sbiw	r30, 0x02	; 2
    4e94:	04 c0       	rjmp	.+8      	; 0x4e9e <strrev+0x18>
    4e96:	7c 91       	ld	r23, X
    4e98:	6d 93       	st	X+, r22
    4e9a:	70 83       	st	Z, r23
    4e9c:	62 91       	ld	r22, -Z
    4e9e:	ae 17       	cp	r26, r30
    4ea0:	bf 07       	cpc	r27, r31
    4ea2:	c8 f3       	brcs	.-14     	; 0x4e96 <strrev+0x10>
    4ea4:	08 95       	ret

00004ea6 <__udivmodhi4>:
    4ea6:	aa 1b       	sub	r26, r26
    4ea8:	bb 1b       	sub	r27, r27
    4eaa:	51 e1       	ldi	r21, 0x11	; 17
    4eac:	07 c0       	rjmp	.+14     	; 0x4ebc <__udivmodhi4_ep>

00004eae <__udivmodhi4_loop>:
    4eae:	aa 1f       	adc	r26, r26
    4eb0:	bb 1f       	adc	r27, r27
    4eb2:	a6 17       	cp	r26, r22
    4eb4:	b7 07       	cpc	r27, r23
    4eb6:	10 f0       	brcs	.+4      	; 0x4ebc <__udivmodhi4_ep>
    4eb8:	a6 1b       	sub	r26, r22
    4eba:	b7 0b       	sbc	r27, r23

00004ebc <__udivmodhi4_ep>:
    4ebc:	88 1f       	adc	r24, r24
    4ebe:	99 1f       	adc	r25, r25
    4ec0:	5a 95       	dec	r21
    4ec2:	a9 f7       	brne	.-22     	; 0x4eae <__udivmodhi4_loop>
    4ec4:	80 95       	com	r24
    4ec6:	90 95       	com	r25
    4ec8:	bc 01       	movw	r22, r24
    4eca:	cd 01       	movw	r24, r26
    4ecc:	08 95       	ret

00004ece <_exit>:
    4ece:	f8 94       	cli

00004ed0 <__stop_program>:
    4ed0:	ff cf       	rjmp	.-2      	; 0x4ed0 <__stop_program>
